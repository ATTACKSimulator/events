/*! For license information please see bundle.min.js.LICENSE.txt */
var ATSEvents;(()=>{var e={"./index.ts":function(e,t,i){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const s=i("./src/Manager.ts"),n=r(i("./src/Remote.ts")),o={events:[],debug:!1,shouldRedirect:!0,redirectUrl:`https://oops.${(0,i("./src/Tools.ts").removeSubdomain)(window.location.hostname)}`,source:"LP",url:"https://api.attacksimulator.com/v0/client-events"};e.exports=class{constructor(e){const t=Object.assign(Object.assign({},o),e);t.debug&&console.log(t);const i=new n.default(t.apiKey,t.url,t.debug);this.manager=new s.Manager(i,t.events,t.source,t.redirectUrl,t.shouldRedirect,t.debug)}listen(){this.manager.listen()}stop(){this.manager.stop()}trigger(e){this.manager.trigger(e)}}},"./src/BrowserInfo.ts":function(e,t,i){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.findBrowserInfo=void 0;const s=r(i("./node_modules/ua-parser-js/src/ua-parser.js"));function n(){let e,t={};const i=navigator.userAgent;let r;return-1!==(e=i.indexOf("Opera"))?(t.name="Opera",t.version=i.substring(e+6),-1!==(e=i.indexOf("Version"))&&(t.version=i.substring(e+8))):-1!==(e=i.indexOf("OPR"))?(t.name="Opera",t.version=i.substring(e+5)):-1!==(e=i.indexOf("Edge"))?(t.name="Microsoft Edge",t.version=i.substring(e+5)):-1!==(e=i.indexOf("MSIE"))?(t.name="Microsoft Internet Explorer",t.version=i.substring(e+5)):-1!==(e=i.indexOf("Chrome"))?(t.name="Chrome",t.version=i.substring(e+7)):-1!==(e=i.indexOf("Safari"))?(t.name="Safari",t.version=i.substring(e+7),-1!==(e=i.indexOf("Version"))&&(t.version=i.substring(e+8))):-1!==(e=i.indexOf("Firefox"))?(t.name="Firefox",t.version=i.substring(e+8)):-1!==i.indexOf("Trident/")&&(t.name="Microsoft Internet Explorer",t.version=i.substring(i.indexOf("rv:")+3)),t.mobile=/Mobile|mini|Fennec|Android|iP(ad|od|hone)/.test(i),-1!=(r=t.version.indexOf(";"))&&(t.version=t.version.substring(0,r)),-1!=(r=t.version.indexOf(" "))&&(t.version=t.version.substring(0,r)),-1!=(r=t.version.indexOf(")"))&&(t.version=t.version.substring(0,r)),t.major_version=parseInt(""+t.version,10),isNaN(t.major_version)&&(t.version=""+parseFloat(navigator.appVersion),t.major_version=parseInt(navigator.appVersion,10)),t}function o(e){const{name:t,version:i}=e.getOS();return{name:t,version:i}}function a(e){const{model:t,type:i,vendor:r}=e.getDevice();return{model:t,type:i,vendor:r}}function c(e){const{architecture:t}=e.getCPU();return{architecture:t}}t.findBrowserInfo=function(){const e=new s.default;return{ua:window.navigator.userAgent,screen_size:{width:screen.width||0,height:screen.height||0},browser:n(),os:o(e),device:a(e),cpu:c(e)}}},"./src/CampaignInfo.ts":(e,t,i)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.findCampaignInfo=void 0;const r=i("./src/UrlParser.ts");function s(e,t){const i=e.split(".")[1].replace(/-/g,"+").replace(/_/g,"/"),r=JSON.parse(window.atob(i)).payload;return"attachment"===t?r.download_type="attachment":null!==t&&(r.download_type="file"),r}t.findCampaignInfo=function(){const e=new r.UrlParser(window.location.href),t=e.findParam("tk");if(!t)throw new Error("Missing ATTACK Simulator token");const i=e.findParam("file_type");try{return[t,s(t,i)]}catch(e){return[t,{ats_company_id:""}]}}},"./src/Manager.ts":(e,t,i)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Manager=void 0;const r=i("./src/BrowserInfo.ts"),s=i("./src/CampaignInfo.ts"),n=i("./src/events/AttachmentOpen.ts"),o=i("./src/events/Click.ts"),a=i("./src/events/Download.ts"),c=i("./src/events/FileOpen.ts"),d=i("./src/events/Input.ts"),l=i("./src/events/PageLoaded.ts"),u=i("./src/events/PageRead.ts"),b=i("./src/events/Submit.ts"),p=i("./src/Tools.ts");t.Manager=class{constructor(e,t,i,p,h,g=!1){this.supportedTypes=["email","password","tel"],this.supportedEvents={attachment_opened:n.AttachmentOpen,click:o.Click,download:a.Download,file_open:c.FileOpen,input:d.Input,page_loaded:l.PageLoaded,page_read:u.PageRead,submit:b.Submit},this.debug=!1,this.handlers=[],this.disabledEvents=[],this.remote=e,[this.token,this.campaignInfo]=(0,s.findCampaignInfo)(),this.browserInfo=(0,r.findBrowserInfo)(),t.length||(t=Object.keys(this.supportedEvents)),this.remoteEvents=t.map((e=>this.getEvent(e))),this.source=i,this.redirectUrl=p,this.shouldRedirect=h,this.debug=g,this.campaignInfo.download_type&&this.checkDownload()}checkDownload(){switch(this.campaignInfo.download_type){case"file":return this.trigger("file_opened");case"attachment":return this.trigger("attachment_opened")}}getEvent(e){return new this.supportedEvents[e]}listen(){let e=0;for(const t of this.remoteEvents){this.debug&&console.log(`Listening for event @${t.trigger} (${t.name})`);const i=t.targets;for(const r of i)r.addEventListener(t.trigger,this.handlers[e++]=e=>this.handle(t,e))}}stop(){let e=0;for(const t of this.remoteEvents){this.debug&&console.log(`Stopping listening for event @${t.trigger} (${t.name})`);const i=t.targets;for(const r of i)r.removeEventListener(t.trigger,this.handlers[e++])}}findType(e,t){if(!e.hasTypes||!t)return null;const i=t.currentTarget;return-1!==this.supportedTypes.indexOf(i.type)?i.type:i.dataset.type?i.dataset.type:null}packEvent(e,t){return{data:Object.assign(Object.assign({},this.browserInfo),{type:e}),source:this.source,timestamp:Math.floor(Date.now()/1e3),ats_header:this.token,event:t.name.toLowerCase(),sg_event_id:(0,p.createUUID)(),sg_message_id:this.campaignInfo.ats_instance_id}}trigger(e){const t=this.getEvent(e);if(!t)throw new Error(`Unsupported event ${e}. Please choose one of ${Object.keys(this.supportedEvents).join(", ")}`);this.handle(t)}handle(e,t){if(this.debug&&console.log(`Event @${e.trigger} (${e.name}) triggered...`),t&&(t.preventDefault(),t.stopPropagation(),t.stopImmediatePropagation()),!e.allowMultiple){if(this.disabledEvents.includes(e.name))return void(this.debug&&console.log(`Preventing duplicate event @${e.trigger} (${e.name}).`));this.disabledEvents.push(e.name)}const i=this.findType(e,t),r=this.packEvent(i,e);this.remote.post(r).then((e=>{this.debug&&console.log(e)})).catch((e=>{this.debug&&console.error(e)})).finally((()=>{e.redirectOnFinish&&this.shouldRedirect&&(window.location.href=`${this.redirectUrl}${window.location.search}`)}))}}},"./src/Remote.ts":(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.default=class{constructor(e,t,i){this.api_key=e,this.url=t,this.debug=i}post(e){return this.debug&&(console.log(`Sending event to ${this.url} with data:`),console.table(e)),new Promise(((t,i)=>{const r=new XMLHttpRequest;r.open("POST",this.url,!0),r.setRequestHeader("Content-type","application/json"),r.setRequestHeader("api-key",this.api_key),r.onreadystatechange=function(){if(4===r.readyState&&200===r.status)if(r.responseText){const e=JSON.parse(r.responseText);t(e)}else t({})},r.onerror=function(e){i(e)},r.send(JSON.stringify(e))}))}}},"./src/Tools.ts":(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.removeSubdomain=t.createUUID=void 0,t.createUUID=function(){const e=[],t="0123456789abcdef";for(let i=0;i<36;i++)e[i]=t.substr(Math.floor(16*Math.random()),1);return e[14]="4",e[19]=t.substr(3&e[19]|8,1),e[8]=e[13]=e[18]=e[23]="-",e.join("")};const i="ac|ad|ae|af|ag|ai|al|am|an|ao|aq|ar|as|at|au|aw|ax|az|ba|bb|be|bf|bg|bh|bi|bj|bm|bo|br|bs|bt|bv|bw|by|bz|ca|cc|cd|cf|cg|ch|ci|cl|cm|cn|co|cr|cu|cv|cw|cx|cz|de|dj|dk|dm|do|dz|ec|ee|eg|es|et|eu|fi|fm|fo|fr|ga|gb|gd|ge|gf|gg|gh|gi|gl|gm|gn|gp|gq|gr|gs|gt|gw|gy|hk|hm|hn|hr|ht|hu|id|ie|il|im|in|io|iq|ir|is|it|je|jo|jp|kg|ki|km|kn|kp|kr|ky|kz|la|lb|lc|li|lk|lr|ls|lt|lu|lv|ly|ma|mc|md|me|mg|mh|mk|ml|mn|mo|mp|mq|mr|ms|mt|mu|mv|mw|mx|my|na|nc|ne|nf|ng|nl|no|nr|nu|nz|om|pa|pe|pf|ph|pk|pl|pm|pn|pr|ps|pt|pw|py|qa|re|ro|rs|ru|rw|sa|sb|sc|sd|se|sg|sh|si|sj|sk|sl|sm|sn|so|sr|st|su|sv|sx|sy|sz|tc|td|tf|tg|th|tj|tk|tl|tm|tn|to|tp|tr|tt|tv|tw|tz|ua|ug|uk|us|uy|uz|va|vc|ve|vg|vi|vn|vu|wf|ws|yt".split("|"),r="com|edu|gov|net|mil|org|nom|sch|caa|res|off|gob|int|tur|ip6|uri|urn|asn|act|nsw|qld|tas|vic|pro|biz|adm|adv|agr|arq|art|ato|bio|bmd|cim|cng|cnt|ecn|eco|emp|eng|esp|etc|eti|far|fnd|fot|fst|g12|ggf|imb|ind|inf|jor|jus|leg|lel|mat|med|mus|not|ntr|odo|ppg|psc|psi|qsl|rec|slg|srv|teo|tmp|trd|vet|zlg|web|ltd|sld|pol|fin|k12|lib|pri|aip|fie|eun|sci|prd|cci|pvt|mod|idv|rel|sex|gen|nic|abr|bas|cal|cam|emr|fvg|laz|lig|lom|mar|mol|pmn|pug|sar|sic|taa|tos|umb|vao|vda|ven|mie|北海道|和歌山|神奈川|鹿児島|ass|rep|tra|per|ngo|soc|grp|plc|its|air|and|bus|can|ddr|jfk|mad|nrw|nyc|ski|spy|tcm|ulm|usa|war|fhs|vgs|dep|eid|fet|fla|flå|gol|hof|hol|sel|vik|cri|iwi|ing|abo|fam|gok|gon|gop|gos|aid|atm|gsm|sos|elk|waw|est|aca|bar|cpa|jur|law|sec|plo|www|bir|cbg|jar|khv|msk|nov|nsk|ptz|rnd|spb|stv|tom|tsk|udm|vrn|cmw|kms|nkz|snz|pub|fhv|red|ens|nat|rns|rnu|bbs|tel|bel|kep|nhs|dni|fed|isa|nsn|gub|e12|tec|орг|обр|упр|alt|nis|jpn|mex|ath|iki|nid|gda|inc".split("|");t.removeSubdomain=function(e){const t=new RegExp("^(www|studio|mail|remote|blog|webmail|server|ns1|ns2|smtp|secure|vpn|m|shop|ftp|mail2|test|portal|ns|ww1|host|support|dev|web|bbs|ww42|squatter|mx|email|1|mail1|2|forum|owa|www2|gw|admin|store|mx1|cdn|api|exchange|app|gov|2tty|vps|govyty|hgfgdf|news|1rer|lkjkui).","i"),s=(e=e.replace(t,"")).split(".");for(;s.length>3;)s.shift();return 3===s.length&&(s[1].length>2&&s[2].length>2||-1===r.indexOf(s[1])&&-1===i.indexOf(s[2]))&&s.shift(),s.join(".")}},"./src/UrlParser.ts":(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.UrlParser=void 0;t.UrlParser=class{constructor(e){this.url=e;const t=document.createElement("a");t.href=e,this.protocol=t.protocol,this.host=t.host,this.hostname=t.hostname,this.port=t.port,this.pathname=t.pathname,this.hash=t.hash,this.search=t.search.substr(1),this.parseParameters()}parseParameters(){this.parameters={};const e=this.search.split("&");for(const t of e){const[e,i]=t.split("=");this.parameters[e]=i}}findParam(e){return this.parameters[e]||null}}},"./src/events/AttachmentOpen.ts":(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.AttachmentOpen=void 0;t.AttachmentOpen=class{get redirectOnFinish(){return!1}get trigger(){return""}get name(){return"attachment_opened"}get hasTypes(){return!1}get targets(){return[]}checkEvent(){return!0}}},"./src/events/Click.ts":(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Click=void 0;t.Click=class{get redirectOnFinish(){return!0}get trigger(){return"click"}get name(){return"page_left"}get hasTypes(){return!0}get targets(){return[...document.querySelectorAll("a:not([href$='.exe']),button:not([type=submit]),input[type=button]")].filter((e=>!e.hasAttribute("ignore")))}checkEvent(e){return e.which&&e.isTrusted&&e.screenX&&0!=e.screenX&&e.screenY&&0!=e.screenY}}},"./src/events/Download.ts":(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Download=void 0;t.Download=class{get redirectOnFinish(){return!0}get trigger(){return"click"}get name(){return"download_file_event"}get hasTypes(){return!0}get targets(){return[...document.querySelectorAll("a[href$='.exe']")].filter((e=>!e.hasAttribute("ignore")))}checkEvent(e){return e.which&&e.isTrusted&&e.screenX&&0!=e.screenX&&e.screenY&&0!=e.screenY}}},"./src/events/FileOpen.ts":(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.FileOpen=void 0;t.FileOpen=class{get redirectOnFinish(){return!1}get trigger(){return""}get name(){return"file_opened"}get hasTypes(){return!1}get targets(){return[]}checkEvent(){return!0}}},"./src/events/Input.ts":(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Input=void 0;t.Input=class{get redirectOnFinish(){return!1}get trigger(){return"input"}get name(){return"input_filled"}get hasTypes(){return!0}get targets(){return[...document.querySelectorAll("select,textarea,input")].filter((e=>!e.hasAttribute("ignore")))}checkEvent(e){return!!e.target.value.trim()}}},"./src/events/PageLoaded.ts":(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.PageLoaded=void 0;t.PageLoaded=class{get redirectOnFinish(){return!1}get trigger(){return"load"}get name(){return"page_loaded"}get hasTypes(){return!1}get targets(){return[window]}checkEvent(){return!0}}},"./src/events/PageRead.ts":(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.PageRead=void 0;t.PageRead=class{constructor(){this.minScrollPercentage=75,this.minStaySeconds=6e4,this.hasScrolled=!1,this.hasStayed=!1,this.customEvent=new Event(this.trigger),this.enable()}enable(){window.onscroll=()=>this.scrolled(),this.detectFocus(),this.detectVisibility(),this.scrolled(),this.timeout=setTimeout((()=>this.stayed()),this.minStaySeconds)}get visibilityProps(){if(void 0!==document.hidden)return["visibilitychange","visibilityState"];if(void 0!==document.mozHidden)return["mozvisibilitychange","mozVisibilityState"];if(void 0!==document.msHidden)return["msvisibilitychange","msVisibilityState"];if(void 0!==document.webkitHidden)return["webkitvisibilitychange","webkitVisibilityState"];throw new Error("Visibility not supported.")}detectFocus(){window.addEventListener("focus",this.focusGranted.bind(this)),window.addEventListener("blur",this.focusLost.bind(this))}detectVisibility(){try{const[e]=this.visibilityProps;document.addEventListener(e,this.visibilityChanged.bind(this))}catch(e){return}}stopDetectingVisibility(){try{const[e]=this.visibilityProps;document.removeEventListener(e,this.visibilityChanged.bind(this))}catch(e){return}}visibilityChanged(){const[e,t]=this.visibilityProps;this.toggleTimer("visible"===document[t])}focusGranted(){this.toggleTimer(!0)}focusLost(){this.toggleTimer(!1)}toggleTimer(e){this.hasStayed||(e?this.timeout=setTimeout((()=>this.stayed()),this.minStaySeconds):clearTimeout(this.timeout))}disable(){window.onscroll=null,this.stopDetectingVisibility(),window.removeEventListener("focus",this.focusGranted.bind(this)),window.removeEventListener("blur",this.focusLost.bind(this))}getScrollPercent(){return(document.documentElement.scrollTop+document.body.scrollTop)/(document.documentElement.scrollHeight-document.documentElement.clientHeight)*100}scrolled(){this.getScrollPercent()>this.minScrollPercentage&&(this.hasStayed&&this.dispatch(),this.hasScrolled=!0)}stayed(){this.hasScrolled&&this.dispatch(),this.hasStayed=!0}dispatch(){window.dispatchEvent(this.customEvent),this.disable()}get redirectOnFinish(){return!1}get trigger(){return"page_read"}get name(){return"page_read"}get hasTypes(){return!1}get targets(){return[window]}checkEvent(){return!0}}},"./src/events/Submit.ts":(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Submit=void 0;t.Submit=class{get redirectOnFinish(){return!0}get trigger(){return"submit"}get name(){return"form_submitted"}get hasTypes(){return!0}get targets(){return[...document.querySelectorAll("form")].filter((e=>!e.hasAttribute("ignore")))}checkEvent(e){return-1===e.target.className.indexOf("disabled")}}},"./node_modules/ua-parser-js/src/ua-parser.js":function(e,t,i){var r;!function(s,n){"use strict";var o="function",a="undefined",c="object",d="string",l="model",u="name",b="type",p="vendor",h="version",g="architecture",m="console",w="mobile",f="tablet",v="smarttv",y="wearable",k="embedded",x="Amazon",_="Apple",O="ASUS",S="BlackBerry",E="Firefox",P="Google",T="Huawei",j="LG",M="Microsoft",z="Motorola",A="Opera",q="Samsung",C="Sony",I="Xiaomi",U="Zebra",N="Facebook",R=function(e){for(var t={},i=0;i<e.length;i++)t[e[i].toUpperCase()]=e[i];return t},F=function(e,t){return typeof e===d&&-1!==L(t).indexOf(L(e))},L=function(e){return e.toLowerCase()},D=function(e,t){if(typeof e===d)return e=e.replace(/^\s\s*/,"").replace(/\s\s*$/,""),typeof t===a?e:e.substring(0,255)},V=function(e,t){for(var i,r,s,a,d,l,u=0;u<t.length&&!d;){var b=t[u],p=t[u+1];for(i=r=0;i<b.length&&!d;)if(d=b[i++].exec(e))for(s=0;s<p.length;s++)l=d[++r],typeof(a=p[s])===c&&a.length>0?2===a.length?typeof a[1]==o?this[a[0]]=a[1].call(this,l):this[a[0]]=a[1]:3===a.length?typeof a[1]!==o||a[1].exec&&a[1].test?this[a[0]]=l?l.replace(a[1],a[2]):n:this[a[0]]=l?a[1].call(this,l,a[2]):n:4===a.length&&(this[a[0]]=l?a[3].call(this,l.replace(a[1],a[2])):n):this[a]=l||n;u+=2}},$=function(e,t){for(var i in t)if(typeof t[i]===c&&t[i].length>0){for(var r=0;r<t[i].length;r++)if(F(t[i][r],e))return"?"===i?n:i}else if(F(t[i],e))return"?"===i?n:i;return e},B={ME:"4.90","NT 3.11":"NT3.51","NT 4.0":"NT4.0",2e3:"NT 5.0",XP:["NT 5.1","NT 5.2"],Vista:"NT 6.0",7:"NT 6.1",8:"NT 6.2",8.1:"NT 6.3",10:["NT 6.4","NT 10.0"],RT:"ARM"},H={browser:[[/\b(?:crmo|crios)\/([\w\.]+)/i],[h,[u,"Chrome"]],[/edg(?:e|ios|a)?\/([\w\.]+)/i],[h,[u,"Edge"]],[/(opera mini)\/([-\w\.]+)/i,/(opera [mobiletab]{3,6})\b.+version\/([-\w\.]+)/i,/(opera)(?:.+version\/|[\/ ]+)([\w\.]+)/i],[u,h],[/opios[\/ ]+([\w\.]+)/i],[h,[u,"Opera Mini"]],[/\bopr\/([\w\.]+)/i],[h,[u,A]],[/(kindle)\/([\w\.]+)/i,/(lunascape|maxthon|netfront|jasmine|blazer)[\/ ]?([\w\.]*)/i,/(avant |iemobile|slim)(?:browser)?[\/ ]?([\w\.]*)/i,/(ba?idubrowser)[\/ ]?([\w\.]+)/i,/(?:ms|\()(ie) ([\w\.]+)/i,/(flock|rockmelt|midori|epiphany|silk|skyfire|ovibrowser|bolt|iron|vivaldi|iridium|phantomjs|bowser|quark|qupzilla|falkon|rekonq|puffin|brave|whale|qqbrowserlite|qq)\/([-\w\.]+)/i,/(weibo)__([\d\.]+)/i],[u,h],[/(?:\buc? ?browser|(?:juc.+)ucweb)[\/ ]?([\w\.]+)/i],[h,[u,"UCBrowser"]],[/\bqbcore\/([\w\.]+)/i],[h,[u,"WeChat(Win) Desktop"]],[/micromessenger\/([\w\.]+)/i],[h,[u,"WeChat"]],[/konqueror\/([\w\.]+)/i],[h,[u,"Konqueror"]],[/trident.+rv[: ]([\w\.]{1,9})\b.+like gecko/i],[h,[u,"IE"]],[/yabrowser\/([\w\.]+)/i],[h,[u,"Yandex"]],[/(avast|avg)\/([\w\.]+)/i],[[u,/(.+)/,"$1 Secure Browser"],h],[/\bfocus\/([\w\.]+)/i],[h,[u,"Firefox Focus"]],[/\bopt\/([\w\.]+)/i],[h,[u,"Opera Touch"]],[/coc_coc\w+\/([\w\.]+)/i],[h,[u,"Coc Coc"]],[/dolfin\/([\w\.]+)/i],[h,[u,"Dolphin"]],[/coast\/([\w\.]+)/i],[h,[u,"Opera Coast"]],[/miuibrowser\/([\w\.]+)/i],[h,[u,"MIUI Browser"]],[/fxios\/([-\w\.]+)/i],[h,[u,E]],[/\bqihu|(qi?ho?o?|360)browser/i],[[u,"360 Browser"]],[/(oculus|samsung|sailfish)browser\/([\w\.]+)/i],[[u,/(.+)/,"$1 Browser"],h],[/(comodo_dragon)\/([\w\.]+)/i],[[u,/_/g," "],h],[/(electron)\/([\w\.]+) safari/i,/(tesla)(?: qtcarbrowser|\/(20\d\d\.[-\w\.]+))/i,/m?(qqbrowser|baiduboxapp|2345Explorer)[\/ ]?([\w\.]+)/i],[u,h],[/(metasr)[\/ ]?([\w\.]+)/i,/(lbbrowser)/i],[u],[/((?:fban\/fbios|fb_iab\/fb4a)(?!.+fbav)|;fbav\/([\w\.]+);)/i],[[u,N],h],[/safari (line)\/([\w\.]+)/i,/\b(line)\/([\w\.]+)\/iab/i,/(chromium|instagram)[\/ ]([-\w\.]+)/i],[u,h],[/\bgsa\/([\w\.]+) .*safari\//i],[h,[u,"GSA"]],[/headlesschrome(?:\/([\w\.]+)| )/i],[h,[u,"Chrome Headless"]],[/ wv\).+(chrome)\/([\w\.]+)/i],[[u,"Chrome WebView"],h],[/droid.+ version\/([\w\.]+)\b.+(?:mobile safari|safari)/i],[h,[u,"Android Browser"]],[/(chrome|omniweb|arora|[tizenoka]{5} ?browser)\/v?([\w\.]+)/i],[u,h],[/version\/([\w\.]+) .*mobile\/\w+ (safari)/i],[h,[u,"Mobile Safari"]],[/version\/([\w\.]+) .*(mobile ?safari|safari)/i],[h,u],[/webkit.+?(mobile ?safari|safari)(\/[\w\.]+)/i],[u,[h,$,{"1.0":"/8",1.2:"/1",1.3:"/3","2.0":"/412","2.0.2":"/416","2.0.3":"/417","2.0.4":"/419","?":"/"}]],[/(webkit|khtml)\/([\w\.]+)/i],[u,h],[/(navigator|netscape\d?)\/([-\w\.]+)/i],[[u,"Netscape"],h],[/mobile vr; rv:([\w\.]+)\).+firefox/i],[h,[u,"Firefox Reality"]],[/ekiohf.+(flow)\/([\w\.]+)/i,/(swiftfox)/i,/(icedragon|iceweasel|camino|chimera|fennec|maemo browser|minimo|conkeror|klar)[\/ ]?([\w\.\+]+)/i,/(seamonkey|k-meleon|icecat|iceape|firebird|phoenix|palemoon|basilisk|waterfox)\/([-\w\.]+)$/i,/(firefox)\/([\w\.]+)/i,/(mozilla)\/([\w\.]+) .+rv\:.+gecko\/\d+/i,/(polaris|lynx|dillo|icab|doris|amaya|w3m|netsurf|sleipnir|obigo|mosaic|(?:go|ice|up)[\. ]?browser)[-\/ ]?v?([\w\.]+)/i,/(links) \(([\w\.]+)/i],[u,h]],cpu:[[/(?:(amd|x(?:(?:86|64)[-_])?|wow|win)64)[;\)]/i],[[g,"amd64"]],[/(ia32(?=;))/i],[[g,L]],[/((?:i[346]|x)86)[;\)]/i],[[g,"ia32"]],[/\b(aarch64|arm(v?8e?l?|_?64))\b/i],[[g,"arm64"]],[/\b(arm(?:v[67])?ht?n?[fl]p?)\b/i],[[g,"armhf"]],[/windows (ce|mobile); ppc;/i],[[g,"arm"]],[/((?:ppc|powerpc)(?:64)?)(?: mac|;|\))/i],[[g,/ower/,"",L]],[/(sun4\w)[;\)]/i],[[g,"sparc"]],[/((?:avr32|ia64(?=;))|68k(?=\))|\barm(?=v(?:[1-7]|[5-7]1)l?|;|eabi)|(?=atmel )avr|(?:irix|mips|sparc)(?:64)?\b|pa-risc)/i],[[g,L]]],device:[[/\b(sch-i[89]0\d|shw-m380s|sm-[pt]\w{2,4}|gt-[pn]\d{2,4}|sgh-t8[56]9|nexus 10)/i],[l,[p,q],[b,f]],[/\b((?:s[cgp]h|gt|sm)-\w+|galaxy nexus)/i,/samsung[- ]([-\w]+)/i,/sec-(sgh\w+)/i],[l,[p,q],[b,w]],[/\((ip(?:hone|od)[\w ]*);/i],[l,[p,_],[b,w]],[/\((ipad);[-\w\),; ]+apple/i,/applecoremedia\/[\w\.]+ \((ipad)/i,/\b(ipad)\d\d?,\d\d?[;\]].+ios/i],[l,[p,_],[b,f]],[/\b((?:ag[rs][23]?|bah2?|sht?|btv)-a?[lw]\d{2})\b(?!.+d\/s)/i],[l,[p,T],[b,f]],[/(?:huawei|honor)([-\w ]+)[;\)]/i,/\b(nexus 6p|\w{2,4}-[atu]?[ln][01259x][012359][an]?)\b(?!.+d\/s)/i],[l,[p,T],[b,w]],[/\b(poco[\w ]+)(?: bui|\))/i,/\b; (\w+) build\/hm\1/i,/\b(hm[-_ ]?note?[_ ]?(?:\d\w)?) bui/i,/\b(redmi[\-_ ]?(?:note|k)?[\w_ ]+)(?: bui|\))/i,/\b(mi[-_ ]?(?:a\d|one|one[_ ]plus|note lte|max)?[_ ]?(?:\d?\w?)[_ ]?(?:plus|se|lite)?)(?: bui|\))/i],[[l,/_/g," "],[p,I],[b,w]],[/\b(mi[-_ ]?(?:pad)(?:[\w_ ]+))(?: bui|\))/i],[[l,/_/g," "],[p,I],[b,f]],[/; (\w+) bui.+ oppo/i,/\b(cph[12]\d{3}|p(?:af|c[al]|d\w|e[ar])[mt]\d0|x9007|a101op)\b/i],[l,[p,"OPPO"],[b,w]],[/vivo (\w+)(?: bui|\))/i,/\b(v[12]\d{3}\w?[at])(?: bui|;)/i],[l,[p,"Vivo"],[b,w]],[/\b(rmx[12]\d{3})(?: bui|;|\))/i],[l,[p,"Realme"],[b,w]],[/\b(milestone|droid(?:[2-4x]| (?:bionic|x2|pro|razr))?:?( 4g)?)\b[\w ]+build\//i,/\bmot(?:orola)?[- ](\w*)/i,/((?:moto[\w\(\) ]+|xt\d{3,4}|nexus 6)(?= bui|\)))/i],[l,[p,z],[b,w]],[/\b(mz60\d|xoom[2 ]{0,2}) build\//i],[l,[p,z],[b,f]],[/((?=lg)?[vl]k\-?\d{3}) bui| 3\.[-\w; ]{10}lg?-([06cv9]{3,4})/i],[l,[p,j],[b,f]],[/(lm(?:-?f100[nv]?|-[\w\.]+)(?= bui|\))|nexus [45])/i,/\blg[-e;\/ ]+((?!browser|netcast|android tv)\w+)/i,/\blg-?([\d\w]+) bui/i],[l,[p,j],[b,w]],[/(ideatab[-\w ]+)/i,/lenovo ?(s[56]000[-\w]+|tab(?:[\w ]+)|yt[-\d\w]{6}|tb[-\d\w]{6})/i],[l,[p,"Lenovo"],[b,f]],[/(?:maemo|nokia).*(n900|lumia \d+)/i,/nokia[-_ ]?([-\w\.]*)/i],[[l,/_/g," "],[p,"Nokia"],[b,w]],[/(pixel c)\b/i],[l,[p,P],[b,f]],[/droid.+; (pixel[\daxl ]{0,6})(?: bui|\))/i],[l,[p,P],[b,w]],[/droid.+ ([c-g]\d{4}|so[-gl]\w+|xq-a\w[4-7][12])(?= bui|\).+chrome\/(?![1-6]{0,1}\d\.))/i],[l,[p,C],[b,w]],[/sony tablet [ps]/i,/\b(?:sony)?sgp\w+(?: bui|\))/i],[[l,"Xperia Tablet"],[p,C],[b,f]],[/ (kb2005|in20[12]5|be20[12][59])\b/i,/(?:one)?(?:plus)? (a\d0\d\d)(?: b|\))/i],[l,[p,"OnePlus"],[b,w]],[/(alexa)webm/i,/(kf[a-z]{2}wi)( bui|\))/i,/(kf[a-z]+)( bui|\)).+silk\//i],[l,[p,x],[b,f]],[/((?:sd|kf)[0349hijorstuw]+)( bui|\)).+silk\//i],[[l,/(.+)/g,"Fire Phone $1"],[p,x],[b,w]],[/(playbook);[-\w\),; ]+(rim)/i],[l,p,[b,f]],[/\b((?:bb[a-f]|st[hv])100-\d)/i,/\(bb10; (\w+)/i],[l,[p,S],[b,w]],[/(?:\b|asus_)(transfo[prime ]{4,10} \w+|eeepc|slider \w+|nexus 7|padfone|p00[cj])/i],[l,[p,O],[b,f]],[/ (z[bes]6[027][012][km][ls]|zenfone \d\w?)\b/i],[l,[p,O],[b,w]],[/(nexus 9)/i],[l,[p,"HTC"],[b,f]],[/(htc)[-;_ ]{1,2}([\w ]+(?=\)| bui)|\w+)/i,/(zte)[- ]([\w ]+?)(?: bui|\/|\))/i,/(alcatel|geeksphone|nexian|panasonic|sony)[-_ ]?([-\w]*)/i],[p,[l,/_/g," "],[b,w]],[/droid.+; ([ab][1-7]-?[0178a]\d\d?)/i],[l,[p,"Acer"],[b,f]],[/droid.+; (m[1-5] note) bui/i,/\bmz-([-\w]{2,})/i],[l,[p,"Meizu"],[b,w]],[/\b(sh-?[altvz]?\d\d[a-ekm]?)/i],[l,[p,"Sharp"],[b,w]],[/(blackberry|benq|palm(?=\-)|sonyericsson|acer|asus|dell|meizu|motorola|polytron)[-_ ]?([-\w]*)/i,/(hp) ([\w ]+\w)/i,/(asus)-?(\w+)/i,/(microsoft); (lumia[\w ]+)/i,/(lenovo)[-_ ]?([-\w]+)/i,/(jolla)/i,/(oppo) ?([\w ]+) bui/i],[p,l,[b,w]],[/(archos) (gamepad2?)/i,/(hp).+(touchpad(?!.+tablet)|tablet)/i,/(kindle)\/([\w\.]+)/i,/(nook)[\w ]+build\/(\w+)/i,/(dell) (strea[kpr\d ]*[\dko])/i,/(le[- ]+pan)[- ]+(\w{1,9}) bui/i,/(trinity)[- ]*(t\d{3}) bui/i,/(gigaset)[- ]+(q\w{1,9}) bui/i,/(vodafone) ([\w ]+)(?:\)| bui)/i],[p,l,[b,f]],[/(surface duo)/i],[l,[p,M],[b,f]],[/droid [\d\.]+; (fp\du?)(?: b|\))/i],[l,[p,"Fairphone"],[b,w]],[/(u304aa)/i],[l,[p,"AT&T"],[b,w]],[/\bsie-(\w*)/i],[l,[p,"Siemens"],[b,w]],[/\b(rct\w+) b/i],[l,[p,"RCA"],[b,f]],[/\b(venue[\d ]{2,7}) b/i],[l,[p,"Dell"],[b,f]],[/\b(q(?:mv|ta)\w+) b/i],[l,[p,"Verizon"],[b,f]],[/\b(?:barnes[& ]+noble |bn[rt])([\w\+ ]*) b/i],[l,[p,"Barnes & Noble"],[b,f]],[/\b(tm\d{3}\w+) b/i],[l,[p,"NuVision"],[b,f]],[/\b(k88) b/i],[l,[p,"ZTE"],[b,f]],[/\b(nx\d{3}j) b/i],[l,[p,"ZTE"],[b,w]],[/\b(gen\d{3}) b.+49h/i],[l,[p,"Swiss"],[b,w]],[/\b(zur\d{3}) b/i],[l,[p,"Swiss"],[b,f]],[/\b((zeki)?tb.*\b) b/i],[l,[p,"Zeki"],[b,f]],[/\b([yr]\d{2}) b/i,/\b(dragon[- ]+touch |dt)(\w{5}) b/i],[[p,"Dragon Touch"],l,[b,f]],[/\b(ns-?\w{0,9}) b/i],[l,[p,"Insignia"],[b,f]],[/\b((nxa|next)-?\w{0,9}) b/i],[l,[p,"NextBook"],[b,f]],[/\b(xtreme\_)?(v(1[045]|2[015]|[3469]0|7[05])) b/i],[[p,"Voice"],l,[b,w]],[/\b(lvtel\-)?(v1[12]) b/i],[[p,"LvTel"],l,[b,w]],[/\b(ph-1) /i],[l,[p,"Essential"],[b,w]],[/\b(v(100md|700na|7011|917g).*\b) b/i],[l,[p,"Envizen"],[b,f]],[/\b(trio[-\w\. ]+) b/i],[l,[p,"MachSpeed"],[b,f]],[/\btu_(1491) b/i],[l,[p,"Rotor"],[b,f]],[/(shield[\w ]+) b/i],[l,[p,"Nvidia"],[b,f]],[/(sprint) (\w+)/i],[p,l,[b,w]],[/(kin\.[onetw]{3})/i],[[l,/\./g," "],[p,M],[b,w]],[/droid.+; (cc6666?|et5[16]|mc[239][23]x?|vc8[03]x?)\)/i],[l,[p,U],[b,f]],[/droid.+; (ec30|ps20|tc[2-8]\d[kx])\)/i],[l,[p,U],[b,w]],[/(ouya)/i,/(nintendo) ([wids3utch]+)/i],[p,l,[b,m]],[/droid.+; (shield) bui/i],[l,[p,"Nvidia"],[b,m]],[/(playstation [345portablevi]+)/i],[l,[p,C],[b,m]],[/\b(xbox(?: one)?(?!; xbox))[\); ]/i],[l,[p,M],[b,m]],[/smart-tv.+(samsung)/i],[p,[b,v]],[/hbbtv.+maple;(\d+)/i],[[l,/^/,"SmartTV"],[p,q],[b,v]],[/(nux; netcast.+smarttv|lg (netcast\.tv-201\d|android tv))/i],[[p,j],[b,v]],[/(apple) ?tv/i],[p,[l,"Apple TV"],[b,v]],[/crkey/i],[[l,"Chromecast"],[p,P],[b,v]],[/droid.+aft(\w)( bui|\))/i],[l,[p,x],[b,v]],[/\(dtv[\);].+(aquos)/i],[l,[p,"Sharp"],[b,v]],[/\b(roku)[\dx]*[\)\/]((?:dvp-)?[\d\.]*)/i,/hbbtv\/\d+\.\d+\.\d+ +\([\w ]*; *(\w[^;]*);([^;]*)/i],[[p,D],[l,D],[b,v]],[/\b(android tv|smart[- ]?tv|opera tv|tv; rv:)\b/i],[[b,v]],[/((pebble))app/i],[p,l,[b,y]],[/droid.+; (glass) \d/i],[l,[p,P],[b,y]],[/droid.+; (wt63?0{2,3})\)/i],[l,[p,U],[b,y]],[/(quest( 2)?)/i],[l,[p,N],[b,y]],[/(tesla)(?: qtcarbrowser|\/[-\w\.]+)/i],[p,[b,k]],[/droid .+?; ([^;]+?)(?: bui|\) applew).+? mobile safari/i],[l,[b,w]],[/droid .+?; ([^;]+?)(?: bui|\) applew).+?(?! mobile) safari/i],[l,[b,f]],[/\b((tablet|tab)[;\/]|focus\/\d(?!.+mobile))/i],[[b,f]],[/(phone|mobile(?:[;\/]| safari)|pda(?=.+windows ce))/i],[[b,w]],[/(android[-\w\. ]{0,9});.+buil/i],[l,[p,"Generic"]]],engine:[[/windows.+ edge\/([\w\.]+)/i],[h,[u,"EdgeHTML"]],[/webkit\/537\.36.+chrome\/(?!27)([\w\.]+)/i],[h,[u,"Blink"]],[/(presto)\/([\w\.]+)/i,/(webkit|trident|netfront|netsurf|amaya|lynx|w3m|goanna)\/([\w\.]+)/i,/ekioh(flow)\/([\w\.]+)/i,/(khtml|tasman|links)[\/ ]\(?([\w\.]+)/i,/(icab)[\/ ]([23]\.[\d\.]+)/i],[u,h],[/rv\:([\w\.]{1,9})\b.+(gecko)/i],[h,u]],os:[[/microsoft (windows) (vista|xp)/i],[u,h],[/(windows) nt 6\.2; (arm)/i,/(windows (?:phone(?: os)?|mobile))[\/ ]?([\d\.\w ]*)/i,/(windows)[\/ ]?([ntce\d\. ]+\w)(?!.+xbox)/i],[u,[h,$,B]],[/(win(?=3|9|n)|win 9x )([nt\d\.]+)/i],[[u,"Windows"],[h,$,B]],[/ip[honead]{2,4}\b(?:.*os ([\w]+) like mac|; opera)/i,/cfnetwork\/.+darwin/i],[[h,/_/g,"."],[u,"iOS"]],[/(mac os x) ?([\w\. ]*)/i,/(macintosh|mac_powerpc\b)(?!.+haiku)/i],[[u,"Mac OS"],[h,/_/g,"."]],[/droid ([\w\.]+)\b.+(android[- ]x86)/i],[h,u],[/(android|webos|qnx|bada|rim tablet os|maemo|meego|sailfish)[-\/ ]?([\w\.]*)/i,/(blackberry)\w*\/([\w\.]*)/i,/(tizen|kaios)[\/ ]([\w\.]+)/i,/\((series40);/i],[u,h],[/\(bb(10);/i],[h,[u,S]],[/(?:symbian ?os|symbos|s60(?=;)|series60)[-\/ ]?([\w\.]*)/i],[h,[u,"Symbian"]],[/mozilla\/[\d\.]+ \((?:mobile|tablet|tv|mobile; [\w ]+); rv:.+ gecko\/([\w\.]+)/i],[h,[u,"Firefox OS"]],[/web0s;.+rt(tv)/i,/\b(?:hp)?wos(?:browser)?\/([\w\.]+)/i],[h,[u,"webOS"]],[/crkey\/([\d\.]+)/i],[h,[u,"Chromecast"]],[/(cros) [\w]+ ([\w\.]+\w)/i],[[u,"Chromium OS"],h],[/(nintendo|playstation) ([wids345portablevuch]+)/i,/(xbox); +xbox ([^\);]+)/i,/\b(joli|palm)\b ?(?:os)?\/?([\w\.]*)/i,/(mint)[\/\(\) ]?(\w*)/i,/(mageia|vectorlinux)[; ]/i,/([kxln]?ubuntu|debian|suse|opensuse|gentoo|arch(?= linux)|slackware|fedora|mandriva|centos|pclinuxos|red ?hat|zenwalk|linpus|raspbian|plan 9|minix|risc os|contiki|deepin|manjaro|elementary os|sabayon|linspire)(?: gnu\/linux)?(?: enterprise)?(?:[- ]linux)?(?:-gnu)?[-\/ ]?(?!chrom|package)([-\w\.]*)/i,/(hurd|linux) ?([\w\.]*)/i,/(gnu) ?([\w\.]*)/i,/\b([-frentopcghs]{0,5}bsd|dragonfly)[\/ ]?(?!amd|[ix346]{1,2}86)([\w\.]*)/i,/(haiku) (\w+)/i],[u,h],[/(sunos) ?([\w\.\d]*)/i],[[u,"Solaris"],h],[/((?:open)?solaris)[-\/ ]?([\w\.]*)/i,/(aix) ((\d)(?=\.|\)| )[\w\.])*/i,/\b(beos|os\/2|amigaos|morphos|openvms|fuchsia|hp-ux)/i,/(unix) ?([\w\.]*)/i],[u,h]]},G=function(e,t){if(typeof e===c&&(t=e,e=n),!(this instanceof G))return new G(e,t).getResult();var i=e||(typeof s!==a&&s.navigator&&s.navigator.userAgent?s.navigator.userAgent:""),r=t?function(e,t){var i={};for(var r in e)t[r]&&t[r].length%2==0?i[r]=t[r].concat(e[r]):i[r]=e[r];return i}(H,t):H;return this.getBrowser=function(){var e,t={};return t.name=n,t.version=n,V.call(t,i,r.browser),t.major=typeof(e=t.version)===d?e.replace(/[^\d\.]/g,"").split(".")[0]:n,t},this.getCPU=function(){var e={};return e.architecture=n,V.call(e,i,r.cpu),e},this.getDevice=function(){var e={};return e.vendor=n,e.model=n,e.type=n,V.call(e,i,r.device),e},this.getEngine=function(){var e={};return e.name=n,e.version=n,V.call(e,i,r.engine),e},this.getOS=function(){var e={};return e.name=n,e.version=n,V.call(e,i,r.os),e},this.getResult=function(){return{ua:this.getUA(),browser:this.getBrowser(),engine:this.getEngine(),os:this.getOS(),device:this.getDevice(),cpu:this.getCPU()}},this.getUA=function(){return i},this.setUA=function(e){return i=typeof e===d&&e.length>255?D(e,255):e,this},this.setUA(i),this};G.VERSION="1.0.2",G.BROWSER=R([u,h,"major"]),G.CPU=R([g]),G.DEVICE=R([l,p,b,m,w,v,f,y,k]),G.ENGINE=G.OS=R([u,h]),typeof t!==a?(e.exports&&(t=e.exports=G),t.UAParser=G):i.amdO?(r=function(){return G}.call(t,i,t,e))===n||(e.exports=r):typeof s!==a&&(s.UAParser=G);var X=typeof s!==a&&(s.jQuery||s.Zepto);if(X&&!X.ua){var W=new G;X.ua=W.getResult(),X.ua.get=function(){return W.getUA()},X.ua.set=function(e){W.setUA(e);var t=W.getResult();for(var i in t)X.ua[i]=t[i]}}}("object"==typeof window?window:this)}},t={};function i(r){var s=t[r];if(void 0!==s)return s.exports;var n=t[r]={exports:{}};return e[r].call(n.exports,n,n.exports,i),n.exports}i.amdO={};var r=i("./index.ts");ATSEvents=r})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,