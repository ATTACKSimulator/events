/*! For license information please see bundle.min.js.LICENSE.txt */
var ATSEvents;(()=>{var e={"./index.ts":function(e,t,i){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const s=i("./src/Manager.ts"),n=r(i("./src/Remote.ts")),o={events:[],debug:!1,shouldRedirect:!0,redirectUrl:`https://oops.${(0,i("./src/Tools.ts").removeSubdomain)(window.location.hostname)}`,source:"LP",url:"https://api.attacksimulator.com/v0/client-events"};e.exports=class{constructor(e){const t=Object.assign(Object.assign({},o),e);t.debug&&console.log(t);const i=new n.default(t.apiKey,t.url,t.debug);this.manager=new s.Manager(i,t.events,t.source,t.redirectUrl,t.shouldRedirect,t.debug)}listen(){this.manager.listen()}stop(){this.manager.stop()}trigger(e){this.manager.trigger(e)}}},"./src/BrowserInfo.ts":function(e,t,i){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.findBrowserInfo=void 0;const s=r(i("./node_modules/ua-parser-js/src/ua-parser.js"));function n(){let e,t={};const i=navigator.userAgent;let r;return-1!==(e=i.indexOf("Opera"))?(t.name="Opera",t.version=i.substring(e+6),-1!==(e=i.indexOf("Version"))&&(t.version=i.substring(e+8))):-1!==(e=i.indexOf("OPR"))?(t.name="Opera",t.version=i.substring(e+5)):-1!==(e=i.indexOf("Edge"))?(t.name="Microsoft Edge",t.version=i.substring(e+5)):-1!==(e=i.indexOf("MSIE"))?(t.name="Microsoft Internet Explorer",t.version=i.substring(e+5)):-1!==(e=i.indexOf("Chrome"))?(t.name="Chrome",t.version=i.substring(e+7)):-1!==(e=i.indexOf("Safari"))?(t.name="Safari",t.version=i.substring(e+7),-1!==(e=i.indexOf("Version"))&&(t.version=i.substring(e+8))):-1!==(e=i.indexOf("Firefox"))?(t.name="Firefox",t.version=i.substring(e+8)):-1!==i.indexOf("Trident/")&&(t.name="Microsoft Internet Explorer",t.version=i.substring(i.indexOf("rv:")+3)),t.mobile=/Mobile|mini|Fennec|Android|iP(ad|od|hone)/.test(i),-1!=(r=t.version.indexOf(";"))&&(t.version=t.version.substring(0,r)),-1!=(r=t.version.indexOf(" "))&&(t.version=t.version.substring(0,r)),-1!=(r=t.version.indexOf(")"))&&(t.version=t.version.substring(0,r)),t.major_version=parseInt(""+t.version,10),isNaN(t.major_version)&&(t.version=""+parseFloat(navigator.appVersion),t.major_version=parseInt(navigator.appVersion,10)),t}function o(e){const{name:t,version:i}=e.getOS();return{name:t,version:i}}function a(e){const{model:t,type:i,vendor:r}=e.getDevice();return{model:t,type:i,vendor:r}}function l(e){const{architecture:t}=e.getCPU();return{architecture:t}}t.findBrowserInfo=function(){const e=new s.default;return{ua:window.navigator.userAgent,screen_size:{width:screen.width||0,height:screen.height||0},browser:n(),os:o(e),device:a(e),cpu:l(e)}}},"./src/CampaignInfo.ts":(e,t,i)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.findCampaignInfo=void 0;const r=i("./src/UrlParser.ts");function s(e,t){const i=e.split(".")[1].replace(/-/g,"+").replace(/_/g,"/"),r=JSON.parse(window.atob(i)).payload;return"attachment"===t?r.download_type="attachment":null!==t&&(r.download_type="file"),r}t.findCampaignInfo=function(){const e=new r.UrlParser(window.location.href),t=e.findParam("tk");if(!t)throw new Error("Missing ATTACK Simulator token");const i=e.findParam("file_type");try{return[t,s(t,i)]}catch(e){return[t,{ats_company_id:""}]}}},"./src/Logger.ts":(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.default=class{constructor(e){this.debug=e}info(e){this.debug&&console.log(e)}error(e){this.debug&&console.error(e)}warn(e){this.debug&&console.warn(e)}}},"./src/Manager.ts":function(e,t,i){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.Manager=void 0;const s=i("./src/BrowserInfo.ts"),n=i("./src/CampaignInfo.ts"),o=i("./src/Tools.ts"),a=r(i("./src/events/AttachmentOpen.ts")),l=r(i("./src/events/Click.ts")),u=r(i("./src/events/Download.ts")),c=r(i("./src/events/Extension.ts")),d=r(i("./src/events/FileOpen.ts")),g=r(i("./src/events/Input.ts")),b=r(i("./src/events/Microphone.ts")),h=r(i("./src/events/Notification.ts")),p=r(i("./src/events/PageLoaded.ts")),m=r(i("./src/events/PageRead.ts")),f=r(i("./src/events/Submit.ts")),w=r(i("./src/events/Webcam.ts")),v=r(i("./src/Logger.ts"));t.Manager=class{constructor(e,t,i,r,o,_=!1){this.supportedTypes=["email","password","tel","text","given-name","name","family-name","street-address","cc-name","cc-given-name","cc-family-name","cc-number","cc-exp","cc-exp-month","cc-exp-year","cc-csc","cc-type"],this.supportedEvents={attachment_opened:a.default,click:l.default,download:u.default,extension_installed:c.default,file_open:d.default,input_filled:g.default,page_loaded:p.default,page_read:m.default,mic_accepted:b.default,notification_accepted:h.default,submit:f.default,webcam_accepted:w.default},this.handlers=[],this.disabledEvents=[],this.logger=new v.default(_),this.remote=e,[this.token,this.campaignInfo]=(0,n.findCampaignInfo)(),this.browserInfo=(0,s.findBrowserInfo)(),t.length||(t=Object.keys(this.supportedEvents)),this.activeEvents=t.map((e=>this.getEvent(e))).filter((e=>null!==e)),this.logger.info(`Enabled events: ${t.join(" | ")}`),this.source=i,this.redirectUrl=r,this.shouldRedirect=o,this.campaignInfo.download_type&&this.checkDownload()}getEvent(e){return this.supportedEvents[e]?new this.supportedEvents[e]:null}checkDownload(){switch(this.campaignInfo.download_type){case"file":return this.trigger("file_opened");case"attachment":return this.trigger("attachment_opened")}}listen(){let e=0;for(const t of this.activeEvents)t.trigger?(this.logger.info(`Listening for event @${t.trigger} (${t.name})`),window.addEventListener(t.trigger,this.handlers[e++]=e=>this.prehandle(t,e))):this.logger.info(`The active event ${t.name} does not have a trigger. Skipping...`)}stop(){let e=0;for(const t of this.activeEvents)t.trigger&&(this.logger.info(`Stopping listening for event @${t.trigger} (${t.name})`),window.addEventListener(t.trigger,this.handlers[e++]))}trigger(e){const t=this.getEvent(e);if(!t)throw new Error(`Unsupported event ${e}. Please choose one of ${Object.keys(this.supportedEvents).join(", ")}`);this.handle(t,null,!1)}prehandle(e,t){e.shouldDebounce?(0,o.debounce)(((...e)=>this.handle(...e)),500,e,t):this.handle(e,t)}findType(e,t){if(!e.hasTypes||!t)return null;const i=t.target,r=i.getAttribute("autocomplete")||i.type;return-1!==this.supportedTypes.indexOf(r)?r:null}findName(e,t){const i=this.findType(e,t);return i?`${e.name}-${i}`:e.name}packEvent(e,t){return{data:Object.assign(Object.assign({},this.browserInfo),{type:e}),source:this.source,timestamp:Math.floor(Date.now()/1e3),ats_header:this.token,event:t.name.toLowerCase(),sg_event_id:(0,o.createUUID)(),sg_message_id:this.campaignInfo.ats_instance_id}}handle(e,t,i=!0){if(this.logger.info(`Event @${e.trigger} (${e.name}) triggered...`),!e.validate(t)&&i)return void this.logger.info(`Event @${e.trigger} (${e.name}) not valid...`);if(t&&e.isBlocking&&(t.preventDefault(),t.stopPropagation(),t.stopImmediatePropagation()),!e.allowMultiple){const i=this.findName(e,t);if(this.disabledEvents.includes(i))return void this.logger.info(`Preventing duplicate event @${e.trigger} (${i}).`);this.disabledEvents.push(i)}const r=this.findType(e,t),s=this.packEvent(r,e);this.remote.post(s).then((e=>this.logger.info(e))).catch((e=>this.logger.error(e))).finally((()=>{e.redirectOnFinish&&this.shouldRedirect&&(window.location.href=`${this.redirectUrl}${window.location.search}`)}))}}},"./src/Remote.ts":(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.default=class{constructor(e,t,i){this.api_key=e,this.url=t,this.debug=i}post(e){return this.debug&&(console.log(`Sending event to ${this.url} with data:`),console.table(e)),new Promise(((t,i)=>{const r=new XMLHttpRequest;r.open("POST",this.url,!0),r.setRequestHeader("Content-type","application/json"),r.setRequestHeader("api-key",this.api_key),r.onreadystatechange=function(){if(4===r.readyState&&200===r.status)if(r.responseText){const e=JSON.parse(r.responseText);t(e)}else t({})},r.onerror=function(e){i(e)},r.send(JSON.stringify(e))}))}}},"./src/Tools.ts":(e,t)=>{"use strict";function i(){const e=[],t="0123456789abcdef";for(let i=0;i<36;i++)e[i]=t.substr(Math.floor(16*Math.random()),1);return e[14]="4",e[19]=t.substr(3&e[19]|8,1),e[8]=e[13]=e[18]=e[23]="-",e.join("")}Object.defineProperty(t,"__esModule",{value:!0}),t.debounce=t.removeSubdomain=t.createUUID=void 0,t.createUUID=i;const r="ac|ad|ae|af|ag|ai|al|am|an|ao|aq|ar|as|at|au|aw|ax|az|ba|bb|be|bf|bg|bh|bi|bj|bm|bo|br|bs|bt|bv|bw|by|bz|ca|cc|cd|cf|cg|ch|ci|cl|cm|cn|co|cr|cu|cv|cw|cx|cz|de|dj|dk|dm|do|dz|ec|ee|eg|es|et|eu|fi|fm|fo|fr|ga|gb|gd|ge|gf|gg|gh|gi|gl|gm|gn|gp|gq|gr|gs|gt|gw|gy|hk|hm|hn|hr|ht|hu|id|ie|il|im|in|io|iq|ir|is|it|je|jo|jp|kg|ki|km|kn|kp|kr|ky|kz|la|lb|lc|li|lk|lr|ls|lt|lu|lv|ly|ma|mc|md|me|mg|mh|mk|ml|mn|mo|mp|mq|mr|ms|mt|mu|mv|mw|mx|my|na|nc|ne|nf|ng|nl|no|nr|nu|nz|om|pa|pe|pf|ph|pk|pl|pm|pn|pr|ps|pt|pw|py|qa|re|ro|rs|ru|rw|sa|sb|sc|sd|se|sg|sh|si|sj|sk|sl|sm|sn|so|sr|st|su|sv|sx|sy|sz|tc|td|tf|tg|th|tj|tk|tl|tm|tn|to|tp|tr|tt|tv|tw|tz|ua|ug|uk|us|uy|uz|va|vc|ve|vg|vi|vn|vu|wf|ws|yt".split("|"),s="com|edu|gov|net|mil|org|nom|sch|caa|res|off|gob|int|tur|ip6|uri|urn|asn|act|nsw|qld|tas|vic|pro|biz|adm|adv|agr|arq|art|ato|bio|bmd|cim|cng|cnt|ecn|eco|emp|eng|esp|etc|eti|far|fnd|fot|fst|g12|ggf|imb|ind|inf|jor|jus|leg|lel|mat|med|mus|not|ntr|odo|ppg|psc|psi|qsl|rec|slg|srv|teo|tmp|trd|vet|zlg|web|ltd|sld|pol|fin|k12|lib|pri|aip|fie|eun|sci|prd|cci|pvt|mod|idv|rel|sex|gen|nic|abr|bas|cal|cam|emr|fvg|laz|lig|lom|mar|mol|pmn|pug|sar|sic|taa|tos|umb|vao|vda|ven|mie|北海道|和歌山|神奈川|鹿児島|ass|rep|tra|per|ngo|soc|grp|plc|its|air|and|bus|can|ddr|jfk|mad|nrw|nyc|ski|spy|tcm|ulm|usa|war|fhs|vgs|dep|eid|fet|fla|flå|gol|hof|hol|sel|vik|cri|iwi|ing|abo|fam|gok|gon|gop|gos|aid|atm|gsm|sos|elk|waw|est|aca|bar|cpa|jur|law|sec|plo|www|bir|cbg|jar|khv|msk|nov|nsk|ptz|rnd|spb|stv|tom|tsk|udm|vrn|cmw|kms|nkz|snz|pub|fhv|red|ens|nat|rns|rnu|bbs|tel|bel|kep|nhs|dni|fed|isa|nsn|gub|e12|tec|орг|обр|упр|alt|nis|jpn|mex|ath|iki|nid|gda|inc".split("|");t.removeSubdomain=function(e){const t=new RegExp("^(www|studio|mail|remote|blog|webmail|server|ns1|ns2|smtp|secure|vpn|m|shop|ftp|mail2|test|portal|ns|ww1|host|support|dev|web|bbs|ww42|squatter|mx|email|1|mail1|2|forum|owa|www2|gw|admin|store|mx1|cdn|api|exchange|app|gov|2tty|vps|govyty|hgfgdf|news|1rer|lkjkui).","i"),i=(e=e.replace(t,"")).split(".");for(;i.length>3;)i.shift();return 3===i.length&&(i[1].length>2&&i[2].length>2||-1===s.indexOf(i[1])&&-1===r.indexOf(i[2]))&&i.shift(),i.join(".")};const n={};t.debounce=function(e,t,...r){const[,s]=r;s.target.hasAttribute("data-id")||s.target.setAttribute("data-id",i());const o=s.target.getAttribute("data-id");n[o]&&clearTimeout(n[o]),n[o]=setTimeout(e,t,...r)}},"./src/UrlParser.ts":(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.UrlParser=void 0;t.UrlParser=class{constructor(e){this.url=e;const t=document.createElement("a");t.href=e,this.protocol=t.protocol,this.host=t.host,this.hostname=t.hostname,this.port=t.port,this.pathname=t.pathname,this.hash=t.hash,this.search=t.search.substr(1),this.parseParameters()}parseParameters(){this.parameters={};const e=this.search.split("&");for(const t of e){const[e,i]=t.split("=");this.parameters[e]=i}}findParam(e){return this.parameters[e]||null}}},"./src/events/ATSEvent.ts":(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.default=class{basicValidation(e){return!e.hasAttribute("data-ignore")&&!e.hasAttribute("@click")}}},"./src/events/AttachmentOpen.ts":function(e,t,i){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const s=r(i("./src/events/ATSEvent.ts"));class n extends s.default{get shouldDebounce(){return!1}get trigger(){return null}get name(){return"attachment_opened"}get hasTypes(){return!1}get redirectOnFinish(){return!1}get isBlocking(){return!0}get allowMultiple(){return!1}validate(){return!0}}t.default=n},"./src/events/Click.ts":function(e,t,i){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const s=r(i("./src/events/ATSEvent.ts"));class n extends s.default{get shouldDebounce(){return!1}get trigger(){return"click"}get name(){return"page_left"}get hasTypes(){return!0}get redirectOnFinish(){return!0}get isBlocking(){return!1}get allowMultiple(){return!1}validate(e){return(null==e?void 0:e.target)instanceof HTMLAnchorElement?this.validateAnchor(e.target):(null==e?void 0:e.target)instanceof HTMLButtonElement&&this.validateButton(e.target)}validateAnchor(e){return this.basicValidation(e)}validateButton(e){return!(!this.basicValidation(e)||e.hasAttribute("type")&&"submit"===e.getAttribute("type"))}}t.default=n},"./src/events/Download.ts":function(e,t,i){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const s=r(i("./src/events/ATSEvent.ts"));class n extends s.default{get shouldDebounce(){return!1}get trigger(){return null}get name(){return"download_file_event"}get hasTypes(){return!1}get redirectOnFinish(){return!0}get isBlocking(){return!0}get allowMultiple(){return!1}validate(){return!0}}t.default=n},"./src/events/Extension.ts":function(e,t,i){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const s=r(i("./src/events/ATSEvent.ts"));class n extends s.default{get shouldDebounce(){return!1}get trigger(){return null}get name(){return"extension_installed"}get hasTypes(){return!1}get redirectOnFinish(){return!0}get isBlocking(){return!0}get allowMultiple(){return!1}validate(){return!0}}t.default=n},"./src/events/FileOpen.ts":function(e,t,i){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const s=r(i("./src/events/ATSEvent.ts"));class n extends s.default{get shouldDebounce(){return!1}get trigger(){return null}get name(){return"file_opened"}get hasTypes(){return!1}get redirectOnFinish(){return!0}get isBlocking(){return!0}get allowMultiple(){return!1}validate(){return!0}}t.default=n},"./src/events/Input.ts":function(e,t,i){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const s=r(i("./src/events/ATSEvent.ts"));class n extends s.default{get shouldDebounce(){return!0}get trigger(){return"input"}get name(){return"input_filled"}get hasTypes(){return!0}get redirectOnFinish(){return!1}get isBlocking(){return!1}get allowMultiple(){return!0}validate(e){return e.target instanceof HTMLInputElement&&(this.basicValidation(e.target)&&!!e.target.value.trim())}}t.default=n},"./src/events/Microphone.ts":function(e,t,i){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const s=r(i("./src/events/ATSEvent.ts"));class n extends s.default{get shouldDebounce(){return!1}get trigger(){return null}get name(){return"mic_accepted"}get hasTypes(){return!1}get redirectOnFinish(){return!0}get isBlocking(){return!0}get allowMultiple(){return!1}validate(){return!0}}t.default=n},"./src/events/Notification.ts":function(e,t,i){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const s=r(i("./src/events/ATSEvent.ts"));class n extends s.default{get shouldDebounce(){return!1}get trigger(){return null}get name(){return"notification_accepted"}get hasTypes(){return!1}get redirectOnFinish(){return!0}get isBlocking(){return!0}get allowMultiple(){return!1}validate(){return!0}}t.default=n},"./src/events/PageLoaded.ts":function(e,t,i){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const s=r(i("./src/events/ATSEvent.ts"));class n extends s.default{get shouldDebounce(){return!1}get trigger(){return"load"}get name(){return"page_loaded"}get hasTypes(){return!1}get redirectOnFinish(){return!1}get isBlocking(){return!1}get allowMultiple(){return!1}validate(){return!0}}t.default=n},"./src/events/PageRead.ts":function(e,t,i){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const s=r(i("./src/events/ATSEvent.ts"));class n extends s.default{constructor(){super(),this.minScrollPercentage=70,this.minStaySeconds=2e3,this.hasScrolled=!1,this.hasStayed=!1,this.customEvent=new Event(this.trigger),this.enable(),console.log("Page read enabled")}get shouldDebounce(){return!1}get trigger(){return"page_read"}get name(){return"page_read"}get hasTypes(){return!1}get redirectOnFinish(){return!1}get isBlocking(){return!1}get allowMultiple(){return!1}validate(){return!0}enable(){window.onscroll=()=>this.scrolled(),this.detectFocus(),this.detectVisibility(),this.scrolled(),this.timeout=setTimeout((()=>this.stayed()),this.minStaySeconds)}get visibilityProps(){if(void 0!==document.hidden)return["visibilitychange","visibilityState"];if(void 0!==document.mozHidden)return["mozvisibilitychange","mozVisibilityState"];if(void 0!==document.msHidden)return["msvisibilitychange","msVisibilityState"];if(void 0!==document.webkitHidden)return["webkitvisibilitychange","webkitVisibilityState"];throw new Error("Visibility not supported.")}detectFocus(){window.addEventListener("focus",this.focusGranted.bind(this)),window.addEventListener("blur",this.focusLost.bind(this))}detectVisibility(){try{const[e]=this.visibilityProps;document.addEventListener(e,this.visibilityChanged.bind(this))}catch(e){return}}stopDetectingVisibility(){try{const[e]=this.visibilityProps;document.removeEventListener(e,this.visibilityChanged.bind(this))}catch(e){return}}visibilityChanged(){const[e,t]=this.visibilityProps;this.toggleTimer("visible"===document[t])}focusGranted(){this.toggleTimer(!0)}focusLost(){this.toggleTimer(!1)}toggleTimer(e){this.hasStayed||(e?this.timeout=setTimeout((()=>this.stayed()),this.minStaySeconds):clearTimeout(this.timeout))}disable(){window.onscroll=null,this.stopDetectingVisibility(),window.removeEventListener("focus",this.focusGranted.bind(this)),window.removeEventListener("blur",this.focusLost.bind(this))}getScrollPercent(){return(document.documentElement.scrollTop+document.body.scrollTop)/(document.documentElement.scrollHeight-document.documentElement.clientHeight)*100}scrolled(){this.getScrollPercent()>this.minScrollPercentage&&(this.hasStayed&&this.dispatch(),this.hasScrolled=!0)}stayed(){this.hasScrolled&&this.dispatch(),this.hasStayed=!0}dispatch(){window.dispatchEvent(this.customEvent),this.disable()}}t.default=n},"./src/events/Submit.ts":function(e,t,i){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const s=r(i("./src/events/ATSEvent.ts"));class n extends s.default{get shouldDebounce(){return!1}get trigger(){return"submit"}get name(){return"form_submitted"}get hasTypes(){return!0}get redirectOnFinish(){return!0}get isBlocking(){return!0}get allowMultiple(){return!1}validate(e){return e.target instanceof HTMLFormElement&&this.basicValidation(e.target)}}t.default=n},"./src/events/Webcam.ts":function(e,t,i){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const s=r(i("./src/events/ATSEvent.ts"));class n extends s.default{get shouldDebounce(){return!1}get trigger(){return null}get name(){return"webcam_accepted"}get hasTypes(){return!1}get redirectOnFinish(){return!0}get isBlocking(){return!0}get allowMultiple(){return!1}validate(){return!0}}t.default=n},"./node_modules/ua-parser-js/src/ua-parser.js":function(e,t,i){var r;!function(s,n){"use strict";var o="function",a="undefined",l="object",u="string",c="model",d="name",g="type",b="vendor",h="version",p="architecture",m="console",f="mobile",w="tablet",v="smarttv",_="wearable",y="embedded",k="Amazon",x="Apple",O="ASUS",T="BlackBerry",E="Browser",M="Chrome",S="Firefox",j="Google",P="Huawei",A="LG",D="Microsoft",z="Motorola",q="Opera",I="Samsung",C="Sharp",N="Sony",U="Xiaomi",B="Zebra",L="Facebook",F=function(e){for(var t={},i=0;i<e.length;i++)t[e[i].toUpperCase()]=e[i];return t},V=function(e,t){return typeof e===u&&-1!==R(t).indexOf(R(e))},R=function(e){return e.toLowerCase()},$=function(e,t){if(typeof e===u)return e=e.replace(/^\s\s*/,""),typeof t===a?e:e.substring(0,350)},H=function(e,t){for(var i,r,s,a,u,c,d=0;d<t.length&&!u;){var g=t[d],b=t[d+1];for(i=r=0;i<g.length&&!u;)if(u=g[i++].exec(e))for(s=0;s<b.length;s++)c=u[++r],typeof(a=b[s])===l&&a.length>0?2===a.length?typeof a[1]==o?this[a[0]]=a[1].call(this,c):this[a[0]]=a[1]:3===a.length?typeof a[1]!==o||a[1].exec&&a[1].test?this[a[0]]=c?c.replace(a[1],a[2]):n:this[a[0]]=c?a[1].call(this,c,a[2]):n:4===a.length&&(this[a[0]]=c?a[3].call(this,c.replace(a[1],a[2])):n):this[a]=c||n;d+=2}},G=function(e,t){for(var i in t)if(typeof t[i]===l&&t[i].length>0){for(var r=0;r<t[i].length;r++)if(V(t[i][r],e))return"?"===i?n:i}else if(V(t[i],e))return"?"===i?n:i;return e},W={ME:"4.90","NT 3.11":"NT3.51","NT 4.0":"NT4.0",2e3:"NT 5.0",XP:["NT 5.1","NT 5.2"],Vista:"NT 6.0",7:"NT 6.1",8:"NT 6.2",8.1:"NT 6.3",10:["NT 6.4","NT 10.0"],RT:"ARM"},Z={browser:[[/\b(?:crmo|crios)\/([\w\.]+)/i],[h,[d,"Chrome"]],[/edg(?:e|ios|a)?\/([\w\.]+)/i],[h,[d,"Edge"]],[/(opera mini)\/([-\w\.]+)/i,/(opera [mobiletab]{3,6})\b.+version\/([-\w\.]+)/i,/(opera)(?:.+version\/|[\/ ]+)([\w\.]+)/i],[d,h],[/opios[\/ ]+([\w\.]+)/i],[h,[d,q+" Mini"]],[/\bopr\/([\w\.]+)/i],[h,[d,q]],[/(kindle)\/([\w\.]+)/i,/(lunascape|maxthon|netfront|jasmine|blazer)[\/ ]?([\w\.]*)/i,/(avant |iemobile|slim)(?:browser)?[\/ ]?([\w\.]*)/i,/(ba?idubrowser)[\/ ]?([\w\.]+)/i,/(?:ms|\()(ie) ([\w\.]+)/i,/(flock|rockmelt|midori|epiphany|silk|skyfire|ovibrowser|bolt|iron|vivaldi|iridium|phantomjs|bowser|quark|qupzilla|falkon|rekonq|puffin|brave|whale|qqbrowserlite|qq|duckduckgo)\/([-\w\.]+)/i,/(weibo)__([\d\.]+)/i],[d,h],[/(?:\buc? ?browser|(?:juc.+)ucweb)[\/ ]?([\w\.]+)/i],[h,[d,"UC"+E]],[/microm.+\bqbcore\/([\w\.]+)/i,/\bqbcore\/([\w\.]+).+microm/i],[h,[d,"WeChat(Win) Desktop"]],[/micromessenger\/([\w\.]+)/i],[h,[d,"WeChat"]],[/konqueror\/([\w\.]+)/i],[h,[d,"Konqueror"]],[/trident.+rv[: ]([\w\.]{1,9})\b.+like gecko/i],[h,[d,"IE"]],[/yabrowser\/([\w\.]+)/i],[h,[d,"Yandex"]],[/(avast|avg)\/([\w\.]+)/i],[[d,/(.+)/,"$1 Secure "+E],h],[/\bfocus\/([\w\.]+)/i],[h,[d,S+" Focus"]],[/\bopt\/([\w\.]+)/i],[h,[d,q+" Touch"]],[/coc_coc\w+\/([\w\.]+)/i],[h,[d,"Coc Coc"]],[/dolfin\/([\w\.]+)/i],[h,[d,"Dolphin"]],[/coast\/([\w\.]+)/i],[h,[d,q+" Coast"]],[/miuibrowser\/([\w\.]+)/i],[h,[d,"MIUI "+E]],[/fxios\/([-\w\.]+)/i],[h,[d,S]],[/\bqihu|(qi?ho?o?|360)browser/i],[[d,"360 "+E]],[/(oculus|samsung|sailfish|huawei)browser\/([\w\.]+)/i],[[d,/(.+)/,"$1 "+E],h],[/(comodo_dragon)\/([\w\.]+)/i],[[d,/_/g," "],h],[/(electron)\/([\w\.]+) safari/i,/(tesla)(?: qtcarbrowser|\/(20\d\d\.[-\w\.]+))/i,/m?(qqbrowser|baiduboxapp|2345Explorer)[\/ ]?([\w\.]+)/i],[d,h],[/(metasr)[\/ ]?([\w\.]+)/i,/(lbbrowser)/i,/\[(linkedin)app\]/i],[d],[/((?:fban\/fbios|fb_iab\/fb4a)(?!.+fbav)|;fbav\/([\w\.]+);)/i],[[d,L],h],[/safari (line)\/([\w\.]+)/i,/\b(line)\/([\w\.]+)\/iab/i,/(chromium|instagram)[\/ ]([-\w\.]+)/i],[d,h],[/\bgsa\/([\w\.]+) .*safari\//i],[h,[d,"GSA"]],[/headlesschrome(?:\/([\w\.]+)| )/i],[h,[d,M+" Headless"]],[/ wv\).+(chrome)\/([\w\.]+)/i],[[d,M+" WebView"],h],[/droid.+ version\/([\w\.]+)\b.+(?:mobile safari|safari)/i],[h,[d,"Android "+E]],[/(chrome|omniweb|arora|[tizenoka]{5} ?browser)\/v?([\w\.]+)/i],[d,h],[/version\/([\w\.\,]+) .*mobile\/\w+ (safari)/i],[h,[d,"Mobile Safari"]],[/version\/([\w(\.|\,)]+) .*(mobile ?safari|safari)/i],[h,d],[/webkit.+?(mobile ?safari|safari)(\/[\w\.]+)/i],[d,[h,G,{"1.0":"/8",1.2:"/1",1.3:"/3","2.0":"/412","2.0.2":"/416","2.0.3":"/417","2.0.4":"/419","?":"/"}]],[/(webkit|khtml)\/([\w\.]+)/i],[d,h],[/(navigator|netscape\d?)\/([-\w\.]+)/i],[[d,"Netscape"],h],[/mobile vr; rv:([\w\.]+)\).+firefox/i],[h,[d,S+" Reality"]],[/ekiohf.+(flow)\/([\w\.]+)/i,/(swiftfox)/i,/(icedragon|iceweasel|camino|chimera|fennec|maemo browser|minimo|conkeror|klar)[\/ ]?([\w\.\+]+)/i,/(seamonkey|k-meleon|icecat|iceape|firebird|phoenix|palemoon|basilisk|waterfox)\/([-\w\.]+)$/i,/(firefox)\/([\w\.]+)/i,/(mozilla)\/([\w\.]+) .+rv\:.+gecko\/\d+/i,/(polaris|lynx|dillo|icab|doris|amaya|w3m|netsurf|sleipnir|obigo|mosaic|(?:go|ice|up)[\. ]?browser)[-\/ ]?v?([\w\.]+)/i,/(links) \(([\w\.]+)/i],[d,h],[/(cobalt)\/([\w\.]+)/i],[d,[h,/master.|lts./,""]]],cpu:[[/(?:(amd|x(?:(?:86|64)[-_])?|wow|win)64)[;\)]/i],[[p,"amd64"]],[/(ia32(?=;))/i],[[p,R]],[/((?:i[346]|x)86)[;\)]/i],[[p,"ia32"]],[/\b(aarch64|arm(v?8e?l?|_?64))\b/i],[[p,"arm64"]],[/\b(arm(?:v[67])?ht?n?[fl]p?)\b/i],[[p,"armhf"]],[/windows (ce|mobile); ppc;/i],[[p,"arm"]],[/((?:ppc|powerpc)(?:64)?)(?: mac|;|\))/i],[[p,/ower/,"",R]],[/(sun4\w)[;\)]/i],[[p,"sparc"]],[/((?:avr32|ia64(?=;))|68k(?=\))|\barm(?=v(?:[1-7]|[5-7]1)l?|;|eabi)|(?=atmel )avr|(?:irix|mips|sparc)(?:64)?\b|pa-risc)/i],[[p,R]]],device:[[/\b(sch-i[89]0\d|shw-m380s|sm-[ptx]\w{2,4}|gt-[pn]\d{2,4}|sgh-t8[56]9|nexus 10)/i],[c,[b,I],[g,w]],[/\b((?:s[cgp]h|gt|sm)-\w+|galaxy nexus)/i,/samsung[- ]([-\w]+)/i,/sec-(sgh\w+)/i],[c,[b,I],[g,f]],[/\((ip(?:hone|od)[\w ]*);/i],[c,[b,x],[g,f]],[/\((ipad);[-\w\),; ]+apple/i,/applecoremedia\/[\w\.]+ \((ipad)/i,/\b(ipad)\d\d?,\d\d?[;\]].+ios/i],[c,[b,x],[g,w]],[/(macintosh);/i],[c,[b,x]],[/\b((?:ag[rs][23]?|bah2?|sht?|btv)-a?[lw]\d{2})\b(?!.+d\/s)/i],[c,[b,P],[g,w]],[/(?:huawei|honor)([-\w ]+)[;\)]/i,/\b(nexus 6p|\w{2,4}e?-[atu]?[ln][\dx][012359c][adn]?)\b(?!.+d\/s)/i],[c,[b,P],[g,f]],[/\b(poco[\w ]+)(?: bui|\))/i,/\b; (\w+) build\/hm\1/i,/\b(hm[-_ ]?note?[_ ]?(?:\d\w)?) bui/i,/\b(redmi[\-_ ]?(?:note|k)?[\w_ ]+)(?: bui|\))/i,/\b(mi[-_ ]?(?:a\d|one|one[_ ]plus|note lte|max|cc)?[_ ]?(?:\d?\w?)[_ ]?(?:plus|se|lite)?)(?: bui|\))/i],[[c,/_/g," "],[b,U],[g,f]],[/\b(mi[-_ ]?(?:pad)(?:[\w_ ]+))(?: bui|\))/i],[[c,/_/g," "],[b,U],[g,w]],[/; (\w+) bui.+ oppo/i,/\b(cph[12]\d{3}|p(?:af|c[al]|d\w|e[ar])[mt]\d0|x9007|a101op)\b/i],[c,[b,"OPPO"],[g,f]],[/vivo (\w+)(?: bui|\))/i,/\b(v[12]\d{3}\w?[at])(?: bui|;)/i],[c,[b,"Vivo"],[g,f]],[/\b(rmx[12]\d{3})(?: bui|;|\))/i],[c,[b,"Realme"],[g,f]],[/\b(milestone|droid(?:[2-4x]| (?:bionic|x2|pro|razr))?:?( 4g)?)\b[\w ]+build\//i,/\bmot(?:orola)?[- ](\w*)/i,/((?:moto[\w\(\) ]+|xt\d{3,4}|nexus 6)(?= bui|\)))/i],[c,[b,z],[g,f]],[/\b(mz60\d|xoom[2 ]{0,2}) build\//i],[c,[b,z],[g,w]],[/((?=lg)?[vl]k\-?\d{3}) bui| 3\.[-\w; ]{10}lg?-([06cv9]{3,4})/i],[c,[b,A],[g,w]],[/(lm(?:-?f100[nv]?|-[\w\.]+)(?= bui|\))|nexus [45])/i,/\blg[-e;\/ ]+((?!browser|netcast|android tv)\w+)/i,/\blg-?([\d\w]+) bui/i],[c,[b,A],[g,f]],[/(ideatab[-\w ]+)/i,/lenovo ?(s[56]000[-\w]+|tab(?:[\w ]+)|yt[-\d\w]{6}|tb[-\d\w]{6})/i],[c,[b,"Lenovo"],[g,w]],[/(?:maemo|nokia).*(n900|lumia \d+)/i,/nokia[-_ ]?([-\w\.]*)/i],[[c,/_/g," "],[b,"Nokia"],[g,f]],[/(pixel c)\b/i],[c,[b,j],[g,w]],[/droid.+; (pixel[\daxl ]{0,6})(?: bui|\))/i],[c,[b,j],[g,f]],[/droid.+ (a?\d[0-2]{2}so|[c-g]\d{4}|so[-gl]\w+|xq-a\w[4-7][12])(?= bui|\).+chrome\/(?![1-6]{0,1}\d\.))/i],[c,[b,N],[g,f]],[/sony tablet [ps]/i,/\b(?:sony)?sgp\w+(?: bui|\))/i],[[c,"Xperia Tablet"],[b,N],[g,w]],[/ (kb2005|in20[12]5|be20[12][59])\b/i,/(?:one)?(?:plus)? (a\d0\d\d)(?: b|\))/i],[c,[b,"OnePlus"],[g,f]],[/(alexa)webm/i,/(kf[a-z]{2}wi)( bui|\))/i,/(kf[a-z]+)( bui|\)).+silk\//i],[c,[b,k],[g,w]],[/((?:sd|kf)[0349hijorstuw]+)( bui|\)).+silk\//i],[[c,/(.+)/g,"Fire Phone $1"],[b,k],[g,f]],[/(playbook);[-\w\),; ]+(rim)/i],[c,b,[g,w]],[/\b((?:bb[a-f]|st[hv])100-\d)/i,/\(bb10; (\w+)/i],[c,[b,T],[g,f]],[/(?:\b|asus_)(transfo[prime ]{4,10} \w+|eeepc|slider \w+|nexus 7|padfone|p00[cj])/i],[c,[b,O],[g,w]],[/ (z[bes]6[027][012][km][ls]|zenfone \d\w?)\b/i],[c,[b,O],[g,f]],[/(nexus 9)/i],[c,[b,"HTC"],[g,w]],[/(htc)[-;_ ]{1,2}([\w ]+(?=\)| bui)|\w+)/i,/(zte)[- ]([\w ]+?)(?: bui|\/|\))/i,/(alcatel|geeksphone|nexian|panasonic|sony(?!-bra))[-_ ]?([-\w]*)/i],[b,[c,/_/g," "],[g,f]],[/droid.+; ([ab][1-7]-?[0178a]\d\d?)/i],[c,[b,"Acer"],[g,w]],[/droid.+; (m[1-5] note) bui/i,/\bmz-([-\w]{2,})/i],[c,[b,"Meizu"],[g,f]],[/\b(sh-?[altvz]?\d\d[a-ekm]?)/i],[c,[b,C],[g,f]],[/(blackberry|benq|palm(?=\-)|sonyericsson|acer|asus|dell|meizu|motorola|polytron)[-_ ]?([-\w]*)/i,/(hp) ([\w ]+\w)/i,/(asus)-?(\w+)/i,/(microsoft); (lumia[\w ]+)/i,/(lenovo)[-_ ]?([-\w]+)/i,/(jolla)/i,/(oppo) ?([\w ]+) bui/i],[b,c,[g,f]],[/(archos) (gamepad2?)/i,/(hp).+(touchpad(?!.+tablet)|tablet)/i,/(kindle)\/([\w\.]+)/i,/(nook)[\w ]+build\/(\w+)/i,/(dell) (strea[kpr\d ]*[\dko])/i,/(le[- ]+pan)[- ]+(\w{1,9}) bui/i,/(trinity)[- ]*(t\d{3}) bui/i,/(gigaset)[- ]+(q\w{1,9}) bui/i,/(vodafone) ([\w ]+)(?:\)| bui)/i],[b,c,[g,w]],[/(surface duo)/i],[c,[b,D],[g,w]],[/droid [\d\.]+; (fp\du?)(?: b|\))/i],[c,[b,"Fairphone"],[g,f]],[/(u304aa)/i],[c,[b,"AT&T"],[g,f]],[/\bsie-(\w*)/i],[c,[b,"Siemens"],[g,f]],[/\b(rct\w+) b/i],[c,[b,"RCA"],[g,w]],[/\b(venue[\d ]{2,7}) b/i],[c,[b,"Dell"],[g,w]],[/\b(q(?:mv|ta)\w+) b/i],[c,[b,"Verizon"],[g,w]],[/\b(?:barnes[& ]+noble |bn[rt])([\w\+ ]*) b/i],[c,[b,"Barnes & Noble"],[g,w]],[/\b(tm\d{3}\w+) b/i],[c,[b,"NuVision"],[g,w]],[/\b(k88) b/i],[c,[b,"ZTE"],[g,w]],[/\b(nx\d{3}j) b/i],[c,[b,"ZTE"],[g,f]],[/\b(gen\d{3}) b.+49h/i],[c,[b,"Swiss"],[g,f]],[/\b(zur\d{3}) b/i],[c,[b,"Swiss"],[g,w]],[/\b((zeki)?tb.*\b) b/i],[c,[b,"Zeki"],[g,w]],[/\b([yr]\d{2}) b/i,/\b(dragon[- ]+touch |dt)(\w{5}) b/i],[[b,"Dragon Touch"],c,[g,w]],[/\b(ns-?\w{0,9}) b/i],[c,[b,"Insignia"],[g,w]],[/\b((nxa|next)-?\w{0,9}) b/i],[c,[b,"NextBook"],[g,w]],[/\b(xtreme\_)?(v(1[045]|2[015]|[3469]0|7[05])) b/i],[[b,"Voice"],c,[g,f]],[/\b(lvtel\-)?(v1[12]) b/i],[[b,"LvTel"],c,[g,f]],[/\b(ph-1) /i],[c,[b,"Essential"],[g,f]],[/\b(v(100md|700na|7011|917g).*\b) b/i],[c,[b,"Envizen"],[g,w]],[/\b(trio[-\w\. ]+) b/i],[c,[b,"MachSpeed"],[g,w]],[/\btu_(1491) b/i],[c,[b,"Rotor"],[g,w]],[/(shield[\w ]+) b/i],[c,[b,"Nvidia"],[g,w]],[/(sprint) (\w+)/i],[b,c,[g,f]],[/(kin\.[onetw]{3})/i],[[c,/\./g," "],[b,D],[g,f]],[/droid.+; (cc6666?|et5[16]|mc[239][23]x?|vc8[03]x?)\)/i],[c,[b,B],[g,w]],[/droid.+; (ec30|ps20|tc[2-8]\d[kx])\)/i],[c,[b,B],[g,f]],[/(ouya)/i,/(nintendo) ([wids3utch]+)/i],[b,c,[g,m]],[/droid.+; (shield) bui/i],[c,[b,"Nvidia"],[g,m]],[/(playstation [345portablevi]+)/i],[c,[b,N],[g,m]],[/\b(xbox(?: one)?(?!; xbox))[\); ]/i],[c,[b,D],[g,m]],[/smart-tv.+(samsung)/i],[b,[g,v]],[/hbbtv.+maple;(\d+)/i],[[c,/^/,"SmartTV"],[b,I],[g,v]],[/(nux; netcast.+smarttv|lg (netcast\.tv-201\d|android tv))/i],[[b,A],[g,v]],[/(apple) ?tv/i],[b,[c,x+" TV"],[g,v]],[/crkey/i],[[c,M+"cast"],[b,j],[g,v]],[/droid.+aft(\w)( bui|\))/i],[c,[b,k],[g,v]],[/\(dtv[\);].+(aquos)/i,/(aquos-tv[\w ]+)\)/i],[c,[b,C],[g,v]],[/(bravia[\w ]+)( bui|\))/i],[c,[b,N],[g,v]],[/(mitv-\w{5}) bui/i],[c,[b,U],[g,v]],[/\b(roku)[\dx]*[\)\/]((?:dvp-)?[\d\.]*)/i,/hbbtv\/\d+\.\d+\.\d+ +\([\w ]*; *(\w[^;]*);([^;]*)/i],[[b,$],[c,$],[g,v]],[/\b(android tv|smart[- ]?tv|opera tv|tv; rv:)\b/i],[[g,v]],[/((pebble))app/i],[b,c,[g,_]],[/droid.+; (glass) \d/i],[c,[b,j],[g,_]],[/droid.+; (wt63?0{2,3})\)/i],[c,[b,B],[g,_]],[/(quest( 2)?)/i],[c,[b,L],[g,_]],[/(tesla)(?: qtcarbrowser|\/[-\w\.]+)/i],[b,[g,y]],[/droid .+?; ([^;]+?)(?: bui|\) applew).+? mobile safari/i],[c,[g,f]],[/droid .+?; ([^;]+?)(?: bui|\) applew).+?(?! mobile) safari/i],[c,[g,w]],[/\b((tablet|tab)[;\/]|focus\/\d(?!.+mobile))/i],[[g,w]],[/(phone|mobile(?:[;\/]| [ \w\/\.]*safari)|pda(?=.+windows ce))/i],[[g,f]],[/(android[-\w\. ]{0,9});.+buil/i],[c,[b,"Generic"]]],engine:[[/windows.+ edge\/([\w\.]+)/i],[h,[d,"EdgeHTML"]],[/webkit\/537\.36.+chrome\/(?!27)([\w\.]+)/i],[h,[d,"Blink"]],[/(presto)\/([\w\.]+)/i,/(webkit|trident|netfront|netsurf|amaya|lynx|w3m|goanna)\/([\w\.]+)/i,/ekioh(flow)\/([\w\.]+)/i,/(khtml|tasman|links)[\/ ]\(?([\w\.]+)/i,/(icab)[\/ ]([23]\.[\d\.]+)/i],[d,h],[/rv\:([\w\.]{1,9})\b.+(gecko)/i],[h,d]],os:[[/microsoft (windows) (vista|xp)/i],[d,h],[/(windows) nt 6\.2; (arm)/i,/(windows (?:phone(?: os)?|mobile))[\/ ]?([\d\.\w ]*)/i,/(windows)[\/ ]?([ntce\d\. ]+\w)(?!.+xbox)/i],[d,[h,G,W]],[/(win(?=3|9|n)|win 9x )([nt\d\.]+)/i],[[d,"Windows"],[h,G,W]],[/ip[honead]{2,4}\b(?:.*os ([\w]+) like mac|; opera)/i,/cfnetwork\/.+darwin/i],[[h,/_/g,"."],[d,"iOS"]],[/(mac os x) ?([\w\. ]*)/i,/(macintosh|mac_powerpc\b)(?!.+haiku)/i],[[d,"Mac OS"],[h,/_/g,"."]],[/droid ([\w\.]+)\b.+(android[- ]x86|harmonyos)/i],[h,d],[/(android|webos|qnx|bada|rim tablet os|maemo|meego|sailfish)[-\/ ]?([\w\.]*)/i,/(blackberry)\w*\/([\w\.]*)/i,/(tizen|kaios)[\/ ]([\w\.]+)/i,/\((series40);/i],[d,h],[/\(bb(10);/i],[h,[d,T]],[/(?:symbian ?os|symbos|s60(?=;)|series60)[-\/ ]?([\w\.]*)/i],[h,[d,"Symbian"]],[/mozilla\/[\d\.]+ \((?:mobile|tablet|tv|mobile; [\w ]+); rv:.+ gecko\/([\w\.]+)/i],[h,[d,S+" OS"]],[/web0s;.+rt(tv)/i,/\b(?:hp)?wos(?:browser)?\/([\w\.]+)/i],[h,[d,"webOS"]],[/crkey\/([\d\.]+)/i],[h,[d,M+"cast"]],[/(cros) [\w]+ ([\w\.]+\w)/i],[[d,"Chromium OS"],h],[/(nintendo|playstation) ([wids345portablevuch]+)/i,/(xbox); +xbox ([^\);]+)/i,/\b(joli|palm)\b ?(?:os)?\/?([\w\.]*)/i,/(mint)[\/\(\) ]?(\w*)/i,/(mageia|vectorlinux)[; ]/i,/([kxln]?ubuntu|debian|suse|opensuse|gentoo|arch(?= linux)|slackware|fedora|mandriva|centos|pclinuxos|red ?hat|zenwalk|linpus|raspbian|plan 9|minix|risc os|contiki|deepin|manjaro|elementary os|sabayon|linspire)(?: gnu\/linux)?(?: enterprise)?(?:[- ]linux)?(?:-gnu)?[-\/ ]?(?!chrom|package)([-\w\.]*)/i,/(hurd|linux) ?([\w\.]*)/i,/(gnu) ?([\w\.]*)/i,/\b([-frentopcghs]{0,5}bsd|dragonfly)[\/ ]?(?!amd|[ix346]{1,2}86)([\w\.]*)/i,/(haiku) (\w+)/i],[d,h],[/(sunos) ?([\w\.\d]*)/i],[[d,"Solaris"],h],[/((?:open)?solaris)[-\/ ]?([\w\.]*)/i,/(aix) ((\d)(?=\.|\)| )[\w\.])*/i,/\b(beos|os\/2|amigaos|morphos|openvms|fuchsia|hp-ux)/i,/(unix) ?([\w\.]*)/i],[d,h]]},X=function(e,t){if(typeof e===l&&(t=e,e=n),!(this instanceof X))return new X(e,t).getResult();var i=e||(typeof s!==a&&s.navigator&&s.navigator.userAgent?s.navigator.userAgent:""),r=t?function(e,t){var i={};for(var r in e)t[r]&&t[r].length%2==0?i[r]=t[r].concat(e[r]):i[r]=e[r];return i}(Z,t):Z;return this.getBrowser=function(){var e,t={};return t[d]=n,t[h]=n,H.call(t,i,r.browser),t.major=typeof(e=t.version)===u?e.replace(/[^\d\.]/g,"").split(".")[0]:n,t},this.getCPU=function(){var e={};return e[p]=n,H.call(e,i,r.cpu),e},this.getDevice=function(){var e={};return e[b]=n,e[c]=n,e[g]=n,H.call(e,i,r.device),e},this.getEngine=function(){var e={};return e[d]=n,e[h]=n,H.call(e,i,r.engine),e},this.getOS=function(){var e={};return e[d]=n,e[h]=n,H.call(e,i,r.os),e},this.getResult=function(){return{ua:this.getUA(),browser:this.getBrowser(),engine:this.getEngine(),os:this.getOS(),device:this.getDevice(),cpu:this.getCPU()}},this.getUA=function(){return i},this.setUA=function(e){return i=typeof e===u&&e.length>350?$(e,350):e,this},this.setUA(i),this};X.VERSION="1.0.33",X.BROWSER=F([d,h,"major"]),X.CPU=F([p]),X.DEVICE=F([c,b,g,m,f,v,w,_,y]),X.ENGINE=X.OS=F([d,h]),typeof t!==a?(e.exports&&(t=e.exports=X),t.UAParser=X):i.amdO?(r=function(){return X}.call(t,i,t,e))===n||(e.exports=r):typeof s!==a&&(s.UAParser=X);var J=typeof s!==a&&(s.jQuery||s.Zepto);if(J&&!J.ua){var K=new X;J.ua=K.getResult(),J.ua.get=function(){return K.getUA()},J.ua.set=function(e){K.setUA(e);var t=K.getResult();for(var i in t)J.ua[i]=t[i]}}}("object"==typeof window?window:this)}},t={};function i(r){var s=t[r];if(void 0!==s)return s.exports;var n=t[r]={exports:{}};return e[r].call(n.exports,n,n.exports,i),n.exports}i.amdO={};var r=i("./index.ts");ATSEvents=r})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,