/*! For license information please see bundle.min.js.LICENSE.txt */
var ATSEvents;(()=>{var e={"./index.ts":function(e,t,i){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const n=i("./src/Manager.ts"),s=r(i("./src/Remote.ts")),o={eventsToInclude:[],eventsToExclude:[],debug:!1,shouldRedirect:!0,redirectUrl:`https://oops.${(0,i("./src/Tools.ts").removeSubdomain)(window.location.hostname)}`,source:"LP",url:"https://api.attacksimulator.com/v0/client-events",extraPayload:{}};e.exports=class{constructor(e){const t=Object.assign(Object.assign({},o),e);t.debug&&console.log(t);const i=new s.default(t.apiKey,t.url,t.debug);this.manager=new n.Manager(i,t)}listen(){this.manager.listen()}on(e,t){this.manager.subscribe(e,t)}off(e,t){this.manager.unsubscribe(e,t)}stop(){this.manager.stop()}trigger(e){return this.manager.trigger(e)}}},"./src/BrowserInfo.ts":function(e,t,i){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.findBrowserInfo=void 0;const n=r(i("./node_modules/ua-parser-js/src/ua-parser.js"));function s(){let e;const t={},i=navigator.userAgent;let r;return-1!==(e=i.indexOf("Opera"))?(t.name="Opera",t.version=i.substring(e+6),-1!==(e=i.indexOf("Version"))&&(t.version=i.substring(e+8))):-1!==(e=i.indexOf("OPR"))?(t.name="Opera",t.version=i.substring(e+5)):-1!==(e=i.indexOf("Edge"))?(t.name="Microsoft Edge",t.version=i.substring(e+5)):-1!==(e=i.indexOf("MSIE"))?(t.name="Microsoft Internet Explorer",t.version=i.substring(e+5)):-1!==(e=i.indexOf("Chrome"))?(t.name="Chrome",t.version=i.substring(e+7)):-1!==(e=i.indexOf("Safari"))?(t.name="Safari",t.version=i.substring(e+7),-1!==(e=i.indexOf("Version"))&&(t.version=i.substring(e+8))):-1!==(e=i.indexOf("Firefox"))?(t.name="Firefox",t.version=i.substring(e+8)):-1!==i.indexOf("Trident/")&&(t.name="Microsoft Internet Explorer",t.version=i.substring(i.indexOf("rv:")+3)),t.mobile=/Mobile|mini|Fennec|Android|iP(ad|od|hone)/.test(i),-1!=(r=t.version.indexOf(";"))&&(t.version=t.version.substring(0,r)),-1!=(r=t.version.indexOf(" "))&&(t.version=t.version.substring(0,r)),-1!=(r=t.version.indexOf(")"))&&(t.version=t.version.substring(0,r)),t.major_version=parseInt(""+t.version,10),isNaN(t.major_version)&&(t.version=""+parseFloat(navigator.appVersion),t.major_version=parseInt(navigator.appVersion,10)),t}function o(e){const{name:t,version:i}=e.getOS();return{name:t,version:i}}function a(e){const{model:t,type:i,vendor:r}=e.getDevice();return{model:t,type:i,vendor:r}}function u(e){const{architecture:t}=e.getCPU();return{architecture:t}}t.findBrowserInfo=function(){const e=new n.default;return{ua:window.navigator.userAgent,screen_size:{width:screen.width||0,height:screen.height||0},browser:s(),os:o(e),device:a(e),cpu:u(e)}}},"./src/CampaignInfo.ts":(e,t,i)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.findCampaignInfo=void 0;const r=i("./src/UrlParser.ts");function n(e,t){const i=e.split(".")[1].replace(/-/g,"+").replace(/_/g,"/"),r=JSON.parse(window.atob(i)).payload;return"attachment"===t?r.download_type="attachment":null!==t&&(r.download_type="file"),r}t.findCampaignInfo=function(){const e=new r.UrlParser(window.location.href),t=e.findParam("tk");if(!t)throw new Error("Missing ATTACK Simulator token");const i=e.findParam("file_type");try{return[t,n(t,i)]}catch(e){return[t,{ats_company_id:""}]}}},"./src/Logger.ts":(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.default=class{constructor(e){this.debug=e}info(e){this.debug&&console.log(e)}error(e){this.debug&&console.error(e)}warn(e){this.debug&&console.warn(e)}}},"./src/Manager.ts":function(e,t,i){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.Manager=void 0;const n=i("./src/BrowserInfo.ts"),s=i("./src/CampaignInfo.ts"),o=i("./src/Tools.ts"),a=r(i("./src/events/AttachmentOpen.ts")),u=r(i("./src/events/Click.ts")),l=r(i("./src/events/Download.ts")),c=r(i("./src/events/Extension.ts")),d=r(i("./src/events/FileDownload.ts")),g=r(i("./src/events/FileOpen.ts")),b=r(i("./src/events/Input.ts")),h=r(i("./src/events/Microphone.ts")),p=r(i("./src/events/Notification.ts")),m=r(i("./src/events/PageLeft.ts")),w=r(i("./src/events/PageLoaded.ts")),f=r(i("./src/events/PageRead.ts")),v=r(i("./src/events/Submit.ts")),_=r(i("./src/events/Webcam.ts")),y=r(i("./src/events/Location.ts")),k=r(i("./src/events/Clipboard.ts")),x=r(i("./src/Logger.ts"));t.Manager=class{constructor(e,{eventsToInclude:t=[],eventsToExclude:i=[],source:r,redirectUrl:o,shouldRedirect:E,extraPayload:T,debug:M=!1}){var O;this.supportedTypes=["email","password","tel","text","given-name","name","family-name","street-address","cc-name","cc-given-name","cc-family-name","cc-number","cc-exp","cc-exp-month","cc-exp-year","cc-csc","cc-type"],this.supportedEvents={attachment_opened:a.default,button_clicked:u.default,download:l.default,extension_installed:c.default,file_download:d.default,file_open:g.default,input_filled:b.default,page_left:m.default,page_loaded:w.default,page_read:f.default,mic_accepted:h.default,notification_accepted:p.default,form_submitted:v.default,webcam_accepted:_.default,location_accepted:y.default,clipboard_accepted:k.default},this.subscriptions=[],this.handlers=[],this.disabledEvents=[],this.extraPayload={},this.logger=new x.default(M),this.remote=e,[this.token,this.campaignInfo]=(0,s.findCampaignInfo)(),this.browserInfo=(0,n.findBrowserInfo)(),this.activeEvents=this.decideActiveEvents(t,i),this.logger.info(`Enabled events: ${t.join(" | ")}`),this.source=r,this.redirectUrl=o,this.shouldRedirect=E,this.extraPayload=T,(null===(O=this.campaignInfo)||void 0===O?void 0:O.download_type)&&this.checkDownload().then(()=>{})}decideActiveEvents(e,t){if(e.length)return e.map(e=>this.getEvent(e)).filter(e=>null!==e);const i=Object.keys(this.supportedEvents).map(e=>this.getEvent(e)).filter(e=>null!==e);return t.length?i.filter(e=>!t.includes(e.name)):i}getEvent(e){return this.supportedEvents[e]?new this.supportedEvents[e]:null}checkDownload(){switch(this.campaignInfo.download_type){case"file":return this.trigger("file_opened");case"attachment":return this.trigger("attachment_opened")}}listen(){let e=0;for(const t of this.activeEvents)t.trigger?(this.logger.info(`Listening for event @${t.trigger} (${t.name})`),t.source.addEventListener(t.trigger,this.handlers[e++]=e=>this.prehandle(t,e))):this.logger.info(`The active event ${t.name} does not have a trigger. Skipping...`)}stop(){let e=0;for(const t of this.activeEvents)t.trigger&&(this.logger.info(`Stopping listening for event @${t.trigger} (${t.name})`),t.source.removeEventListener(t.trigger,this.handlers[e++]))}trigger(e){const t=this.getEvent(e);if(!t)throw new Error(`Unsupported event ${e}. Please choose one of ${Object.keys(this.supportedEvents).join(", ")}`);return this.executeEvent(t,null,!1)}prehandle(e,t){e.shouldDebounce?(0,o.debounce)((...e)=>this.handle(...e),500,e,t):this.handle(e,t)}findType(e,t){if(!e.hasTypes||!t)return null;const i=t.target,r=i.getAttribute("autocomplete")||i.type;return-1!==this.supportedTypes.indexOf(r)?r:null}findName(e,t){const i=this.findType(e,t);return i?`${e.name}-${i}`:e.name}packEvent(e,t){return Object.assign({data:Object.assign(Object.assign({},this.browserInfo),{type:e}),source:this.source,timestamp:Math.floor(Date.now()/1e3),ats_header:this.token,event:t.name.toLowerCase(),sg_event_id:(0,o.createUUID)(),sg_message_id:this.campaignInfo.ats_instance_id},this.extraPayload)}handle(e,t,i=!0){this.executeEvent(e,t,i).catch(e=>this.logger.error(e))}checkEvent(e,t,i=!0){if(!e.isValid(t)&&i)throw new Error(`Event @${e.trigger} (${e.name}) not valid...`)}checkMultiple(e,t){if(!e.allowMultiple){const i=this.findName(e,t);if(this.disabledEvents.includes(i))throw new Error(`Preventing duplicate event @${e.trigger} (${i}).`);this.disabledEvents.push(i)}}executeEvent(e,t,i=!0){this.logger.info(`Event @${e.trigger} (${e.name}) triggered...`);try{this.checkEvent(e,t,i)}catch(e){return this.logger.error(e),new Promise((t,i)=>i(e))}t&&e.isBlocking&&(t.preventDefault(),t.stopPropagation(),t.stopImmediatePropagation());try{this.checkMultiple(e,t)}catch(e){return this.logger.error(e),new Promise((t,i)=>i(e))}const r=this.findType(e,t),n=this.packEvent(r,e);return this.triggerSubscription(e),this.remote.post(n).then(e=>this.logger.info(e)).catch(e=>this.logger.error(e)).finally(()=>{e.redirectOnFinish&&this.shouldRedirect&&(window.location.href=`${this.redirectUrl}${window.location.search}`)})}get supportedEventNames(){return Object.keys(this.supportedEvents)}subscribe(e,t){if(!this.supportedEventNames.includes(e))throw new Error(`Unsupported event: ${e}`);this.subscriptions.push({eventName:e,callback:t})}unsubscribe(e,t){if(!this.supportedEventNames.includes(e))throw new Error(`Unsupported event: ${e}`);const i=this.subscriptions.findIndex(i=>i.eventName===e&&i.callback===t);i>=0&&this.subscriptions.splice(i,1)}triggerSubscription(e){this.subscriptions.filter(t=>t.eventName===e.name).forEach(t=>t.callback(e))}}},"./src/Remote.ts":function(e,t){"use strict";var i=this&&this.__awaiter||function(e,t,i,r){return new(i||(i=Promise))(function(n,s){function o(e){try{u(r.next(e))}catch(e){s(e)}}function a(e){try{u(r.throw(e))}catch(e){s(e)}}function u(e){var t;e.done?n(e.value):(t=e.value,t instanceof i?t:new i(function(e){e(t)})).then(o,a)}u((r=r.apply(e,t||[])).next())})};Object.defineProperty(t,"__esModule",{value:!0});t.default=class{constructor(e,t,i){this.api_key=e,this.url=t,this.debug=i}post(e){return i(this,void 0,void 0,function*(){this.debug&&(console.log(`Sending event to ${this.url} with data:`),console.table(e));const t=yield fetch(this.url,{method:"POST",headers:{"Content-type":"application/json","api-key":this.api_key},keepalive:!0,body:JSON.stringify(e)}),i=t.headers.get("content-type");return i&&-1!==i.indexOf("application/json")?t.json():t.text()})}}},"./src/Tools.ts":(e,t)=>{"use strict";function i(){const e=[],t="0123456789abcdef";for(let i=0;i<36;i++)e[i]=t.substr(Math.floor(16*Math.random()),1);return e[14]="4",e[19]=t.substr(3&e[19]|8,1),e[8]=e[13]=e[18]=e[23]="-",e.join("")}Object.defineProperty(t,"__esModule",{value:!0}),t.debounce=t.removeSubdomain=t.createUUID=void 0,t.createUUID=i;const r="ac|ad|ae|af|ag|ai|al|am|an|ao|aq|ar|as|at|au|aw|ax|az|ba|bb|be|bf|bg|bh|bi|bj|bm|bo|br|bs|bt|bv|bw|by|bz|ca|cc|cd|cf|cg|ch|ci|cl|cm|cn|co|cr|cu|cv|cw|cx|cz|de|dj|dk|dm|do|dz|ec|ee|eg|es|et|eu|fi|fm|fo|fr|ga|gb|gd|ge|gf|gg|gh|gi|gl|gm|gn|gp|gq|gr|gs|gt|gw|gy|hk|hm|hn|hr|ht|hu|id|ie|il|im|in|io|iq|ir|is|it|je|jo|jp|kg|ki|km|kn|kp|kr|ky|kz|la|lb|lc|li|lk|lr|ls|lt|lu|lv|ly|ma|mc|md|me|mg|mh|mk|ml|mn|mo|mp|mq|mr|ms|mt|mu|mv|mw|mx|my|na|nc|ne|nf|ng|nl|no|nr|nu|nz|om|pa|pe|pf|ph|pk|pl|pm|pn|pr|ps|pt|pw|py|qa|re|ro|rs|ru|rw|sa|sb|sc|sd|se|sg|sh|si|sj|sk|sl|sm|sn|so|sr|st|su|sv|sx|sy|sz|tc|td|tf|tg|th|tj|tk|tl|tm|tn|to|tp|tr|tt|tv|tw|tz|ua|ug|uk|us|uy|uz|va|vc|ve|vg|vi|vn|vu|wf|ws|yt".split("|"),n="com|edu|gov|net|mil|org|nom|sch|caa|res|off|gob|int|tur|ip6|uri|urn|asn|act|nsw|qld|tas|vic|pro|biz|adm|adv|agr|arq|art|ato|bio|bmd|cim|cng|cnt|ecn|eco|emp|eng|esp|etc|eti|far|fnd|fot|fst|g12|ggf|imb|ind|inf|jor|jus|leg|lel|mat|med|mus|not|ntr|odo|ppg|psc|psi|qsl|rec|slg|srv|teo|tmp|trd|vet|zlg|web|ltd|sld|pol|fin|k12|lib|pri|aip|fie|eun|sci|prd|cci|pvt|mod|idv|rel|sex|gen|nic|abr|bas|cal|cam|emr|fvg|laz|lig|lom|mar|mol|pmn|pug|sar|sic|taa|tos|umb|vao|vda|ven|mie|北海道|和歌山|神奈川|鹿児島|ass|rep|tra|per|ngo|soc|grp|plc|its|air|and|bus|can|ddr|jfk|mad|nrw|nyc|ski|spy|tcm|ulm|usa|war|fhs|vgs|dep|eid|fet|fla|flå|gol|hof|hol|sel|vik|cri|iwi|ing|abo|fam|gok|gon|gop|gos|aid|atm|gsm|sos|elk|waw|est|aca|bar|cpa|jur|law|sec|plo|www|bir|cbg|jar|khv|msk|nov|nsk|ptz|rnd|spb|stv|tom|tsk|udm|vrn|cmw|kms|nkz|snz|pub|fhv|red|ens|nat|rns|rnu|bbs|tel|bel|kep|nhs|dni|fed|isa|nsn|gub|e12|tec|орг|обр|упр|alt|nis|jpn|mex|ath|iki|nid|gda|inc".split("|");t.removeSubdomain=function(e){const t=new RegExp("^(www|studio|mail|remote|blog|webmail|server|ns1|ns2|smtp|secure|vpn|m|shop|ftp|mail2|test|portal|ns|ww1|host|support|dev|web|bbs|ww42|squatter|mx|email|1|mail1|2|forum|owa|www2|gw|admin|store|mx1|cdn|api|exchange|app|gov|2tty|vps|govyty|hgfgdf|news|1rer|lkjkui).","i"),i=(e=e.replace(t,"")).split(".");for(;i.length>3;)i.shift();return 3===i.length&&(i[1].length>2&&i[2].length>2||-1===n.indexOf(i[1])&&-1===r.indexOf(i[2]))&&i.shift(),i.join(".")};const s={};t.debounce=function(e,t,...r){const[,n]=r;n.target.hasAttribute("data-id")||n.target.setAttribute("data-id",i());const o=n.target.getAttribute("data-id");s[o]&&clearTimeout(s[o]),s[o]=setTimeout(e,t,...r)}},"./src/UrlParser.ts":(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.UrlParser=void 0;t.UrlParser=class{constructor(e){const t=document.createElement("a");t.href=e,this.protocol=t.protocol,this.host=t.host,this.hostname=t.hostname,this.port=t.port,this.pathname=t.pathname,this.hash=t.hash,this.search=t.search.substr(1),this.parseParameters()}parseParameters(){this.parameters={};const e=this.search.split("&");for(const t of e){const[e,i]=t.split("=");this.parameters[e]=i}}findParam(e){return this.parameters[e]||null}}},"./src/events/ATSEvent.ts":(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.default=class{basicValidation(e){if(e.hasAttribute("data-ignore"))return!1;for(const t of e.attributes)if(t.name.startsWith("@click")&&(t.name.includes(".stop")||t.name.includes(".prevent")))return!1;return!0}}},"./src/events/AttachmentOpen.ts":function(e,t,i){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const n=r(i("./src/events/ATSEvent.ts"));class s extends n.default{get shouldDebounce(){return!1}get trigger(){return null}get source(){return null}get name(){return"attachment_opened"}get hasTypes(){return!1}get redirectOnFinish(){return!1}get isBlocking(){return!0}get allowMultiple(){return!1}isValid(){return!0}}t.default=s},"./src/events/Click.ts":function(e,t,i){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const n=r(i("./src/events/ATSEvent.ts"));class s extends n.default{get shouldDebounce(){return!1}get trigger(){return"click"}get source(){return window}get name(){return"button_clicked"}get hasTypes(){return!0}get redirectOnFinish(){return!0}get isBlocking(){return!0}get allowMultiple(){return!1}isValid(e){if((null==e?void 0:e.target)instanceof HTMLAnchorElement)return this.validateAnchor(e.target);if((null==e?void 0:e.target)instanceof HTMLButtonElement)return this.validateButton(e.target);let t=e.target,i=10;for(;t.parentElement&&i>0;){if(t.parentElement instanceof HTMLAnchorElement)return this.validateAnchor(t.parentElement);if(t.parentElement instanceof HTMLButtonElement)return this.validateButton(t.parentElement);t=t.parentElement,i--}return!1}validateAnchor(e){return this.basicValidation(e)}validateButton(e){return!(!this.basicValidation(e)||e.hasAttribute("type")&&"submit"===e.getAttribute("type"))}}t.default=s},"./src/events/Clipboard.ts":function(e,t,i){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const n=r(i("./src/events/ATSEvent.ts"));class s extends n.default{get shouldDebounce(){return!1}get trigger(){return null}get source(){return null}get name(){return"clipboard_accepted"}get hasTypes(){return!1}get redirectOnFinish(){return!0}get isBlocking(){return!0}get allowMultiple(){return!1}isValid(){return!0}}t.default=s},"./src/events/Download.ts":function(e,t,i){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const n=r(i("./src/events/ATSEvent.ts"));class s extends n.default{get shouldDebounce(){return!1}get trigger(){return null}get source(){return null}get name(){return"download_file_event"}get hasTypes(){return!1}get redirectOnFinish(){return!0}get isBlocking(){return!0}get allowMultiple(){return!1}isValid(){return!0}}t.default=s},"./src/events/Extension.ts":function(e,t,i){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const n=r(i("./src/events/ATSEvent.ts"));class s extends n.default{get shouldDebounce(){return!1}get trigger(){return null}get source(){return null}get name(){return"extension_installed"}get hasTypes(){return!1}get redirectOnFinish(){return!0}get isBlocking(){return!0}get allowMultiple(){return!1}isValid(){return!0}}t.default=s},"./src/events/FileDownload.ts":function(e,t,i){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const n=r(i("./src/events/ATSEvent.ts"));class s extends n.default{get shouldDebounce(){return!1}get trigger(){return null}get source(){return null}get name(){return"file_download"}get hasTypes(){return!0}get redirectOnFinish(){return!1}get isBlocking(){return!1}get allowMultiple(){return!1}isValid(e){return(null==e?void 0:e.target)instanceof HTMLAnchorElement?this.validateAnchor(e.target):(null==e?void 0:e.target)instanceof HTMLButtonElement&&this.validateButton(e.target)}validateAnchor(e){return this.basicValidation(e)}validateButton(e){return!(!this.basicValidation(e)||e.hasAttribute("type")&&"submit"===e.getAttribute("type"))}}t.default=s},"./src/events/FileOpen.ts":function(e,t,i){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const n=r(i("./src/events/ATSEvent.ts"));class s extends n.default{get shouldDebounce(){return!1}get trigger(){return null}get source(){return null}get name(){return"file_opened"}get hasTypes(){return!1}get redirectOnFinish(){return!0}get isBlocking(){return!0}get allowMultiple(){return!1}isValid(){return!0}}t.default=s},"./src/events/Input.ts":function(e,t,i){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const n=r(i("./src/events/ATSEvent.ts"));class s extends n.default{get shouldDebounce(){return!0}get trigger(){return"input"}get source(){return window}get name(){return"input_filled"}get hasTypes(){return!0}get redirectOnFinish(){return!1}get isBlocking(){return!1}get allowMultiple(){return!0}isValid(e){return(null==e?void 0:e.target)instanceof HTMLInputElement&&(this.basicValidation(e.target)&&!!e.target.value.trim())}}t.default=s},"./src/events/Location.ts":function(e,t,i){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const n=r(i("./src/events/ATSEvent.ts"));class s extends n.default{get shouldDebounce(){return!1}get trigger(){return null}get source(){return null}get name(){return"location_accepted"}get hasTypes(){return!1}get redirectOnFinish(){return!0}get isBlocking(){return!0}get allowMultiple(){return!1}isValid(){return!0}}t.default=s},"./src/events/Microphone.ts":function(e,t,i){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const n=r(i("./src/events/ATSEvent.ts"));class s extends n.default{get shouldDebounce(){return!1}get trigger(){return null}get source(){return null}get name(){return"mic_accepted"}get hasTypes(){return!1}get redirectOnFinish(){return!0}get isBlocking(){return!0}get allowMultiple(){return!1}isValid(){return!0}}t.default=s},"./src/events/Notification.ts":function(e,t,i){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const n=r(i("./src/events/ATSEvent.ts"));class s extends n.default{get shouldDebounce(){return!1}get trigger(){return null}get source(){return null}get name(){return"notification_accepted"}get hasTypes(){return!1}get redirectOnFinish(){return!0}get isBlocking(){return!0}get allowMultiple(){return!1}isValid(){return!0}}t.default=s},"./src/events/PageLeft.ts":function(e,t,i){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const n=r(i("./src/events/ATSEvent.ts"));class s extends n.default{get shouldDebounce(){return!1}get trigger(){return null}get source(){return document}get name(){return"page_left"}get hasTypes(){return!1}get redirectOnFinish(){return!1}get isBlocking(){return!1}get allowMultiple(){return!1}isValid(){return"hidden"===document.visibilityState}}t.default=s},"./src/events/PageLoaded.ts":function(e,t,i){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const n=r(i("./src/events/ATSEvent.ts"));class s extends n.default{get shouldDebounce(){return!1}get trigger(){return"load"}get source(){return window}get name(){return"page_loaded"}get hasTypes(){return!1}get redirectOnFinish(){return!1}get isBlocking(){return!1}get allowMultiple(){return!1}isValid(){return!0}}t.default=s},"./src/events/PageRead.ts":function(e,t,i){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const n=r(i("./src/events/ATSEvent.ts"));class s extends n.default{constructor(){super(),this.minScrollPercentage=70,this.minStaySeconds=2e3,this.hasScrolled=!1,this.hasStayed=!1,this.visibilityChanged=()=>{const[e,t]=this.visibilityProps;this.toggleTimer("visible"===document[t])},this.focusGranted=()=>{this.toggleTimer(!0)},this.focusLost=()=>{this.toggleTimer(!1)},this.stayed=()=>{!this.hasScrolled&&this.canScroll||this.dispatch(),this.hasStayed=!0},this.customEvent=new Event(this.trigger),this.enable(),console.log("Page read enabled")}get shouldDebounce(){return!1}get trigger(){return"page_read"}get source(){return window}get name(){return"page_read"}get hasTypes(){return!1}get redirectOnFinish(){return!1}get isBlocking(){return!1}get allowMultiple(){return!1}get canScroll(){return window.innerHeight/document.documentElement.scrollHeight<.85}isValid(){return!0}enable(){window.onscroll=()=>this.scrolled(),window.isManualTrigger?window.addEventListener("manual_page_read",this.stayed):(this.detectFocus(),this.detectVisibility(),this.scrolled(),this.timeout=setTimeout(this.stayed,this.minStaySeconds))}get visibilityProps(){if(void 0!==document.hidden)return["visibilitychange","visibilityState"];if(void 0!==document.mozHidden)return["mozvisibilitychange","mozVisibilityState"];if(void 0!==document.msHidden)return["msvisibilitychange","msVisibilityState"];if(void 0!==document.webkitHidden)return["webkitvisibilitychange","webkitVisibilityState"];throw new Error("Visibility not supported.")}detectFocus(){window.addEventListener("focus",this.focusGranted),window.addEventListener("blur",this.focusLost)}detectVisibility(){try{const[e]=this.visibilityProps;document.addEventListener(e,this.visibilityChanged)}catch(e){return}}stopDetectingVisibility(){try{const[e]=this.visibilityProps;document.removeEventListener(e,this.visibilityChanged)}catch(e){return}}toggleTimer(e){this.hasStayed||(e?this.timeout=setTimeout(this.stayed,this.minStaySeconds):clearTimeout(this.timeout))}disable(){window.onscroll=null,this.stopDetectingVisibility(),window.removeEventListener("focus",this.focusGranted),window.removeEventListener("blur",this.focusLost),window.removeEventListener("manual_page_read",this.stayed)}getScrollPercent(){return(document.documentElement.scrollTop+document.body.scrollTop)/(document.documentElement.scrollHeight-document.documentElement.clientHeight)*100}scrolled(){this.getScrollPercent()>this.minScrollPercentage&&(this.hasStayed&&this.dispatch(),this.hasScrolled=!0)}dispatch(){window.dispatchEvent(this.customEvent),this.disable()}}t.default=s},"./src/events/Submit.ts":function(e,t,i){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const n=r(i("./src/events/ATSEvent.ts"));class s extends n.default{get shouldDebounce(){return!1}get trigger(){return"submit"}get source(){return window}get name(){return"form_submitted"}get hasTypes(){return!0}get redirectOnFinish(){return!0}get isBlocking(){return!0}get allowMultiple(){return!1}isValid(e){return(null==e?void 0:e.target)instanceof HTMLFormElement&&this.basicValidation(e.target)}}t.default=s},"./src/events/Webcam.ts":function(e,t,i){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const n=r(i("./src/events/ATSEvent.ts"));class s extends n.default{get shouldDebounce(){return!1}get trigger(){return null}get source(){return null}get name(){return"webcam_accepted"}get hasTypes(){return!1}get redirectOnFinish(){return!0}get isBlocking(){return!0}get allowMultiple(){return!1}isValid(){return!0}}t.default=s},"./node_modules/ua-parser-js/src/ua-parser.js":function(e,t,i){var r;!function(n,s){"use strict";var o="function",a="undefined",u="object",l="string",c="major",d="model",g="name",b="type",h="vendor",p="version",m="architecture",w="console",f="mobile",v="tablet",_="smarttv",y="wearable",k="embedded",x="Amazon",E="Apple",T="ASUS",M="BlackBerry",O="Browser",S="Chrome",P="Firefox",j="Google",A="Honor",D="Huawei",z="LG",V="Microsoft",B="Motorola",L="Nvidia",I="OnePlus",q="Opera",N="OPPO",C="Samsung",U="Sharp",F="Sony",$="Xiaomi",R="Zebra",H="Facebook",G="Chromium OS",W="Mac OS",Z=" Browser",K=function(e){for(var t={},i=0;i<e.length;i++)t[e[i].toUpperCase()]=e[i];return t},X=function(e,t){return typeof e===l&&-1!==J(t).indexOf(J(e))},J=function(e){return e.toLowerCase()},Q=function(e,t){if(typeof e===l)return e=e.replace(/^\s\s*/,""),typeof t===a?e:e.substring(0,500)},Y=function(e,t){for(var i,r,n,a,l,c,d=0;d<t.length&&!l;){var g=t[d],b=t[d+1];for(i=r=0;i<g.length&&!l&&g[i];)if(l=g[i++].exec(e))for(n=0;n<b.length;n++)c=l[++r],typeof(a=b[n])===u&&a.length>0?2===a.length?typeof a[1]==o?this[a[0]]=a[1].call(this,c):this[a[0]]=a[1]:3===a.length?typeof a[1]!==o||a[1].exec&&a[1].test?this[a[0]]=c?c.replace(a[1],a[2]):s:this[a[0]]=c?a[1].call(this,c,a[2]):s:4===a.length&&(this[a[0]]=c?a[3].call(this,c.replace(a[1],a[2])):s):this[a]=c||s;d+=2}},ee=function(e,t){for(var i in t)if(typeof t[i]===u&&t[i].length>0){for(var r=0;r<t[i].length;r++)if(X(t[i][r],e))return"?"===i?s:i}else if(X(t[i],e))return"?"===i?s:i;return t.hasOwnProperty("*")?t["*"]:e},te={ME:"4.90","NT 3.11":"NT3.51","NT 4.0":"NT4.0",2e3:"NT 5.0",XP:["NT 5.1","NT 5.2"],Vista:"NT 6.0",7:"NT 6.1",8:"NT 6.2",8.1:"NT 6.3",10:["NT 6.4","NT 10.0"],RT:"ARM"},ie={browser:[[/\b(?:crmo|crios)\/([\w\.]+)/i],[p,[g,"Chrome"]],[/edg(?:e|ios|a)?\/([\w\.]+)/i],[p,[g,"Edge"]],[/(opera mini)\/([-\w\.]+)/i,/(opera [mobiletab]{3,6})\b.+version\/([-\w\.]+)/i,/(opera)(?:.+version\/|[\/ ]+)([\w\.]+)/i],[g,p],[/opios[\/ ]+([\w\.]+)/i],[p,[g,q+" Mini"]],[/\bop(?:rg)?x\/([\w\.]+)/i],[p,[g,q+" GX"]],[/\bopr\/([\w\.]+)/i],[p,[g,q]],[/\bb[ai]*d(?:uhd|[ub]*[aekoprswx]{5,6})[\/ ]?([\w\.]+)/i],[p,[g,"Baidu"]],[/\b(?:mxbrowser|mxios|myie2)\/?([-\w\.]*)\b/i],[p,[g,"Maxthon"]],[/(kindle)\/([\w\.]+)/i,/(lunascape|maxthon|netfront|jasmine|blazer|sleipnir)[\/ ]?([\w\.]*)/i,/(avant|iemobile|slim(?:browser|boat|jet))[\/ ]?([\d\.]*)/i,/(?:ms|\()(ie) ([\w\.]+)/i,/(flock|rockmelt|midori|epiphany|silk|skyfire|ovibrowser|bolt|iron|vivaldi|iridium|phantomjs|bowser|qupzilla|falkon|rekonq|puffin|brave|whale(?!.+naver)|qqbrowserlite|duckduckgo|klar|helio|(?=comodo_)?dragon)\/([-\w\.]+)/i,/(heytap|ovi|115)browser\/([\d\.]+)/i,/(weibo)__([\d\.]+)/i],[g,p],[/quark(?:pc)?\/([-\w\.]+)/i],[p,[g,"Quark"]],[/\bddg\/([\w\.]+)/i],[p,[g,"DuckDuckGo"]],[/(?:\buc? ?browser|(?:juc.+)ucweb)[\/ ]?([\w\.]+)/i],[p,[g,"UC"+O]],[/microm.+\bqbcore\/([\w\.]+)/i,/\bqbcore\/([\w\.]+).+microm/i,/micromessenger\/([\w\.]+)/i],[p,[g,"WeChat"]],[/konqueror\/([\w\.]+)/i],[p,[g,"Konqueror"]],[/trident.+rv[: ]([\w\.]{1,9})\b.+like gecko/i],[p,[g,"IE"]],[/ya(?:search)?browser\/([\w\.]+)/i],[p,[g,"Yandex"]],[/slbrowser\/([\w\.]+)/i],[p,[g,"Smart Lenovo "+O]],[/(avast|avg)\/([\w\.]+)/i],[[g,/(.+)/,"$1 Secure "+O],p],[/\bfocus\/([\w\.]+)/i],[p,[g,P+" Focus"]],[/\bopt\/([\w\.]+)/i],[p,[g,q+" Touch"]],[/coc_coc\w+\/([\w\.]+)/i],[p,[g,"Coc Coc"]],[/dolfin\/([\w\.]+)/i],[p,[g,"Dolphin"]],[/coast\/([\w\.]+)/i],[p,[g,q+" Coast"]],[/miuibrowser\/([\w\.]+)/i],[p,[g,"MIUI"+Z]],[/fxios\/([\w\.-]+)/i],[p,[g,P]],[/\bqihoobrowser\/?([\w\.]*)/i],[p,[g,"360"]],[/\b(qq)\/([\w\.]+)/i],[[g,/(.+)/,"$1Browser"],p],[/(oculus|sailfish|huawei|vivo|pico)browser\/([\w\.]+)/i],[[g,/(.+)/,"$1"+Z],p],[/samsungbrowser\/([\w\.]+)/i],[p,[g,C+" Internet"]],[/metasr[\/ ]?([\d\.]+)/i],[p,[g,"Sogou Explorer"]],[/(sogou)mo\w+\/([\d\.]+)/i],[[g,"Sogou Mobile"],p],[/(electron)\/([\w\.]+) safari/i,/(tesla)(?: qtcarbrowser|\/(20\d\d\.[-\w\.]+))/i,/m?(qqbrowser|2345(?=browser|chrome|explorer))\w*[\/ ]?v?([\w\.]+)/i],[g,p],[/(lbbrowser|rekonq)/i,/\[(linkedin)app\]/i],[g],[/ome\/([\w\.]+) \w* ?(iron) saf/i,/ome\/([\w\.]+).+qihu (360)[es]e/i],[p,g],[/((?:fban\/fbios|fb_iab\/fb4a)(?!.+fbav)|;fbav\/([\w\.]+);)/i],[[g,H],p],[/(Klarna)\/([\w\.]+)/i,/(kakao(?:talk|story))[\/ ]([\w\.]+)/i,/(naver)\(.*?(\d+\.[\w\.]+).*\)/i,/(daum)apps[\/ ]([\w\.]+)/i,/safari (line)\/([\w\.]+)/i,/\b(line)\/([\w\.]+)\/iab/i,/(alipay)client\/([\w\.]+)/i,/(twitter)(?:and| f.+e\/([\w\.]+))/i,/(chromium|instagram|snapchat)[\/ ]([-\w\.]+)/i],[g,p],[/\bgsa\/([\w\.]+) .*safari\//i],[p,[g,"GSA"]],[/musical_ly(?:.+app_?version\/|_)([\w\.]+)/i],[p,[g,"TikTok"]],[/headlesschrome(?:\/([\w\.]+)| )/i],[p,[g,S+" Headless"]],[/ wv\).+(chrome)\/([\w\.]+)/i],[[g,S+" WebView"],p],[/droid.+ version\/([\w\.]+)\b.+(?:mobile safari|safari)/i],[p,[g,"Android "+O]],[/(chrome|omniweb|arora|[tizenoka]{5} ?browser)\/v?([\w\.]+)/i],[g,p],[/version\/([\w\.\,]+) .*mobile\/\w+ (safari)/i],[p,[g,"Mobile Safari"]],[/version\/([\w(\.|\,)]+) .*(mobile ?safari|safari)/i],[p,g],[/webkit.+?(mobile ?safari|safari)(\/[\w\.]+)/i],[g,[p,ee,{"1.0":"/8",1.2:"/1",1.3:"/3","2.0":"/412","2.0.2":"/416","2.0.3":"/417","2.0.4":"/419","?":"/"}]],[/(webkit|khtml)\/([\w\.]+)/i],[g,p],[/(navigator|netscape\d?)\/([-\w\.]+)/i],[[g,"Netscape"],p],[/(wolvic|librewolf)\/([\w\.]+)/i],[g,p],[/mobile vr; rv:([\w\.]+)\).+firefox/i],[p,[g,P+" Reality"]],[/ekiohf.+(flow)\/([\w\.]+)/i,/(swiftfox)/i,/(icedragon|iceweasel|camino|chimera|fennec|maemo browser|minimo|conkeror)[\/ ]?([\w\.\+]+)/i,/(seamonkey|k-meleon|icecat|iceape|firebird|phoenix|palemoon|basilisk|waterfox)\/([-\w\.]+)$/i,/(firefox)\/([\w\.]+)/i,/(mozilla)\/([\w\.]+) .+rv\:.+gecko\/\d+/i,/(amaya|dillo|doris|icab|ladybird|lynx|mosaic|netsurf|obigo|polaris|w3m|(?:go|ice|up)[\. ]?browser)[-\/ ]?v?([\w\.]+)/i,/\b(links) \(([\w\.]+)/i],[g,[p,/_/g,"."]],[/(cobalt)\/([\w\.]+)/i],[g,[p,/master.|lts./,""]]],cpu:[[/\b((amd|x|x86[-_]?|wow|win)64)\b/i],[[m,"amd64"]],[/(ia32(?=;))/i,/\b((i[346]|x)86)(pc)?\b/i],[[m,"ia32"]],[/\b(aarch64|arm(v?[89]e?l?|_?64))\b/i],[[m,"arm64"]],[/\b(arm(v[67])?ht?n?[fl]p?)\b/i],[[m,"armhf"]],[/( (ce|mobile); ppc;|\/[\w\.]+arm\b)/i],[[m,"arm"]],[/((ppc|powerpc)(64)?)( mac|;|\))/i],[[m,/ower/,"",J]],[/ sun4\w[;\)]/i],[[m,"sparc"]],[/\b(avr32|ia64(?=;)|68k(?=\))|\barm(?=v([1-7]|[5-7]1)l?|;|eabi)|(irix|mips|sparc)(64)?\b|pa-risc)/i],[[m,J]]],device:[[/\b(sch-i[89]0\d|shw-m380s|sm-[ptx]\w{2,4}|gt-[pn]\d{2,4}|sgh-t8[56]9|nexus 10)/i],[d,[h,C],[b,v]],[/\b((?:s[cgp]h|gt|sm)-(?![lr])\w+|sc[g-]?[\d]+a?|galaxy nexus)/i,/samsung[- ]((?!sm-[lr])[-\w]+)/i,/sec-(sgh\w+)/i],[d,[h,C],[b,f]],[/(?:\/|\()(ip(?:hone|od)[\w, ]*)(?:\/|;)/i],[d,[h,E],[b,f]],[/\((ipad);[-\w\),; ]+apple/i,/applecoremedia\/[\w\.]+ \((ipad)/i,/\b(ipad)\d\d?,\d\d?[;\]].+ios/i],[d,[h,E],[b,v]],[/(macintosh);/i],[d,[h,E]],[/\b(sh-?[altvz]?\d\d[a-ekm]?)/i],[d,[h,U],[b,f]],[/\b((?:brt|eln|hey2?|gdi|jdn)-a?[lnw]09|(?:ag[rm]3?|jdn2|kob2)-a?[lw]0[09]hn)(?: bui|\)|;)/i],[d,[h,A],[b,v]],[/honor([-\w ]+)[;\)]/i],[d,[h,A],[b,f]],[/\b((?:ag[rs][2356]?k?|bah[234]?|bg[2o]|bt[kv]|cmr|cpn|db[ry]2?|jdn2|got|kob2?k?|mon|pce|scm|sht?|[tw]gr|vrd)-[ad]?[lw][0125][09]b?|605hw|bg2-u03|(?:gem|fdr|m2|ple|t1)-[7a]0[1-4][lu]|t1-a2[13][lw]|mediapad[\w\. ]*(?= bui|\)))\b(?!.+d\/s)/i],[d,[h,D],[b,v]],[/(?:huawei)([-\w ]+)[;\)]/i,/\b(nexus 6p|\w{2,4}e?-[atu]?[ln][\dx][012359c][adn]?)\b(?!.+d\/s)/i],[d,[h,D],[b,f]],[/oid[^\)]+; (2[\dbc]{4}(182|283|rp\w{2})[cgl]|m2105k81a?c)(?: bui|\))/i,/\b((?:red)?mi[-_ ]?pad[\w- ]*)(?: bui|\))/i],[[d,/_/g," "],[h,$],[b,v]],[/\b(poco[\w ]+|m2\d{3}j\d\d[a-z]{2})(?: bui|\))/i,/\b; (\w+) build\/hm\1/i,/\b(hm[-_ ]?note?[_ ]?(?:\d\w)?) bui/i,/\b(redmi[\-_ ]?(?:note|k)?[\w_ ]+)(?: bui|\))/i,/oid[^\)]+; (m?[12][0-389][01]\w{3,6}[c-y])( bui|; wv|\))/i,/\b(mi[-_ ]?(?:a\d|one|one[_ ]plus|note lte|max|cc)?[_ ]?(?:\d?\w?)[_ ]?(?:plus|se|lite|pro)?)(?: bui|\))/i,/ ([\w ]+) miui\/v?\d/i],[[d,/_/g," "],[h,$],[b,f]],[/; (\w+) bui.+ oppo/i,/\b(cph[12]\d{3}|p(?:af|c[al]|d\w|e[ar])[mt]\d0|x9007|a101op)\b/i],[d,[h,N],[b,f]],[/\b(opd2(\d{3}a?))(?: bui|\))/i],[d,[h,ee,{OnePlus:["304","403","203"],"*":N}],[b,v]],[/vivo (\w+)(?: bui|\))/i,/\b(v[12]\d{3}\w?[at])(?: bui|;)/i],[d,[h,"Vivo"],[b,f]],[/\b(rmx[1-3]\d{3})(?: bui|;|\))/i],[d,[h,"Realme"],[b,f]],[/\b(milestone|droid(?:[2-4x]| (?:bionic|x2|pro|razr))?:?( 4g)?)\b[\w ]+build\//i,/\bmot(?:orola)?[- ](\w*)/i,/((?:moto(?! 360)[\w\(\) ]+|xt\d{3,4}|nexus 6)(?= bui|\)))/i],[d,[h,B],[b,f]],[/\b(mz60\d|xoom[2 ]{0,2}) build\//i],[d,[h,B],[b,v]],[/((?=lg)?[vl]k\-?\d{3}) bui| 3\.[-\w; ]{10}lg?-([06cv9]{3,4})/i],[d,[h,z],[b,v]],[/(lm(?:-?f100[nv]?|-[\w\.]+)(?= bui|\))|nexus [45])/i,/\blg[-e;\/ ]+((?!browser|netcast|android tv|watch)\w+)/i,/\blg-?([\d\w]+) bui/i],[d,[h,z],[b,f]],[/(ideatab[-\w ]+|602lv|d-42a|a101lv|a2109a|a3500-hv|s[56]000|pb-6505[my]|tb-?x?\d{3,4}(?:f[cu]|xu|[av])|yt\d?-[jx]?\d+[lfmx])( bui|;|\)|\/)/i,/lenovo ?(b[68]0[08]0-?[hf]?|tab(?:[\w- ]+?)|tb[\w-]{6,7})( bui|;|\)|\/)/i],[d,[h,"Lenovo"],[b,v]],[/(nokia) (t[12][01])/i],[h,d,[b,v]],[/(?:maemo|nokia).*(n900|lumia \d+|rm-\d+)/i,/nokia[-_ ]?(([-\w\. ]*))/i],[[d,/_/g," "],[b,f],[h,"Nokia"]],[/(pixel (c|tablet))\b/i],[d,[h,j],[b,v]],[/droid.+; (pixel[\daxl ]{0,6})(?: bui|\))/i],[d,[h,j],[b,f]],[/droid.+; (a?\d[0-2]{2}so|[c-g]\d{4}|so[-gl]\w+|xq-a\w[4-7][12])(?= bui|\).+chrome\/(?![1-6]{0,1}\d\.))/i],[d,[h,F],[b,f]],[/sony tablet [ps]/i,/\b(?:sony)?sgp\w+(?: bui|\))/i],[[d,"Xperia Tablet"],[h,F],[b,v]],[/ (kb2005|in20[12]5|be20[12][59])\b/i,/(?:one)?(?:plus)? (a\d0\d\d)(?: b|\))/i],[d,[h,I],[b,f]],[/(alexa)webm/i,/(kf[a-z]{2}wi|aeo(?!bc)\w\w)( bui|\))/i,/(kf[a-z]+)( bui|\)).+silk\//i],[d,[h,x],[b,v]],[/((?:sd|kf)[0349hijorstuw]+)( bui|\)).+silk\//i],[[d,/(.+)/g,"Fire Phone $1"],[h,x],[b,f]],[/(playbook);[-\w\),; ]+(rim)/i],[d,h,[b,v]],[/\b((?:bb[a-f]|st[hv])100-\d)/i,/\(bb10; (\w+)/i],[d,[h,M],[b,f]],[/(?:\b|asus_)(transfo[prime ]{4,10} \w+|eeepc|slider \w+|nexus 7|padfone|p00[cj])/i],[d,[h,T],[b,v]],[/ (z[bes]6[027][012][km][ls]|zenfone \d\w?)\b/i],[d,[h,T],[b,f]],[/(nexus 9)/i],[d,[h,"HTC"],[b,v]],[/(htc)[-;_ ]{1,2}([\w ]+(?=\)| bui)|\w+)/i,/(zte)[- ]([\w ]+?)(?: bui|\/|\))/i,/(alcatel|geeksphone|nexian|panasonic(?!(?:;|\.))|sony(?!-bra))[-_ ]?([-\w]*)/i],[h,[d,/_/g," "],[b,f]],[/droid [\w\.]+; ((?:8[14]9[16]|9(?:0(?:48|60|8[01])|1(?:3[27]|66)|2(?:6[69]|9[56])|466))[gqswx])\w*(\)| bui)/i],[d,[h,"TCL"],[b,v]],[/(itel) ((\w+))/i],[[h,J],d,[b,ee,{tablet:["p10001l","w7001"],"*":"mobile"}]],[/droid.+; ([ab][1-7]-?[0178a]\d\d?)/i],[d,[h,"Acer"],[b,v]],[/droid.+; (m[1-5] note) bui/i,/\bmz-([-\w]{2,})/i],[d,[h,"Meizu"],[b,f]],[/; ((?:power )?armor(?:[\w ]{0,8}))(?: bui|\))/i],[d,[h,"Ulefone"],[b,f]],[/; (energy ?\w+)(?: bui|\))/i,/; energizer ([\w ]+)(?: bui|\))/i],[d,[h,"Energizer"],[b,f]],[/; cat (b35);/i,/; (b15q?|s22 flip|s48c|s62 pro)(?: bui|\))/i],[d,[h,"Cat"],[b,f]],[/((?:new )?andromax[\w- ]+)(?: bui|\))/i],[d,[h,"Smartfren"],[b,f]],[/droid.+; (a(?:015|06[35]|142p?))/i],[d,[h,"Nothing"],[b,f]],[/; (x67 5g|tikeasy \w+|ac[1789]\d\w+)( b|\))/i,/archos ?(5|gamepad2?|([\w ]*[t1789]|hello) ?\d+[\w ]*)( b|\))/i],[d,[h,"Archos"],[b,v]],[/archos ([\w ]+)( b|\))/i,/; (ac[3-6]\d\w{2,8})( b|\))/i],[d,[h,"Archos"],[b,f]],[/(imo) (tab \w+)/i,/(infinix) (x1101b?)/i],[h,d,[b,v]],[/(blackberry|benq|palm(?=\-)|sonyericsson|acer|asus(?! zenw)|dell|jolla|meizu|motorola|polytron|infinix|tecno|micromax|advan)[-_ ]?([-\w]*)/i,/; (hmd|imo) ([\w ]+?)(?: bui|\))/i,/(hp) ([\w ]+\w)/i,/(microsoft); (lumia[\w ]+)/i,/(lenovo)[-_ ]?([-\w ]+?)(?: bui|\)|\/)/i,/(oppo) ?([\w ]+) bui/i],[h,d,[b,f]],[/(kobo)\s(ereader|touch)/i,/(hp).+(touchpad(?!.+tablet)|tablet)/i,/(kindle)\/([\w\.]+)/i,/(nook)[\w ]+build\/(\w+)/i,/(dell) (strea[kpr\d ]*[\dko])/i,/(le[- ]+pan)[- ]+(\w{1,9}) bui/i,/(trinity)[- ]*(t\d{3}) bui/i,/(gigaset)[- ]+(q\w{1,9}) bui/i,/(vodafone) ([\w ]+)(?:\)| bui)/i],[h,d,[b,v]],[/(surface duo)/i],[d,[h,V],[b,v]],[/droid [\d\.]+; (fp\du?)(?: b|\))/i],[d,[h,"Fairphone"],[b,f]],[/(u304aa)/i],[d,[h,"AT&T"],[b,f]],[/\bsie-(\w*)/i],[d,[h,"Siemens"],[b,f]],[/\b(rct\w+) b/i],[d,[h,"RCA"],[b,v]],[/\b(venue[\d ]{2,7}) b/i],[d,[h,"Dell"],[b,v]],[/\b(q(?:mv|ta)\w+) b/i],[d,[h,"Verizon"],[b,v]],[/\b(?:barnes[& ]+noble |bn[rt])([\w\+ ]*) b/i],[d,[h,"Barnes & Noble"],[b,v]],[/\b(tm\d{3}\w+) b/i],[d,[h,"NuVision"],[b,v]],[/\b(k88) b/i],[d,[h,"ZTE"],[b,v]],[/\b(nx\d{3}j) b/i],[d,[h,"ZTE"],[b,f]],[/\b(gen\d{3}) b.+49h/i],[d,[h,"Swiss"],[b,f]],[/\b(zur\d{3}) b/i],[d,[h,"Swiss"],[b,v]],[/\b((zeki)?tb.*\b) b/i],[d,[h,"Zeki"],[b,v]],[/\b([yr]\d{2}) b/i,/\b(dragon[- ]+touch |dt)(\w{5}) b/i],[[h,"Dragon Touch"],d,[b,v]],[/\b(ns-?\w{0,9}) b/i],[d,[h,"Insignia"],[b,v]],[/\b((nxa|next)-?\w{0,9}) b/i],[d,[h,"NextBook"],[b,v]],[/\b(xtreme\_)?(v(1[045]|2[015]|[3469]0|7[05])) b/i],[[h,"Voice"],d,[b,f]],[/\b(lvtel\-)?(v1[12]) b/i],[[h,"LvTel"],d,[b,f]],[/\b(ph-1) /i],[d,[h,"Essential"],[b,f]],[/\b(v(100md|700na|7011|917g).*\b) b/i],[d,[h,"Envizen"],[b,v]],[/\b(trio[-\w\. ]+) b/i],[d,[h,"MachSpeed"],[b,v]],[/\btu_(1491) b/i],[d,[h,"Rotor"],[b,v]],[/((?:tegranote|shield t(?!.+d tv))[\w- ]*?)(?: b|\))/i],[d,[h,L],[b,v]],[/(sprint) (\w+)/i],[h,d,[b,f]],[/(kin\.[onetw]{3})/i],[[d,/\./g," "],[h,V],[b,f]],[/droid.+; (cc6666?|et5[16]|mc[239][23]x?|vc8[03]x?)\)/i],[d,[h,R],[b,v]],[/droid.+; (ec30|ps20|tc[2-8]\d[kx])\)/i],[d,[h,R],[b,f]],[/smart-tv.+(samsung)/i],[h,[b,_]],[/hbbtv.+maple;(\d+)/i],[[d,/^/,"SmartTV"],[h,C],[b,_]],[/(nux; netcast.+smarttv|lg (netcast\.tv-201\d|android tv))/i],[[h,z],[b,_]],[/(apple) ?tv/i],[h,[d,E+" TV"],[b,_]],[/crkey/i],[[d,S+"cast"],[h,j],[b,_]],[/droid.+aft(\w+)( bui|\))/i],[d,[h,x],[b,_]],[/(shield \w+ tv)/i],[d,[h,L],[b,_]],[/\(dtv[\);].+(aquos)/i,/(aquos-tv[\w ]+)\)/i],[d,[h,U],[b,_]],[/(bravia[\w ]+)( bui|\))/i],[d,[h,F],[b,_]],[/(mi(tv|box)-?\w+) bui/i],[d,[h,$],[b,_]],[/Hbbtv.*(technisat) (.*);/i],[h,d,[b,_]],[/\b(roku)[\dx]*[\)\/]((?:dvp-)?[\d\.]*)/i,/hbbtv\/\d+\.\d+\.\d+ +\([\w\+ ]*; *([\w\d][^;]*);([^;]*)/i],[[h,Q],[d,Q],[b,_]],[/droid.+; ([\w- ]+) (?:android tv|smart[- ]?tv)/i],[d,[b,_]],[/\b(android tv|smart[- ]?tv|opera tv|tv; rv:)\b/i],[[b,_]],[/(ouya)/i,/(nintendo) ([wids3utch]+)/i],[h,d,[b,w]],[/droid.+; (shield)( bui|\))/i],[d,[h,L],[b,w]],[/(playstation \w+)/i],[d,[h,F],[b,w]],[/\b(xbox(?: one)?(?!; xbox))[\); ]/i],[d,[h,V],[b,w]],[/\b(sm-[lr]\d\d[0156][fnuw]?s?|gear live)\b/i],[d,[h,C],[b,y]],[/((pebble))app/i,/(asus|google|lg|oppo) ((pixel |zen)?watch[\w ]*)( bui|\))/i],[h,d,[b,y]],[/(ow(?:19|20)?we?[1-3]{1,3})/i],[d,[h,N],[b,y]],[/(watch)(?: ?os[,\/]|\d,\d\/)[\d\.]+/i],[d,[h,E],[b,y]],[/(opwwe\d{3})/i],[d,[h,I],[b,y]],[/(moto 360)/i],[d,[h,B],[b,y]],[/(smartwatch 3)/i],[d,[h,F],[b,y]],[/(g watch r)/i],[d,[h,z],[b,y]],[/droid.+; (wt63?0{2,3})\)/i],[d,[h,R],[b,y]],[/droid.+; (glass) \d/i],[d,[h,j],[b,y]],[/(pico) (4|neo3(?: link|pro)?)/i],[h,d,[b,y]],[/; (quest( \d| pro)?)/i],[d,[h,H],[b,y]],[/(tesla)(?: qtcarbrowser|\/[-\w\.]+)/i],[h,[b,k]],[/(aeobc)\b/i],[d,[h,x],[b,k]],[/(homepod).+mac os/i],[d,[h,E],[b,k]],[/windows iot/i],[[b,k]],[/droid .+?; ([^;]+?)(?: bui|; wv\)|\) applew).+? mobile safari/i],[d,[b,f]],[/droid .+?; ([^;]+?)(?: bui|\) applew).+?(?! mobile) safari/i],[d,[b,v]],[/\b((tablet|tab)[;\/]|focus\/\d(?!.+mobile))/i],[[b,v]],[/(phone|mobile(?:[;\/]| [ \w\/\.]*safari)|pda(?=.+windows ce))/i],[[b,f]],[/droid .+?; ([\w\. -]+)( bui|\))/i],[d,[h,"Generic"]]],engine:[[/windows.+ edge\/([\w\.]+)/i],[p,[g,"EdgeHTML"]],[/(arkweb)\/([\w\.]+)/i],[g,p],[/webkit\/537\.36.+chrome\/(?!27)([\w\.]+)/i],[p,[g,"Blink"]],[/(presto)\/([\w\.]+)/i,/(webkit|trident|netfront|netsurf|amaya|lynx|w3m|goanna|servo)\/([\w\.]+)/i,/ekioh(flow)\/([\w\.]+)/i,/(khtml|tasman|links)[\/ ]\(?([\w\.]+)/i,/(icab)[\/ ]([23]\.[\d\.]+)/i,/\b(libweb)/i],[g,p],[/ladybird\//i],[[g,"LibWeb"]],[/rv\:([\w\.]{1,9})\b.+(gecko)/i],[p,g]],os:[[/microsoft (windows) (vista|xp)/i],[g,p],[/(windows (?:phone(?: os)?|mobile|iot))[\/ ]?([\d\.\w ]*)/i],[g,[p,ee,te]],[/windows nt 6\.2; (arm)/i,/windows[\/ ]([ntce\d\. ]+\w)(?!.+xbox)/i,/(?:win(?=3|9|n)|win 9x )([nt\d\.]+)/i],[[p,ee,te],[g,"Windows"]],[/[adehimnop]{4,7}\b(?:.*os ([\w]+) like mac|; opera)/i,/(?:ios;fbsv\/|iphone.+ios[\/ ])([\d\.]+)/i,/cfnetwork\/.+darwin/i],[[p,/_/g,"."],[g,"iOS"]],[/(mac os x) ?([\w\. ]*)/i,/(macintosh|mac_powerpc\b)(?!.+haiku)/i],[[g,W],[p,/_/g,"."]],[/droid ([\w\.]+)\b.+(android[- ]x86|harmonyos)/i],[p,g],[/(ubuntu) ([\w\.]+) like android/i],[[g,/(.+)/,"$1 Touch"],p],[/(android|bada|blackberry|kaios|maemo|meego|openharmony|qnx|rim tablet os|sailfish|series40|symbian|tizen|webos)\w*[-\/; ]?([\d\.]*)/i],[g,p],[/\(bb(10);/i],[p,[g,M]],[/(?:symbian ?os|symbos|s60(?=;)|series ?60)[-\/ ]?([\w\.]*)/i],[p,[g,"Symbian"]],[/mozilla\/[\d\.]+ \((?:mobile|tablet|tv|mobile; [\w ]+); rv:.+ gecko\/([\w\.]+)/i],[p,[g,P+" OS"]],[/web0s;.+rt(tv)/i,/\b(?:hp)?wos(?:browser)?\/([\w\.]+)/i],[p,[g,"webOS"]],[/watch(?: ?os[,\/]|\d,\d\/)([\d\.]+)/i],[p,[g,"watchOS"]],[/crkey\/([\d\.]+)/i],[p,[g,S+"cast"]],[/(cros) [\w]+(?:\)| ([\w\.]+)\b)/i],[[g,G],p],[/panasonic;(viera)/i,/(netrange)mmh/i,/(nettv)\/(\d+\.[\w\.]+)/i,/(nintendo|playstation) ([wids345portablevuch]+)/i,/(xbox); +xbox ([^\);]+)/i,/\b(joli|palm)\b ?(?:os)?\/?([\w\.]*)/i,/(mint)[\/\(\) ]?(\w*)/i,/(mageia|vectorlinux)[; ]/i,/([kxln]?ubuntu|debian|suse|opensuse|gentoo|arch(?= linux)|slackware|fedora|mandriva|centos|pclinuxos|red ?hat|zenwalk|linpus|raspbian|plan 9|minix|risc os|contiki|deepin|manjaro|elementary os|sabayon|linspire)(?: gnu\/linux)?(?: enterprise)?(?:[- ]linux)?(?:-gnu)?[-\/ ]?(?!chrom|package)([-\w\.]*)/i,/(hurd|linux)(?: arm\w*| x86\w*| ?)([\w\.]*)/i,/(gnu) ?([\w\.]*)/i,/\b([-frentopcghs]{0,5}bsd|dragonfly)[\/ ]?(?!amd|[ix346]{1,2}86)([\w\.]*)/i,/(haiku) (\w+)/i],[g,p],[/(sunos) ?([\w\.\d]*)/i],[[g,"Solaris"],p],[/((?:open)?solaris)[-\/ ]?([\w\.]*)/i,/(aix) ((\d)(?=\.|\)| )[\w\.])*/i,/\b(beos|os\/2|amigaos|morphos|openvms|fuchsia|hp-ux|serenityos)/i,/(unix) ?([\w\.]*)/i],[g,p]]},re=function(e,t){if(typeof e===u&&(t=e,e=s),!(this instanceof re))return new re(e,t).getResult();var i=typeof n!==a&&n.navigator?n.navigator:s,r=e||(i&&i.userAgent?i.userAgent:""),w=i&&i.userAgentData?i.userAgentData:s,_=t?function(e,t){var i={};for(var r in e)t[r]&&t[r].length%2==0?i[r]=t[r].concat(e[r]):i[r]=e[r];return i}(ie,t):ie,y=i&&i.userAgent==r;return this.getBrowser=function(){var e,t={};return t[g]=s,t[p]=s,Y.call(t,r,_.browser),t[c]=typeof(e=t[p])===l?e.replace(/[^\d\.]/g,"").split(".")[0]:s,y&&i&&i.brave&&typeof i.brave.isBrave==o&&(t[g]="Brave"),t},this.getCPU=function(){var e={};return e[m]=s,Y.call(e,r,_.cpu),e},this.getDevice=function(){var e={};return e[h]=s,e[d]=s,e[b]=s,Y.call(e,r,_.device),y&&!e[b]&&w&&w.mobile&&(e[b]=f),y&&"Macintosh"==e[d]&&i&&typeof i.standalone!==a&&i.maxTouchPoints&&i.maxTouchPoints>2&&(e[d]="iPad",e[b]=v),e},this.getEngine=function(){var e={};return e[g]=s,e[p]=s,Y.call(e,r,_.engine),e},this.getOS=function(){var e={};return e[g]=s,e[p]=s,Y.call(e,r,_.os),y&&!e[g]&&w&&w.platform&&"Unknown"!=w.platform&&(e[g]=w.platform.replace(/chrome os/i,G).replace(/macos/i,W)),e},this.getResult=function(){return{ua:this.getUA(),browser:this.getBrowser(),engine:this.getEngine(),os:this.getOS(),device:this.getDevice(),cpu:this.getCPU()}},this.getUA=function(){return r},this.setUA=function(e){return r=typeof e===l&&e.length>500?Q(e,500):e,this},this.setUA(r),this};re.VERSION="1.0.41",re.BROWSER=K([g,p,c]),re.CPU=K([m]),re.DEVICE=K([d,h,b,w,f,_,v,y,k]),re.ENGINE=re.OS=K([g,p]),typeof t!==a?(e.exports&&(t=e.exports=re),t.UAParser=re):i.amdO?(r=function(){return re}.call(t,i,t,e))===s||(e.exports=r):typeof n!==a&&(n.UAParser=re);var ne=typeof n!==a&&(n.jQuery||n.Zepto);if(ne&&!ne.ua){var se=new re;ne.ua=se.getResult(),ne.ua.get=function(){return se.getUA()},ne.ua.set=function(e){se.setUA(e);var t=se.getResult();for(var i in t)ne.ua[i]=t[i]}}}("object"==typeof window?window:this)}},t={};function i(r){var n=t[r];if(void 0!==n)return n.exports;var s=t[r]={exports:{}};return e[r].call(s.exports,s,s.exports,i),s.exports}i.amdO={};var r=i("./index.ts");ATSEvents=r})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,