/*! For license information please see bundle.min.js.LICENSE.txt */
var ATSEvents;(()=>{var e={"./index.ts":function(e,i,t){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(i,"__esModule",{value:!0});const s=t("./src/Manager.ts"),n=r(t("./src/Remote.ts")),o={events:[],debug:!1,shouldRedirect:!0,redirectUrl:`https://oops.${(0,t("./src/Tools.ts").removeSubdomain)(window.location.hostname)}`,source:"LP",url:"https://api.attacksimulator.com/v0/client-events"};e.exports=class{constructor(e){const i=Object.assign(Object.assign({},o),e);i.debug&&console.log(i);const t=new n.default(i.apiKey,i.url,i.debug);this.manager=new s.Manager(t,i.events,i.source,i.redirectUrl,i.shouldRedirect,i.debug)}listen(){this.manager.listen()}stop(){this.manager.stop()}trigger(e){this.manager.trigger(e)}}},"./src/BrowserInfo.ts":function(e,i,t){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(i,"__esModule",{value:!0}),i.findBrowserInfo=void 0;const s=r(t("./node_modules/ua-parser-js/src/ua-parser.js"));function n(){let e,i={};const t=navigator.userAgent;let r;return-1!==(e=t.indexOf("Opera"))?(i.name="Opera",i.version=t.substring(e+6),-1!==(e=t.indexOf("Version"))&&(i.version=t.substring(e+8))):-1!==(e=t.indexOf("OPR"))?(i.name="Opera",i.version=t.substring(e+5)):-1!==(e=t.indexOf("Edge"))?(i.name="Microsoft Edge",i.version=t.substring(e+5)):-1!==(e=t.indexOf("MSIE"))?(i.name="Microsoft Internet Explorer",i.version=t.substring(e+5)):-1!==(e=t.indexOf("Chrome"))?(i.name="Chrome",i.version=t.substring(e+7)):-1!==(e=t.indexOf("Safari"))?(i.name="Safari",i.version=t.substring(e+7),-1!==(e=t.indexOf("Version"))&&(i.version=t.substring(e+8))):-1!==(e=t.indexOf("Firefox"))?(i.name="Firefox",i.version=t.substring(e+8)):-1!==t.indexOf("Trident/")&&(i.name="Microsoft Internet Explorer",i.version=t.substring(t.indexOf("rv:")+3)),i.mobile=/Mobile|mini|Fennec|Android|iP(ad|od|hone)/.test(t),-1!=(r=i.version.indexOf(";"))&&(i.version=i.version.substring(0,r)),-1!=(r=i.version.indexOf(" "))&&(i.version=i.version.substring(0,r)),-1!=(r=i.version.indexOf(")"))&&(i.version=i.version.substring(0,r)),i.major_version=parseInt(""+i.version,10),isNaN(i.major_version)&&(i.version=""+parseFloat(navigator.appVersion),i.major_version=parseInt(navigator.appVersion,10)),i}function o(e){const{name:i,version:t}=e.getOS();return{name:i,version:t}}function a(e){const{model:i,type:t,vendor:r}=e.getDevice();return{model:i,type:t,vendor:r}}function c(e){const{architecture:i}=e.getCPU();return{architecture:i}}i.findBrowserInfo=function(){const e=new s.default;return{ua:window.navigator.userAgent,screen_size:{width:screen.width||0,height:screen.height||0},browser:n(),os:o(e),device:a(e),cpu:c(e)}}},"./src/CampaignInfo.ts":(e,i,t)=>{"use strict";Object.defineProperty(i,"__esModule",{value:!0}),i.findCampaignInfo=void 0;const r=t("./src/UrlParser.ts");function s(e,i){const t=e.split(".")[1].replace(/-/g,"+").replace(/_/g,"/"),r=JSON.parse(window.atob(t)).payload;return"attachment"===i?r.download_type="attachment":null!==i&&(r.download_type="file"),r}i.findCampaignInfo=function(){const e=new r.UrlParser(window.location.href),i=e.findParam("tk");if(!i)throw new Error("Missing ATTACK Simulator token");const t=e.findParam("file_type");try{return[i,s(i,t)]}catch(e){return[i,{ats_company_id:""}]}}},"./src/Manager.ts":(e,i,t)=>{"use strict";Object.defineProperty(i,"__esModule",{value:!0}),i.Manager=void 0;const r=t("./src/BrowserInfo.ts"),s=t("./src/CampaignInfo.ts"),n=t("./src/events/AttachmentOpen.ts"),o=t("./src/events/Click.ts"),a=t("./src/events/Download.ts"),c=t("./src/events/FileOpen.ts"),d=t("./src/events/Input.ts"),l=t("./src/events/PageLoaded.ts"),u=t("./src/events/PageRead.ts"),b=t("./src/events/Submit.ts"),g=t("./src/Tools.ts");i.Manager=class{constructor(e,i,t,g,m,p=!1){this.supportedTypes=["email","password","tel","text","given-name","name","family-name","street-address","cc-name","cc-given-name","cc-family-name","cc-number","cc-exp","cc-exp-month","cc-exp-year","cc-csc","cc-type"],this.supportedEvents={attachment_opened:n.AttachmentOpen,click:o.Click,download:a.Download,file_open:c.FileOpen,input_filled:d.Input,page_loaded:l.PageLoaded,page_read:u.PageRead,submit:b.Submit},this.debug=!1,this.handlers=[],this.disabledEvents=[],this.remote=e,[this.token,this.campaignInfo]=(0,s.findCampaignInfo)(),this.browserInfo=(0,r.findBrowserInfo)(),i.length||(i=Object.keys(this.supportedEvents)),this.remoteEvents=i.map((e=>this.getEvent(e))),this.source=t,this.redirectUrl=g,this.shouldRedirect=m,this.debug=p,this.campaignInfo.download_type&&this.checkDownload()}checkDownload(){switch(this.campaignInfo.download_type){case"file":return this.trigger("file_opened");case"attachment":return this.trigger("attachment_opened")}}getEvent(e){return new this.supportedEvents[e]}listen(){let e=0;for(const i of this.remoteEvents){this.debug&&console.log(`Listening for event @${i.trigger} (${i.name})`);const t=i.targets;for(const r of t)r.addEventListener(i.trigger,this.handlers[e++]=e=>this.handle(i,e))}}stop(){let e=0;for(const i of this.remoteEvents){this.debug&&console.log(`Stopping listening for event @${i.trigger} (${i.name})`);const t=i.targets;for(const r of t)r.removeEventListener(i.trigger,this.handlers[e++])}}findType(e,i){if(!e.hasTypes||!i)return null;const t=i.currentTarget,r=t.getAttribute("autocomplete")||t.type;return-1!==this.supportedTypes.indexOf(r)?r:null}findName(e,i){const t=this.findType(e,i);return t?`${e.name}-${t}`:e.name}packEvent(e,i){return{data:Object.assign(Object.assign({},this.browserInfo),{type:e}),source:this.source,timestamp:Math.floor(Date.now()/1e3),ats_header:this.token,event:i.name.toLowerCase(),sg_event_id:(0,g.createUUID)(),sg_message_id:this.campaignInfo.ats_instance_id}}trigger(e){const i=this.getEvent(e);if(!i)throw new Error(`Unsupported event ${e}. Please choose one of ${Object.keys(this.supportedEvents).join(", ")}`);this.handle(i)}handle(e,i){if(this.debug&&console.log(`Event @${e.trigger} (${e.name}) triggered...`),i&&e.isBlocking&&(i.preventDefault(),i.stopPropagation(),i.stopImmediatePropagation()),!e.allowMultiple){const t=this.findName(e,i);if(this.disabledEvents.includes(t))return void(this.debug&&console.log(`Preventing duplicate event @${e.trigger} (${t}).`));this.disabledEvents.push(t)}const t=this.findType(e,i),r=this.packEvent(t,e);this.remote.post(r).then((e=>{this.debug&&console.log(e)})).catch((e=>{this.debug&&console.error(e)})).finally((()=>{e.redirectOnFinish&&this.shouldRedirect&&(window.location.href=`${this.redirectUrl}${window.location.search}`)}))}}},"./src/Remote.ts":(e,i)=>{"use strict";Object.defineProperty(i,"__esModule",{value:!0});i.default=class{constructor(e,i,t){this.api_key=e,this.url=i,this.debug=t}post(e){return this.debug&&(console.log(`Sending event to ${this.url} with data:`),console.table(e)),new Promise(((i,t)=>{const r=new XMLHttpRequest;r.open("POST",this.url,!0),r.setRequestHeader("Content-type","application/json"),r.setRequestHeader("api-key",this.api_key),r.onreadystatechange=function(){if(4===r.readyState&&200===r.status)if(r.responseText){const e=JSON.parse(r.responseText);i(e)}else i({})},r.onerror=function(e){t(e)},r.send(JSON.stringify(e))}))}}},"./src/Tools.ts":(e,i)=>{"use strict";Object.defineProperty(i,"__esModule",{value:!0}),i.removeSubdomain=i.createUUID=void 0,i.createUUID=function(){const e=[],i="0123456789abcdef";for(let t=0;t<36;t++)e[t]=i.substr(Math.floor(16*Math.random()),1);return e[14]="4",e[19]=i.substr(3&e[19]|8,1),e[8]=e[13]=e[18]=e[23]="-",e.join("")};const t="ac|ad|ae|af|ag|ai|al|am|an|ao|aq|ar|as|at|au|aw|ax|az|ba|bb|be|bf|bg|bh|bi|bj|bm|bo|br|bs|bt|bv|bw|by|bz|ca|cc|cd|cf|cg|ch|ci|cl|cm|cn|co|cr|cu|cv|cw|cx|cz|de|dj|dk|dm|do|dz|ec|ee|eg|es|et|eu|fi|fm|fo|fr|ga|gb|gd|ge|gf|gg|gh|gi|gl|gm|gn|gp|gq|gr|gs|gt|gw|gy|hk|hm|hn|hr|ht|hu|id|ie|il|im|in|io|iq|ir|is|it|je|jo|jp|kg|ki|km|kn|kp|kr|ky|kz|la|lb|lc|li|lk|lr|ls|lt|lu|lv|ly|ma|mc|md|me|mg|mh|mk|ml|mn|mo|mp|mq|mr|ms|mt|mu|mv|mw|mx|my|na|nc|ne|nf|ng|nl|no|nr|nu|nz|om|pa|pe|pf|ph|pk|pl|pm|pn|pr|ps|pt|pw|py|qa|re|ro|rs|ru|rw|sa|sb|sc|sd|se|sg|sh|si|sj|sk|sl|sm|sn|so|sr|st|su|sv|sx|sy|sz|tc|td|tf|tg|th|tj|tk|tl|tm|tn|to|tp|tr|tt|tv|tw|tz|ua|ug|uk|us|uy|uz|va|vc|ve|vg|vi|vn|vu|wf|ws|yt".split("|"),r="com|edu|gov|net|mil|org|nom|sch|caa|res|off|gob|int|tur|ip6|uri|urn|asn|act|nsw|qld|tas|vic|pro|biz|adm|adv|agr|arq|art|ato|bio|bmd|cim|cng|cnt|ecn|eco|emp|eng|esp|etc|eti|far|fnd|fot|fst|g12|ggf|imb|ind|inf|jor|jus|leg|lel|mat|med|mus|not|ntr|odo|ppg|psc|psi|qsl|rec|slg|srv|teo|tmp|trd|vet|zlg|web|ltd|sld|pol|fin|k12|lib|pri|aip|fie|eun|sci|prd|cci|pvt|mod|idv|rel|sex|gen|nic|abr|bas|cal|cam|emr|fvg|laz|lig|lom|mar|mol|pmn|pug|sar|sic|taa|tos|umb|vao|vda|ven|mie|北海道|和歌山|神奈川|鹿児島|ass|rep|tra|per|ngo|soc|grp|plc|its|air|and|bus|can|ddr|jfk|mad|nrw|nyc|ski|spy|tcm|ulm|usa|war|fhs|vgs|dep|eid|fet|fla|flå|gol|hof|hol|sel|vik|cri|iwi|ing|abo|fam|gok|gon|gop|gos|aid|atm|gsm|sos|elk|waw|est|aca|bar|cpa|jur|law|sec|plo|www|bir|cbg|jar|khv|msk|nov|nsk|ptz|rnd|spb|stv|tom|tsk|udm|vrn|cmw|kms|nkz|snz|pub|fhv|red|ens|nat|rns|rnu|bbs|tel|bel|kep|nhs|dni|fed|isa|nsn|gub|e12|tec|орг|обр|упр|alt|nis|jpn|mex|ath|iki|nid|gda|inc".split("|");i.removeSubdomain=function(e){const i=new RegExp("^(www|studio|mail|remote|blog|webmail|server|ns1|ns2|smtp|secure|vpn|m|shop|ftp|mail2|test|portal|ns|ww1|host|support|dev|web|bbs|ww42|squatter|mx|email|1|mail1|2|forum|owa|www2|gw|admin|store|mx1|cdn|api|exchange|app|gov|2tty|vps|govyty|hgfgdf|news|1rer|lkjkui).","i"),s=(e=e.replace(i,"")).split(".");for(;s.length>3;)s.shift();return 3===s.length&&(s[1].length>2&&s[2].length>2||-1===r.indexOf(s[1])&&-1===t.indexOf(s[2]))&&s.shift(),s.join(".")}},"./src/UrlParser.ts":(e,i)=>{"use strict";Object.defineProperty(i,"__esModule",{value:!0}),i.UrlParser=void 0;i.UrlParser=class{constructor(e){this.url=e;const i=document.createElement("a");i.href=e,this.protocol=i.protocol,this.host=i.host,this.hostname=i.hostname,this.port=i.port,this.pathname=i.pathname,this.hash=i.hash,this.search=i.search.substr(1),this.parseParameters()}parseParameters(){this.parameters={};const e=this.search.split("&");for(const i of e){const[e,t]=i.split("=");this.parameters[e]=t}}findParam(e){return this.parameters[e]||null}}},"./src/events/AttachmentOpen.ts":(e,i)=>{"use strict";Object.defineProperty(i,"__esModule",{value:!0}),i.AttachmentOpen=void 0;i.AttachmentOpen=class{get redirectOnFinish(){return!1}get trigger(){return""}get name(){return"attachment_opened"}get hasTypes(){return!1}get targets(){return[]}checkEvent(){return!0}get isBlocking(){return!0}}},"./src/events/Click.ts":(e,i)=>{"use strict";Object.defineProperty(i,"__esModule",{value:!0}),i.Click=void 0;i.Click=class{get redirectOnFinish(){return!0}get trigger(){return"click"}get name(){return"page_left"}get hasTypes(){return!0}get targets(){return[...document.querySelectorAll("a:not([href$='.exe']),button:not([type=submit]),input[type=button]")].filter((e=>!e.hasAttribute("ignore")))}checkEvent(e){return e.which&&e.isTrusted&&e.screenX&&0!=e.screenX&&e.screenY&&0!=e.screenY}get isBlocking(){return!0}}},"./src/events/Download.ts":(e,i)=>{"use strict";Object.defineProperty(i,"__esModule",{value:!0}),i.Download=void 0;i.Download=class{get redirectOnFinish(){return!0}get trigger(){return"click"}get name(){return"download_file_event"}get hasTypes(){return!0}get targets(){return[...document.querySelectorAll("a[href$='.exe']")].filter((e=>!e.hasAttribute("ignore")))}checkEvent(e){return e.which&&e.isTrusted&&e.screenX&&0!=e.screenX&&e.screenY&&0!=e.screenY}get isBlocking(){return!0}}},"./src/events/FileOpen.ts":(e,i)=>{"use strict";Object.defineProperty(i,"__esModule",{value:!0}),i.FileOpen=void 0;i.FileOpen=class{get redirectOnFinish(){return!1}get trigger(){return""}get name(){return"file_opened"}get hasTypes(){return!1}get targets(){return[]}checkEvent(){return!0}get isBlocking(){return!0}}},"./src/events/Input.ts":(e,i)=>{"use strict";Object.defineProperty(i,"__esModule",{value:!0}),i.Input=void 0;i.Input=class{get redirectOnFinish(){return!1}get trigger(){return"input"}get name(){return"input_filled"}get hasTypes(){return!0}get targets(){return[...document.querySelectorAll("select,textarea,input")].filter((e=>!e.hasAttribute("ignore")))}checkEvent(e){return!!e.target.value.trim()}get isBlocking(){return!1}}},"./src/events/PageLoaded.ts":(e,i)=>{"use strict";Object.defineProperty(i,"__esModule",{value:!0}),i.PageLoaded=void 0;i.PageLoaded=class{get redirectOnFinish(){return!1}get trigger(){return"load"}get name(){return"page_loaded"}get hasTypes(){return!1}get targets(){return[window]}checkEvent(){return!0}get isBlocking(){return!1}}},"./src/events/PageRead.ts":(e,i)=>{"use strict";Object.defineProperty(i,"__esModule",{value:!0}),i.PageRead=void 0;i.PageRead=class{constructor(){this.minScrollPercentage=70,this.minStaySeconds=3e4,this.hasScrolled=!1,this.hasStayed=!1,this.customEvent=new Event(this.trigger),this.enable()}enable(){window.onscroll=()=>this.scrolled(),this.detectFocus(),this.detectVisibility(),this.scrolled(),this.timeout=setTimeout((()=>this.stayed()),this.minStaySeconds)}get visibilityProps(){if(void 0!==document.hidden)return["visibilitychange","visibilityState"];if(void 0!==document.mozHidden)return["mozvisibilitychange","mozVisibilityState"];if(void 0!==document.msHidden)return["msvisibilitychange","msVisibilityState"];if(void 0!==document.webkitHidden)return["webkitvisibilitychange","webkitVisibilityState"];throw new Error("Visibility not supported.")}detectFocus(){window.addEventListener("focus",this.focusGranted.bind(this)),window.addEventListener("blur",this.focusLost.bind(this))}detectVisibility(){try{const[e]=this.visibilityProps;document.addEventListener(e,this.visibilityChanged.bind(this))}catch(e){return}}stopDetectingVisibility(){try{const[e]=this.visibilityProps;document.removeEventListener(e,this.visibilityChanged.bind(this))}catch(e){return}}visibilityChanged(){const[e,i]=this.visibilityProps;this.toggleTimer("visible"===document[i])}focusGranted(){this.toggleTimer(!0)}focusLost(){this.toggleTimer(!1)}toggleTimer(e){this.hasStayed||(e?this.timeout=setTimeout((()=>this.stayed()),this.minStaySeconds):clearTimeout(this.timeout))}disable(){window.onscroll=null,this.stopDetectingVisibility(),window.removeEventListener("focus",this.focusGranted.bind(this)),window.removeEventListener("blur",this.focusLost.bind(this))}getScrollPercent(){return(document.documentElement.scrollTop+document.body.scrollTop)/(document.documentElement.scrollHeight-document.documentElement.clientHeight)*100}scrolled(){this.getScrollPercent()>this.minScrollPercentage&&(this.hasStayed&&this.dispatch(),this.hasScrolled=!0)}stayed(){this.hasScrolled&&this.dispatch(),this.hasStayed=!0}dispatch(){window.dispatchEvent(this.customEvent),this.disable()}get redirectOnFinish(){return!1}get trigger(){return"page_read"}get name(){return"page_read"}get hasTypes(){return!1}get targets(){return[window]}checkEvent(){return!0}get isBlocking(){return!1}}},"./src/events/Submit.ts":(e,i)=>{"use strict";Object.defineProperty(i,"__esModule",{value:!0}),i.Submit=void 0;i.Submit=class{get redirectOnFinish(){return!0}get trigger(){return"submit"}get name(){return"form_submitted"}get hasTypes(){return!0}get targets(){return[...document.querySelectorAll("form")].filter((e=>!e.hasAttribute("ignore")))}checkEvent(e){return-1===e.target.className.indexOf("disabled")}get isBlocking(){return!0}}},"./node_modules/ua-parser-js/src/ua-parser.js":function(e,i,t){var r;!function(s,n){"use strict";var o="function",a="undefined",c="object",d="string",l="model",u="name",b="type",g="vendor",m="version",p="architecture",h="console",w="mobile",f="tablet",v="smarttv",y="wearable",k="embedded",x="Amazon",_="Apple",O="ASUS",S="BlackBerry",E="Browser",P="Chrome",T="Firefox",j="Google",M="Huawei",z="LG",q="Microsoft",A="Motorola",I="Opera",C="Samsung",U="Sharp",N="Sony",R="Xiaomi",F="Zebra",L="Facebook",D=function(e){for(var i={},t=0;t<e.length;t++)i[e[t].toUpperCase()]=e[t];return i},B=function(e,i){return typeof e===d&&-1!==V(i).indexOf(V(e))},V=function(e){return e.toLowerCase()},$=function(e,i){if(typeof e===d)return e=e.replace(/^\s\s*/,""),typeof i===a?e:e.substring(0,350)},H=function(e,i){for(var t,r,s,a,d,l,u=0;u<i.length&&!d;){var b=i[u],g=i[u+1];for(t=r=0;t<b.length&&!d;)if(d=b[t++].exec(e))for(s=0;s<g.length;s++)l=d[++r],typeof(a=g[s])===c&&a.length>0?2===a.length?typeof a[1]==o?this[a[0]]=a[1].call(this,l):this[a[0]]=a[1]:3===a.length?typeof a[1]!==o||a[1].exec&&a[1].test?this[a[0]]=l?l.replace(a[1],a[2]):n:this[a[0]]=l?a[1].call(this,l,a[2]):n:4===a.length&&(this[a[0]]=l?a[3].call(this,l.replace(a[1],a[2])):n):this[a]=l||n;u+=2}},G=function(e,i){for(var t in i)if(typeof i[t]===c&&i[t].length>0){for(var r=0;r<i[t].length;r++)if(B(i[t][r],e))return"?"===t?n:t}else if(B(i[t],e))return"?"===t?n:t;return e},X={ME:"4.90","NT 3.11":"NT3.51","NT 4.0":"NT4.0",2e3:"NT 5.0",XP:["NT 5.1","NT 5.2"],Vista:"NT 6.0",7:"NT 6.1",8:"NT 6.2",8.1:"NT 6.3",10:["NT 6.4","NT 10.0"],RT:"ARM"},W={browser:[[/\b(?:crmo|crios)\/([\w\.]+)/i],[m,[u,"Chrome"]],[/edg(?:e|ios|a)?\/([\w\.]+)/i],[m,[u,"Edge"]],[/(opera mini)\/([-\w\.]+)/i,/(opera [mobiletab]{3,6})\b.+version\/([-\w\.]+)/i,/(opera)(?:.+version\/|[\/ ]+)([\w\.]+)/i],[u,m],[/opios[\/ ]+([\w\.]+)/i],[m,[u,I+" Mini"]],[/\bopr\/([\w\.]+)/i],[m,[u,I]],[/(kindle)\/([\w\.]+)/i,/(lunascape|maxthon|netfront|jasmine|blazer)[\/ ]?([\w\.]*)/i,/(avant |iemobile|slim)(?:browser)?[\/ ]?([\w\.]*)/i,/(ba?idubrowser)[\/ ]?([\w\.]+)/i,/(?:ms|\()(ie) ([\w\.]+)/i,/(flock|rockmelt|midori|epiphany|silk|skyfire|ovibrowser|bolt|iron|vivaldi|iridium|phantomjs|bowser|quark|qupzilla|falkon|rekonq|puffin|brave|whale|qqbrowserlite|qq|duckduckgo)\/([-\w\.]+)/i,/(weibo)__([\d\.]+)/i],[u,m],[/(?:\buc? ?browser|(?:juc.+)ucweb)[\/ ]?([\w\.]+)/i],[m,[u,"UC"+E]],[/microm.+\bqbcore\/([\w\.]+)/i,/\bqbcore\/([\w\.]+).+microm/i],[m,[u,"WeChat(Win) Desktop"]],[/micromessenger\/([\w\.]+)/i],[m,[u,"WeChat"]],[/konqueror\/([\w\.]+)/i],[m,[u,"Konqueror"]],[/trident.+rv[: ]([\w\.]{1,9})\b.+like gecko/i],[m,[u,"IE"]],[/yabrowser\/([\w\.]+)/i],[m,[u,"Yandex"]],[/(avast|avg)\/([\w\.]+)/i],[[u,/(.+)/,"$1 Secure "+E],m],[/\bfocus\/([\w\.]+)/i],[m,[u,T+" Focus"]],[/\bopt\/([\w\.]+)/i],[m,[u,I+" Touch"]],[/coc_coc\w+\/([\w\.]+)/i],[m,[u,"Coc Coc"]],[/dolfin\/([\w\.]+)/i],[m,[u,"Dolphin"]],[/coast\/([\w\.]+)/i],[m,[u,I+" Coast"]],[/miuibrowser\/([\w\.]+)/i],[m,[u,"MIUI "+E]],[/fxios\/([-\w\.]+)/i],[m,[u,T]],[/\bqihu|(qi?ho?o?|360)browser/i],[[u,"360 "+E]],[/(oculus|samsung|sailfish|huawei)browser\/([\w\.]+)/i],[[u,/(.+)/,"$1 "+E],m],[/(comodo_dragon)\/([\w\.]+)/i],[[u,/_/g," "],m],[/(electron)\/([\w\.]+) safari/i,/(tesla)(?: qtcarbrowser|\/(20\d\d\.[-\w\.]+))/i,/m?(qqbrowser|baiduboxapp|2345Explorer)[\/ ]?([\w\.]+)/i],[u,m],[/(metasr)[\/ ]?([\w\.]+)/i,/(lbbrowser)/i,/\[(linkedin)app\]/i],[u],[/((?:fban\/fbios|fb_iab\/fb4a)(?!.+fbav)|;fbav\/([\w\.]+);)/i],[[u,L],m],[/safari (line)\/([\w\.]+)/i,/\b(line)\/([\w\.]+)\/iab/i,/(chromium|instagram)[\/ ]([-\w\.]+)/i],[u,m],[/\bgsa\/([\w\.]+) .*safari\//i],[m,[u,"GSA"]],[/headlesschrome(?:\/([\w\.]+)| )/i],[m,[u,P+" Headless"]],[/ wv\).+(chrome)\/([\w\.]+)/i],[[u,P+" WebView"],m],[/droid.+ version\/([\w\.]+)\b.+(?:mobile safari|safari)/i],[m,[u,"Android "+E]],[/(chrome|omniweb|arora|[tizenoka]{5} ?browser)\/v?([\w\.]+)/i],[u,m],[/version\/([\w\.\,]+) .*mobile\/\w+ (safari)/i],[m,[u,"Mobile Safari"]],[/version\/([\w(\.|\,)]+) .*(mobile ?safari|safari)/i],[m,u],[/webkit.+?(mobile ?safari|safari)(\/[\w\.]+)/i],[u,[m,G,{"1.0":"/8",1.2:"/1",1.3:"/3","2.0":"/412","2.0.2":"/416","2.0.3":"/417","2.0.4":"/419","?":"/"}]],[/(webkit|khtml)\/([\w\.]+)/i],[u,m],[/(navigator|netscape\d?)\/([-\w\.]+)/i],[[u,"Netscape"],m],[/mobile vr; rv:([\w\.]+)\).+firefox/i],[m,[u,T+" Reality"]],[/ekiohf.+(flow)\/([\w\.]+)/i,/(swiftfox)/i,/(icedragon|iceweasel|camino|chimera|fennec|maemo browser|minimo|conkeror|klar)[\/ ]?([\w\.\+]+)/i,/(seamonkey|k-meleon|icecat|iceape|firebird|phoenix|palemoon|basilisk|waterfox)\/([-\w\.]+)$/i,/(firefox)\/([\w\.]+)/i,/(mozilla)\/([\w\.]+) .+rv\:.+gecko\/\d+/i,/(polaris|lynx|dillo|icab|doris|amaya|w3m|netsurf|sleipnir|obigo|mosaic|(?:go|ice|up)[\. ]?browser)[-\/ ]?v?([\w\.]+)/i,/(links) \(([\w\.]+)/i],[u,m],[/(cobalt)\/([\w\.]+)/i],[u,[m,/master.|lts./,""]]],cpu:[[/(?:(amd|x(?:(?:86|64)[-_])?|wow|win)64)[;\)]/i],[[p,"amd64"]],[/(ia32(?=;))/i],[[p,V]],[/((?:i[346]|x)86)[;\)]/i],[[p,"ia32"]],[/\b(aarch64|arm(v?8e?l?|_?64))\b/i],[[p,"arm64"]],[/\b(arm(?:v[67])?ht?n?[fl]p?)\b/i],[[p,"armhf"]],[/windows (ce|mobile); ppc;/i],[[p,"arm"]],[/((?:ppc|powerpc)(?:64)?)(?: mac|;|\))/i],[[p,/ower/,"",V]],[/(sun4\w)[;\)]/i],[[p,"sparc"]],[/((?:avr32|ia64(?=;))|68k(?=\))|\barm(?=v(?:[1-7]|[5-7]1)l?|;|eabi)|(?=atmel )avr|(?:irix|mips|sparc)(?:64)?\b|pa-risc)/i],[[p,V]]],device:[[/\b(sch-i[89]0\d|shw-m380s|sm-[ptx]\w{2,4}|gt-[pn]\d{2,4}|sgh-t8[56]9|nexus 10)/i],[l,[g,C],[b,f]],[/\b((?:s[cgp]h|gt|sm)-\w+|galaxy nexus)/i,/samsung[- ]([-\w]+)/i,/sec-(sgh\w+)/i],[l,[g,C],[b,w]],[/\((ip(?:hone|od)[\w ]*);/i],[l,[g,_],[b,w]],[/\((ipad);[-\w\),; ]+apple/i,/applecoremedia\/[\w\.]+ \((ipad)/i,/\b(ipad)\d\d?,\d\d?[;\]].+ios/i],[l,[g,_],[b,f]],[/(macintosh);/i],[l,[g,_]],[/\b((?:ag[rs][23]?|bah2?|sht?|btv)-a?[lw]\d{2})\b(?!.+d\/s)/i],[l,[g,M],[b,f]],[/(?:huawei|honor)([-\w ]+)[;\)]/i,/\b(nexus 6p|\w{2,4}e?-[atu]?[ln][\dx][012359c][adn]?)\b(?!.+d\/s)/i],[l,[g,M],[b,w]],[/\b(poco[\w ]+)(?: bui|\))/i,/\b; (\w+) build\/hm\1/i,/\b(hm[-_ ]?note?[_ ]?(?:\d\w)?) bui/i,/\b(redmi[\-_ ]?(?:note|k)?[\w_ ]+)(?: bui|\))/i,/\b(mi[-_ ]?(?:a\d|one|one[_ ]plus|note lte|max|cc)?[_ ]?(?:\d?\w?)[_ ]?(?:plus|se|lite)?)(?: bui|\))/i],[[l,/_/g," "],[g,R],[b,w]],[/\b(mi[-_ ]?(?:pad)(?:[\w_ ]+))(?: bui|\))/i],[[l,/_/g," "],[g,R],[b,f]],[/; (\w+) bui.+ oppo/i,/\b(cph[12]\d{3}|p(?:af|c[al]|d\w|e[ar])[mt]\d0|x9007|a101op)\b/i],[l,[g,"OPPO"],[b,w]],[/vivo (\w+)(?: bui|\))/i,/\b(v[12]\d{3}\w?[at])(?: bui|;)/i],[l,[g,"Vivo"],[b,w]],[/\b(rmx[12]\d{3})(?: bui|;|\))/i],[l,[g,"Realme"],[b,w]],[/\b(milestone|droid(?:[2-4x]| (?:bionic|x2|pro|razr))?:?( 4g)?)\b[\w ]+build\//i,/\bmot(?:orola)?[- ](\w*)/i,/((?:moto[\w\(\) ]+|xt\d{3,4}|nexus 6)(?= bui|\)))/i],[l,[g,A],[b,w]],[/\b(mz60\d|xoom[2 ]{0,2}) build\//i],[l,[g,A],[b,f]],[/((?=lg)?[vl]k\-?\d{3}) bui| 3\.[-\w; ]{10}lg?-([06cv9]{3,4})/i],[l,[g,z],[b,f]],[/(lm(?:-?f100[nv]?|-[\w\.]+)(?= bui|\))|nexus [45])/i,/\blg[-e;\/ ]+((?!browser|netcast|android tv)\w+)/i,/\blg-?([\d\w]+) bui/i],[l,[g,z],[b,w]],[/(ideatab[-\w ]+)/i,/lenovo ?(s[56]000[-\w]+|tab(?:[\w ]+)|yt[-\d\w]{6}|tb[-\d\w]{6})/i],[l,[g,"Lenovo"],[b,f]],[/(?:maemo|nokia).*(n900|lumia \d+)/i,/nokia[-_ ]?([-\w\.]*)/i],[[l,/_/g," "],[g,"Nokia"],[b,w]],[/(pixel c)\b/i],[l,[g,j],[b,f]],[/droid.+; (pixel[\daxl ]{0,6})(?: bui|\))/i],[l,[g,j],[b,w]],[/droid.+ (a?\d[0-2]{2}so|[c-g]\d{4}|so[-gl]\w+|xq-a\w[4-7][12])(?= bui|\).+chrome\/(?![1-6]{0,1}\d\.))/i],[l,[g,N],[b,w]],[/sony tablet [ps]/i,/\b(?:sony)?sgp\w+(?: bui|\))/i],[[l,"Xperia Tablet"],[g,N],[b,f]],[/ (kb2005|in20[12]5|be20[12][59])\b/i,/(?:one)?(?:plus)? (a\d0\d\d)(?: b|\))/i],[l,[g,"OnePlus"],[b,w]],[/(alexa)webm/i,/(kf[a-z]{2}wi)( bui|\))/i,/(kf[a-z]+)( bui|\)).+silk\//i],[l,[g,x],[b,f]],[/((?:sd|kf)[0349hijorstuw]+)( bui|\)).+silk\//i],[[l,/(.+)/g,"Fire Phone $1"],[g,x],[b,w]],[/(playbook);[-\w\),; ]+(rim)/i],[l,g,[b,f]],[/\b((?:bb[a-f]|st[hv])100-\d)/i,/\(bb10; (\w+)/i],[l,[g,S],[b,w]],[/(?:\b|asus_)(transfo[prime ]{4,10} \w+|eeepc|slider \w+|nexus 7|padfone|p00[cj])/i],[l,[g,O],[b,f]],[/ (z[bes]6[027][012][km][ls]|zenfone \d\w?)\b/i],[l,[g,O],[b,w]],[/(nexus 9)/i],[l,[g,"HTC"],[b,f]],[/(htc)[-;_ ]{1,2}([\w ]+(?=\)| bui)|\w+)/i,/(zte)[- ]([\w ]+?)(?: bui|\/|\))/i,/(alcatel|geeksphone|nexian|panasonic|sony(?!-bra))[-_ ]?([-\w]*)/i],[g,[l,/_/g," "],[b,w]],[/droid.+; ([ab][1-7]-?[0178a]\d\d?)/i],[l,[g,"Acer"],[b,f]],[/droid.+; (m[1-5] note) bui/i,/\bmz-([-\w]{2,})/i],[l,[g,"Meizu"],[b,w]],[/\b(sh-?[altvz]?\d\d[a-ekm]?)/i],[l,[g,U],[b,w]],[/(blackberry|benq|palm(?=\-)|sonyericsson|acer|asus|dell|meizu|motorola|polytron)[-_ ]?([-\w]*)/i,/(hp) ([\w ]+\w)/i,/(asus)-?(\w+)/i,/(microsoft); (lumia[\w ]+)/i,/(lenovo)[-_ ]?([-\w]+)/i,/(jolla)/i,/(oppo) ?([\w ]+) bui/i],[g,l,[b,w]],[/(archos) (gamepad2?)/i,/(hp).+(touchpad(?!.+tablet)|tablet)/i,/(kindle)\/([\w\.]+)/i,/(nook)[\w ]+build\/(\w+)/i,/(dell) (strea[kpr\d ]*[\dko])/i,/(le[- ]+pan)[- ]+(\w{1,9}) bui/i,/(trinity)[- ]*(t\d{3}) bui/i,/(gigaset)[- ]+(q\w{1,9}) bui/i,/(vodafone) ([\w ]+)(?:\)| bui)/i],[g,l,[b,f]],[/(surface duo)/i],[l,[g,q],[b,f]],[/droid [\d\.]+; (fp\du?)(?: b|\))/i],[l,[g,"Fairphone"],[b,w]],[/(u304aa)/i],[l,[g,"AT&T"],[b,w]],[/\bsie-(\w*)/i],[l,[g,"Siemens"],[b,w]],[/\b(rct\w+) b/i],[l,[g,"RCA"],[b,f]],[/\b(venue[\d ]{2,7}) b/i],[l,[g,"Dell"],[b,f]],[/\b(q(?:mv|ta)\w+) b/i],[l,[g,"Verizon"],[b,f]],[/\b(?:barnes[& ]+noble |bn[rt])([\w\+ ]*) b/i],[l,[g,"Barnes & Noble"],[b,f]],[/\b(tm\d{3}\w+) b/i],[l,[g,"NuVision"],[b,f]],[/\b(k88) b/i],[l,[g,"ZTE"],[b,f]],[/\b(nx\d{3}j) b/i],[l,[g,"ZTE"],[b,w]],[/\b(gen\d{3}) b.+49h/i],[l,[g,"Swiss"],[b,w]],[/\b(zur\d{3}) b/i],[l,[g,"Swiss"],[b,f]],[/\b((zeki)?tb.*\b) b/i],[l,[g,"Zeki"],[b,f]],[/\b([yr]\d{2}) b/i,/\b(dragon[- ]+touch |dt)(\w{5}) b/i],[[g,"Dragon Touch"],l,[b,f]],[/\b(ns-?\w{0,9}) b/i],[l,[g,"Insignia"],[b,f]],[/\b((nxa|next)-?\w{0,9}) b/i],[l,[g,"NextBook"],[b,f]],[/\b(xtreme\_)?(v(1[045]|2[015]|[3469]0|7[05])) b/i],[[g,"Voice"],l,[b,w]],[/\b(lvtel\-)?(v1[12]) b/i],[[g,"LvTel"],l,[b,w]],[/\b(ph-1) /i],[l,[g,"Essential"],[b,w]],[/\b(v(100md|700na|7011|917g).*\b) b/i],[l,[g,"Envizen"],[b,f]],[/\b(trio[-\w\. ]+) b/i],[l,[g,"MachSpeed"],[b,f]],[/\btu_(1491) b/i],[l,[g,"Rotor"],[b,f]],[/(shield[\w ]+) b/i],[l,[g,"Nvidia"],[b,f]],[/(sprint) (\w+)/i],[g,l,[b,w]],[/(kin\.[onetw]{3})/i],[[l,/\./g," "],[g,q],[b,w]],[/droid.+; (cc6666?|et5[16]|mc[239][23]x?|vc8[03]x?)\)/i],[l,[g,F],[b,f]],[/droid.+; (ec30|ps20|tc[2-8]\d[kx])\)/i],[l,[g,F],[b,w]],[/(ouya)/i,/(nintendo) ([wids3utch]+)/i],[g,l,[b,h]],[/droid.+; (shield) bui/i],[l,[g,"Nvidia"],[b,h]],[/(playstation [345portablevi]+)/i],[l,[g,N],[b,h]],[/\b(xbox(?: one)?(?!; xbox))[\); ]/i],[l,[g,q],[b,h]],[/smart-tv.+(samsung)/i],[g,[b,v]],[/hbbtv.+maple;(\d+)/i],[[l,/^/,"SmartTV"],[g,C],[b,v]],[/(nux; netcast.+smarttv|lg (netcast\.tv-201\d|android tv))/i],[[g,z],[b,v]],[/(apple) ?tv/i],[g,[l,_+" TV"],[b,v]],[/crkey/i],[[l,P+"cast"],[g,j],[b,v]],[/droid.+aft(\w)( bui|\))/i],[l,[g,x],[b,v]],[/\(dtv[\);].+(aquos)/i,/(aquos-tv[\w ]+)\)/i],[l,[g,U],[b,v]],[/(bravia[\w ]+)( bui|\))/i],[l,[g,N],[b,v]],[/(mitv-\w{5}) bui/i],[l,[g,R],[b,v]],[/\b(roku)[\dx]*[\)\/]((?:dvp-)?[\d\.]*)/i,/hbbtv\/\d+\.\d+\.\d+ +\([\w ]*; *(\w[^;]*);([^;]*)/i],[[g,$],[l,$],[b,v]],[/\b(android tv|smart[- ]?tv|opera tv|tv; rv:)\b/i],[[b,v]],[/((pebble))app/i],[g,l,[b,y]],[/droid.+; (glass) \d/i],[l,[g,j],[b,y]],[/droid.+; (wt63?0{2,3})\)/i],[l,[g,F],[b,y]],[/(quest( 2)?)/i],[l,[g,L],[b,y]],[/(tesla)(?: qtcarbrowser|\/[-\w\.]+)/i],[g,[b,k]],[/droid .+?; ([^;]+?)(?: bui|\) applew).+? mobile safari/i],[l,[b,w]],[/droid .+?; ([^;]+?)(?: bui|\) applew).+?(?! mobile) safari/i],[l,[b,f]],[/\b((tablet|tab)[;\/]|focus\/\d(?!.+mobile))/i],[[b,f]],[/(phone|mobile(?:[;\/]| [ \w\/\.]*safari)|pda(?=.+windows ce))/i],[[b,w]],[/(android[-\w\. ]{0,9});.+buil/i],[l,[g,"Generic"]]],engine:[[/windows.+ edge\/([\w\.]+)/i],[m,[u,"EdgeHTML"]],[/webkit\/537\.36.+chrome\/(?!27)([\w\.]+)/i],[m,[u,"Blink"]],[/(presto)\/([\w\.]+)/i,/(webkit|trident|netfront|netsurf|amaya|lynx|w3m|goanna)\/([\w\.]+)/i,/ekioh(flow)\/([\w\.]+)/i,/(khtml|tasman|links)[\/ ]\(?([\w\.]+)/i,/(icab)[\/ ]([23]\.[\d\.]+)/i],[u,m],[/rv\:([\w\.]{1,9})\b.+(gecko)/i],[m,u]],os:[[/microsoft (windows) (vista|xp)/i],[u,m],[/(windows) nt 6\.2; (arm)/i,/(windows (?:phone(?: os)?|mobile))[\/ ]?([\d\.\w ]*)/i,/(windows)[\/ ]?([ntce\d\. ]+\w)(?!.+xbox)/i],[u,[m,G,X]],[/(win(?=3|9|n)|win 9x )([nt\d\.]+)/i],[[u,"Windows"],[m,G,X]],[/ip[honead]{2,4}\b(?:.*os ([\w]+) like mac|; opera)/i,/cfnetwork\/.+darwin/i],[[m,/_/g,"."],[u,"iOS"]],[/(mac os x) ?([\w\. ]*)/i,/(macintosh|mac_powerpc\b)(?!.+haiku)/i],[[u,"Mac OS"],[m,/_/g,"."]],[/droid ([\w\.]+)\b.+(android[- ]x86|harmonyos)/i],[m,u],[/(android|webos|qnx|bada|rim tablet os|maemo|meego|sailfish)[-\/ ]?([\w\.]*)/i,/(blackberry)\w*\/([\w\.]*)/i,/(tizen|kaios)[\/ ]([\w\.]+)/i,/\((series40);/i],[u,m],[/\(bb(10);/i],[m,[u,S]],[/(?:symbian ?os|symbos|s60(?=;)|series60)[-\/ ]?([\w\.]*)/i],[m,[u,"Symbian"]],[/mozilla\/[\d\.]+ \((?:mobile|tablet|tv|mobile; [\w ]+); rv:.+ gecko\/([\w\.]+)/i],[m,[u,T+" OS"]],[/web0s;.+rt(tv)/i,/\b(?:hp)?wos(?:browser)?\/([\w\.]+)/i],[m,[u,"webOS"]],[/crkey\/([\d\.]+)/i],[m,[u,P+"cast"]],[/(cros) [\w]+ ([\w\.]+\w)/i],[[u,"Chromium OS"],m],[/(nintendo|playstation) ([wids345portablevuch]+)/i,/(xbox); +xbox ([^\);]+)/i,/\b(joli|palm)\b ?(?:os)?\/?([\w\.]*)/i,/(mint)[\/\(\) ]?(\w*)/i,/(mageia|vectorlinux)[; ]/i,/([kxln]?ubuntu|debian|suse|opensuse|gentoo|arch(?= linux)|slackware|fedora|mandriva|centos|pclinuxos|red ?hat|zenwalk|linpus|raspbian|plan 9|minix|risc os|contiki|deepin|manjaro|elementary os|sabayon|linspire)(?: gnu\/linux)?(?: enterprise)?(?:[- ]linux)?(?:-gnu)?[-\/ ]?(?!chrom|package)([-\w\.]*)/i,/(hurd|linux) ?([\w\.]*)/i,/(gnu) ?([\w\.]*)/i,/\b([-frentopcghs]{0,5}bsd|dragonfly)[\/ ]?(?!amd|[ix346]{1,2}86)([\w\.]*)/i,/(haiku) (\w+)/i],[u,m],[/(sunos) ?([\w\.\d]*)/i],[[u,"Solaris"],m],[/((?:open)?solaris)[-\/ ]?([\w\.]*)/i,/(aix) ((\d)(?=\.|\)| )[\w\.])*/i,/\b(beos|os\/2|amigaos|morphos|openvms|fuchsia|hp-ux)/i,/(unix) ?([\w\.]*)/i],[u,m]]},Y=function(e,i){if(typeof e===c&&(i=e,e=n),!(this instanceof Y))return new Y(e,i).getResult();var t=e||(typeof s!==a&&s.navigator&&s.navigator.userAgent?s.navigator.userAgent:""),r=i?function(e,i){var t={};for(var r in e)i[r]&&i[r].length%2==0?t[r]=i[r].concat(e[r]):t[r]=e[r];return t}(W,i):W;return this.getBrowser=function(){var e,i={};return i[u]=n,i[m]=n,H.call(i,t,r.browser),i.major=typeof(e=i.version)===d?e.replace(/[^\d\.]/g,"").split(".")[0]:n,i},this.getCPU=function(){var e={};return e[p]=n,H.call(e,t,r.cpu),e},this.getDevice=function(){var e={};return e[g]=n,e[l]=n,e[b]=n,H.call(e,t,r.device),e},this.getEngine=function(){var e={};return e[u]=n,e[m]=n,H.call(e,t,r.engine),e},this.getOS=function(){var e={};return e[u]=n,e[m]=n,H.call(e,t,r.os),e},this.getResult=function(){return{ua:this.getUA(),browser:this.getBrowser(),engine:this.getEngine(),os:this.getOS(),device:this.getDevice(),cpu:this.getCPU()}},this.getUA=function(){return t},this.setUA=function(e){return t=typeof e===d&&e.length>350?$(e,350):e,this},this.setUA(t),this};Y.VERSION="1.0.33",Y.BROWSER=D([u,m,"major"]),Y.CPU=D([p]),Y.DEVICE=D([l,g,b,h,w,v,f,y,k]),Y.ENGINE=Y.OS=D([u,m]),typeof i!==a?(e.exports&&(i=e.exports=Y),i.UAParser=Y):t.amdO?(r=function(){return Y}.call(i,t,i,e))===n||(e.exports=r):typeof s!==a&&(s.UAParser=Y);var Z=typeof s!==a&&(s.jQuery||s.Zepto);if(Z&&!Z.ua){var J=new Y;Z.ua=J.getResult(),Z.ua.get=function(){return J.getUA()},Z.ua.set=function(e){J.setUA(e);var i=J.getResult();for(var t in i)Z.ua[t]=i[t]}}}("object"==typeof window?window:this)}},i={};function t(r){var s=i[r];if(void 0!==s)return s.exports;var n=i[r]={exports:{}};return e[r].call(n.exports,n,n.exports,t),n.exports}t.amdO={};var r=t("./index.ts");ATSEvents=r})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,