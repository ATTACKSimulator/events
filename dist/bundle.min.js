/*! For license information please see bundle.min.js.LICENSE.txt */
var ATSEvents;(()=>{var e={"./index.ts":function(e,t,i){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const n=i("./src/Manager.ts"),s=r(i("./src/Remote.ts")),o={events:[],debug:!1,shouldRedirect:!0,redirectUrl:`https://oops.${(0,i("./src/Tools.ts").removeSubdomain)(window.location.hostname)}`,source:"LP",url:"https://api.attacksimulator.com/v0/client-events"};e.exports=class{constructor(e){const t=Object.assign(Object.assign({},o),e);t.debug&&console.log(t);const i=new s.default(t.apiKey,t.url,t.debug);this.manager=new n.Manager(i,t.events,t.source,t.redirectUrl,t.shouldRedirect,t.debug)}listen(){this.manager.listen()}stop(){this.manager.stop()}trigger(e){return this.manager.trigger(e)}}},"./src/BrowserInfo.ts":function(e,t,i){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.findBrowserInfo=void 0;const n=r(i("./node_modules/ua-parser-js/src/ua-parser.js"));function s(){let e;const t={},i=navigator.userAgent;let r;return-1!==(e=i.indexOf("Opera"))?(t.name="Opera",t.version=i.substring(e+6),-1!==(e=i.indexOf("Version"))&&(t.version=i.substring(e+8))):-1!==(e=i.indexOf("OPR"))?(t.name="Opera",t.version=i.substring(e+5)):-1!==(e=i.indexOf("Edge"))?(t.name="Microsoft Edge",t.version=i.substring(e+5)):-1!==(e=i.indexOf("MSIE"))?(t.name="Microsoft Internet Explorer",t.version=i.substring(e+5)):-1!==(e=i.indexOf("Chrome"))?(t.name="Chrome",t.version=i.substring(e+7)):-1!==(e=i.indexOf("Safari"))?(t.name="Safari",t.version=i.substring(e+7),-1!==(e=i.indexOf("Version"))&&(t.version=i.substring(e+8))):-1!==(e=i.indexOf("Firefox"))?(t.name="Firefox",t.version=i.substring(e+8)):-1!==i.indexOf("Trident/")&&(t.name="Microsoft Internet Explorer",t.version=i.substring(i.indexOf("rv:")+3)),t.mobile=/Mobile|mini|Fennec|Android|iP(ad|od|hone)/.test(i),-1!=(r=t.version.indexOf(";"))&&(t.version=t.version.substring(0,r)),-1!=(r=t.version.indexOf(" "))&&(t.version=t.version.substring(0,r)),-1!=(r=t.version.indexOf(")"))&&(t.version=t.version.substring(0,r)),t.major_version=parseInt(""+t.version,10),isNaN(t.major_version)&&(t.version=""+parseFloat(navigator.appVersion),t.major_version=parseInt(navigator.appVersion,10)),t}function o(e){const{name:t,version:i}=e.getOS();return{name:t,version:i}}function a(e){const{model:t,type:i,vendor:r}=e.getDevice();return{model:t,type:i,vendor:r}}function u(e){const{architecture:t}=e.getCPU();return{architecture:t}}t.findBrowserInfo=function(){const e=new n.default;return{ua:window.navigator.userAgent,screen_size:{width:screen.width||0,height:screen.height||0},browser:s(),os:o(e),device:a(e),cpu:u(e)}}},"./src/CampaignInfo.ts":(e,t,i)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.findCampaignInfo=void 0;const r=i("./src/UrlParser.ts");function n(e,t){const i=e.split(".")[1].replace(/-/g,"+").replace(/_/g,"/"),r=JSON.parse(window.atob(i)).payload;return"attachment"===t?r.download_type="attachment":null!==t&&(r.download_type="file"),r}t.findCampaignInfo=function(){const e=new r.UrlParser(window.location.href),t=e.findParam("tk");if(!t)throw new Error("Missing ATTACK Simulator token");const i=e.findParam("file_type");try{return[t,n(t,i)]}catch(e){return[t,{ats_company_id:""}]}}},"./src/Logger.ts":(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.default=class{constructor(e){this.debug=e}info(e){this.debug&&console.log(e)}error(e){this.debug&&console.error(e)}warn(e){this.debug&&console.warn(e)}}},"./src/Manager.ts":function(e,t,i){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.Manager=void 0;const n=i("./src/BrowserInfo.ts"),s=i("./src/CampaignInfo.ts"),o=i("./src/Tools.ts"),a=r(i("./src/events/AttachmentOpen.ts")),u=r(i("./src/events/Click.ts")),l=r(i("./src/events/Download.ts")),c=r(i("./src/events/Extension.ts")),d=r(i("./src/events/FileDownload.ts")),g=r(i("./src/events/FileOpen.ts")),h=r(i("./src/events/Input.ts")),b=r(i("./src/events/Microphone.ts")),p=r(i("./src/events/Notification.ts")),m=r(i("./src/events/PageLeft.ts")),f=r(i("./src/events/PageLoaded.ts")),w=r(i("./src/events/PageRead.ts")),v=r(i("./src/events/Submit.ts")),_=r(i("./src/events/Webcam.ts")),y=r(i("./src/events/Location.ts")),k=r(i("./src/Logger.ts"));t.Manager=class{constructor(e,t,i,r,o,x=!1){this.supportedTypes=["email","password","tel","text","given-name","name","family-name","street-address","cc-name","cc-given-name","cc-family-name","cc-number","cc-exp","cc-exp-month","cc-exp-year","cc-csc","cc-type"],this.supportedEvents={attachment_opened:a.default,button_clicked:u.default,download:l.default,extension_installed:c.default,file_download:d.default,file_open:g.default,input_filled:h.default,page_left:m.default,page_loaded:f.default,page_read:w.default,mic_accepted:b.default,notification_accepted:p.default,form_submitted:v.default,webcam_accepted:_.default,location_accepted:y.default},this.handlers=[],this.disabledEvents=[],this.logger=new k.default(x),this.remote=e,[this.token,this.campaignInfo]=(0,s.findCampaignInfo)(),this.browserInfo=(0,n.findBrowserInfo)(),t.length||(t=Object.keys(this.supportedEvents)),this.activeEvents=t.map((e=>this.getEvent(e))).filter((e=>null!==e)),this.logger.info(`Enabled events: ${t.join(" | ")}`),this.source=i,this.redirectUrl=r,this.shouldRedirect=o,this.campaignInfo.download_type&&this.checkDownload()}getEvent(e){return this.supportedEvents[e]?new this.supportedEvents[e]:null}checkDownload(){switch(this.campaignInfo.download_type){case"file":return this.trigger("file_opened");case"attachment":return this.trigger("attachment_opened")}}listen(){let e=0;for(const t of this.activeEvents)t.trigger?(this.logger.info(`Listening for event @${t.trigger} (${t.name})`),t.source.addEventListener(t.trigger,this.handlers[e++]=e=>this.prehandle(t,e))):this.logger.info(`The active event ${t.name} does not have a trigger. Skipping...`)}stop(){let e=0;for(const t of this.activeEvents)t.trigger&&(this.logger.info(`Stopping listening for event @${t.trigger} (${t.name})`),t.source.removeEventListener(t.trigger,this.handlers[e++]))}trigger(e){const t=this.getEvent(e);if(!t)throw new Error(`Unsupported event ${e}. Please choose one of ${Object.keys(this.supportedEvents).join(", ")}`);return this.executeEvent(t,null,!1)}prehandle(e,t){e.shouldDebounce?(0,o.debounce)(((...e)=>this.handle(...e)),500,e,t):this.handle(e,t)}findType(e,t){if(!e.hasTypes||!t)return null;const i=t.target,r=i.getAttribute("autocomplete")||i.type;return-1!==this.supportedTypes.indexOf(r)?r:null}findName(e,t){const i=this.findType(e,t);return i?`${e.name}-${i}`:e.name}packEvent(e,t){return{data:Object.assign(Object.assign({},this.browserInfo),{type:e}),source:this.source,timestamp:Math.floor(Date.now()/1e3),ats_header:this.token,event:t.name.toLowerCase(),sg_event_id:(0,o.createUUID)(),sg_message_id:this.campaignInfo.ats_instance_id}}handle(e,t,i=!0){this.executeEvent(e,t,i).catch((e=>this.logger.error(e)))}checkEvent(e,t=!0){if(!e.isValid(event)&&t)throw new Error(`Event @${e.trigger} (${e.name}) not valid...`)}checkMultiple(e,t){if(!e.allowMultiple){const i=this.findName(e,t);if(this.disabledEvents.includes(i))throw new Error(`Preventing duplicate event @${e.trigger} (${i}).`);this.disabledEvents.push(i)}}executeEvent(e,t,i=!0){this.logger.info(`Event @${e.trigger} (${e.name}) triggered...`);try{this.checkEvent(e,i)}catch(e){return this.logger.error(e),new Promise(((t,i)=>i(e)))}t&&e.isBlocking&&(t.preventDefault(),t.stopPropagation(),t.stopImmediatePropagation());try{this.checkMultiple(e,t)}catch(e){return this.logger.error(e),new Promise(((t,i)=>i(e)))}const r=this.findType(e,t),n=this.packEvent(r,e);return this.remote.post(n).then((e=>this.logger.info(e))).finally((()=>{e.redirectOnFinish&&this.shouldRedirect&&(window.location.href=`${this.redirectUrl}${window.location.search}`)}))}}},"./src/Remote.ts":(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.default=class{constructor(e,t,i){this.api_key=e,this.url=t,this.debug=i}post(e){return this.debug&&(console.log(`Sending event to ${this.url} with data:`),console.table(e)),fetch(this.url,{method:"POST",headers:{"Content-type":"application/json","api-key":this.api_key},keepalive:!0,body:JSON.stringify(e)}).then((e=>{const t=e.headers.get("content-type");return t&&-1!==t.indexOf("application/json")?e.json():e.text()}))}}},"./src/Tools.ts":(e,t)=>{"use strict";function i(){const e=[],t="0123456789abcdef";for(let i=0;i<36;i++)e[i]=t.substr(Math.floor(16*Math.random()),1);return e[14]="4",e[19]=t.substr(3&e[19]|8,1),e[8]=e[13]=e[18]=e[23]="-",e.join("")}Object.defineProperty(t,"__esModule",{value:!0}),t.debounce=t.removeSubdomain=t.createUUID=void 0,t.createUUID=i;const r="ac|ad|ae|af|ag|ai|al|am|an|ao|aq|ar|as|at|au|aw|ax|az|ba|bb|be|bf|bg|bh|bi|bj|bm|bo|br|bs|bt|bv|bw|by|bz|ca|cc|cd|cf|cg|ch|ci|cl|cm|cn|co|cr|cu|cv|cw|cx|cz|de|dj|dk|dm|do|dz|ec|ee|eg|es|et|eu|fi|fm|fo|fr|ga|gb|gd|ge|gf|gg|gh|gi|gl|gm|gn|gp|gq|gr|gs|gt|gw|gy|hk|hm|hn|hr|ht|hu|id|ie|il|im|in|io|iq|ir|is|it|je|jo|jp|kg|ki|km|kn|kp|kr|ky|kz|la|lb|lc|li|lk|lr|ls|lt|lu|lv|ly|ma|mc|md|me|mg|mh|mk|ml|mn|mo|mp|mq|mr|ms|mt|mu|mv|mw|mx|my|na|nc|ne|nf|ng|nl|no|nr|nu|nz|om|pa|pe|pf|ph|pk|pl|pm|pn|pr|ps|pt|pw|py|qa|re|ro|rs|ru|rw|sa|sb|sc|sd|se|sg|sh|si|sj|sk|sl|sm|sn|so|sr|st|su|sv|sx|sy|sz|tc|td|tf|tg|th|tj|tk|tl|tm|tn|to|tp|tr|tt|tv|tw|tz|ua|ug|uk|us|uy|uz|va|vc|ve|vg|vi|vn|vu|wf|ws|yt".split("|"),n="com|edu|gov|net|mil|org|nom|sch|caa|res|off|gob|int|tur|ip6|uri|urn|asn|act|nsw|qld|tas|vic|pro|biz|adm|adv|agr|arq|art|ato|bio|bmd|cim|cng|cnt|ecn|eco|emp|eng|esp|etc|eti|far|fnd|fot|fst|g12|ggf|imb|ind|inf|jor|jus|leg|lel|mat|med|mus|not|ntr|odo|ppg|psc|psi|qsl|rec|slg|srv|teo|tmp|trd|vet|zlg|web|ltd|sld|pol|fin|k12|lib|pri|aip|fie|eun|sci|prd|cci|pvt|mod|idv|rel|sex|gen|nic|abr|bas|cal|cam|emr|fvg|laz|lig|lom|mar|mol|pmn|pug|sar|sic|taa|tos|umb|vao|vda|ven|mie|北海道|和歌山|神奈川|鹿児島|ass|rep|tra|per|ngo|soc|grp|plc|its|air|and|bus|can|ddr|jfk|mad|nrw|nyc|ski|spy|tcm|ulm|usa|war|fhs|vgs|dep|eid|fet|fla|flå|gol|hof|hol|sel|vik|cri|iwi|ing|abo|fam|gok|gon|gop|gos|aid|atm|gsm|sos|elk|waw|est|aca|bar|cpa|jur|law|sec|plo|www|bir|cbg|jar|khv|msk|nov|nsk|ptz|rnd|spb|stv|tom|tsk|udm|vrn|cmw|kms|nkz|snz|pub|fhv|red|ens|nat|rns|rnu|bbs|tel|bel|kep|nhs|dni|fed|isa|nsn|gub|e12|tec|орг|обр|упр|alt|nis|jpn|mex|ath|iki|nid|gda|inc".split("|");t.removeSubdomain=function(e){const t=new RegExp("^(www|studio|mail|remote|blog|webmail|server|ns1|ns2|smtp|secure|vpn|m|shop|ftp|mail2|test|portal|ns|ww1|host|support|dev|web|bbs|ww42|squatter|mx|email|1|mail1|2|forum|owa|www2|gw|admin|store|mx1|cdn|api|exchange|app|gov|2tty|vps|govyty|hgfgdf|news|1rer|lkjkui).","i"),i=(e=e.replace(t,"")).split(".");for(;i.length>3;)i.shift();return 3===i.length&&(i[1].length>2&&i[2].length>2||-1===n.indexOf(i[1])&&-1===r.indexOf(i[2]))&&i.shift(),i.join(".")};const s={};t.debounce=function(e,t,...r){const[,n]=r;n.target.hasAttribute("data-id")||n.target.setAttribute("data-id",i());const o=n.target.getAttribute("data-id");s[o]&&clearTimeout(s[o]),s[o]=setTimeout(e,t,...r)}},"./src/UrlParser.ts":(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.UrlParser=void 0;t.UrlParser=class{constructor(e){this.url=e;const t=document.createElement("a");t.href=e,this.protocol=t.protocol,this.host=t.host,this.hostname=t.hostname,this.port=t.port,this.pathname=t.pathname,this.hash=t.hash,this.search=t.search.substr(1),this.parseParameters()}parseParameters(){this.parameters={};const e=this.search.split("&");for(const t of e){const[e,i]=t.split("=");this.parameters[e]=i}}findParam(e){return this.parameters[e]||null}}},"./src/events/ATSEvent.ts":(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.default=class{basicValidation(e){return!e.hasAttribute("data-ignore")&&!e.hasAttribute("@click")}}},"./src/events/AttachmentOpen.ts":function(e,t,i){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const n=r(i("./src/events/ATSEvent.ts"));class s extends n.default{get shouldDebounce(){return!1}get trigger(){return null}get source(){return null}get name(){return"attachment_opened"}get hasTypes(){return!1}get redirectOnFinish(){return!1}get isBlocking(){return!0}get allowMultiple(){return!1}isValid(){return!0}}t.default=s},"./src/events/Click.ts":function(e,t,i){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const n=r(i("./src/events/ATSEvent.ts"));class s extends n.default{get shouldDebounce(){return!1}get trigger(){return"click"}get source(){return window}get name(){return"button_clicked"}get hasTypes(){return!0}get redirectOnFinish(){return!0}get isBlocking(){return!1}get allowMultiple(){return!1}isValid(e){return(null==e?void 0:e.target)instanceof HTMLAnchorElement?this.validateAnchor(e.target):(null==e?void 0:e.target)instanceof HTMLButtonElement&&this.validateButton(e.target)}validateAnchor(e){return this.basicValidation(e)}validateButton(e){return!(!this.basicValidation(e)||e.hasAttribute("type")&&"submit"===e.getAttribute("type"))}}t.default=s},"./src/events/Download.ts":function(e,t,i){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const n=r(i("./src/events/ATSEvent.ts"));class s extends n.default{get shouldDebounce(){return!1}get trigger(){return null}get source(){return null}get name(){return"download_file_event"}get hasTypes(){return!1}get redirectOnFinish(){return!0}get isBlocking(){return!0}get allowMultiple(){return!1}isValid(){return!0}}t.default=s},"./src/events/Extension.ts":function(e,t,i){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const n=r(i("./src/events/ATSEvent.ts"));class s extends n.default{get shouldDebounce(){return!1}get trigger(){return null}get source(){return null}get name(){return"extension_installed"}get hasTypes(){return!1}get redirectOnFinish(){return!0}get isBlocking(){return!0}get allowMultiple(){return!1}isValid(){return!0}}t.default=s},"./src/events/FileDownload.ts":function(e,t,i){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const n=r(i("./src/events/ATSEvent.ts"));class s extends n.default{get shouldDebounce(){return!1}get trigger(){return null}get source(){return null}get name(){return"file_download"}get hasTypes(){return!0}get redirectOnFinish(){return!1}get isBlocking(){return!1}get allowMultiple(){return!1}isValid(e){return(null==e?void 0:e.target)instanceof HTMLAnchorElement?this.validateAnchor(e.target):(null==e?void 0:e.target)instanceof HTMLButtonElement&&this.validateButton(e.target)}validateAnchor(e){return this.basicValidation(e)}validateButton(e){return!(!this.basicValidation(e)||e.hasAttribute("type")&&"submit"===e.getAttribute("type"))}}t.default=s},"./src/events/FileOpen.ts":function(e,t,i){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const n=r(i("./src/events/ATSEvent.ts"));class s extends n.default{get shouldDebounce(){return!1}get trigger(){return null}get source(){return null}get name(){return"file_opened"}get hasTypes(){return!1}get redirectOnFinish(){return!0}get isBlocking(){return!0}get allowMultiple(){return!1}isValid(){return!0}}t.default=s},"./src/events/Input.ts":function(e,t,i){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const n=r(i("./src/events/ATSEvent.ts"));class s extends n.default{get shouldDebounce(){return!0}get trigger(){return"input"}get source(){return window}get name(){return"input_filled"}get hasTypes(){return!0}get redirectOnFinish(){return!1}get isBlocking(){return!1}get allowMultiple(){return!0}isValid(e){return e.target instanceof HTMLInputElement&&(this.basicValidation(e.target)&&!!e.target.value.trim())}}t.default=s},"./src/events/Location.ts":function(e,t,i){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const n=r(i("./src/events/ATSEvent.ts"));class s extends n.default{get shouldDebounce(){return!1}get trigger(){return null}get source(){return null}get name(){return"location_accepted"}get hasTypes(){return!1}get redirectOnFinish(){return!0}get isBlocking(){return!0}get allowMultiple(){return!1}isValid(){return!0}}t.default=s},"./src/events/Microphone.ts":function(e,t,i){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const n=r(i("./src/events/ATSEvent.ts"));class s extends n.default{get shouldDebounce(){return!1}get trigger(){return null}get source(){return null}get name(){return"mic_accepted"}get hasTypes(){return!1}get redirectOnFinish(){return!0}get isBlocking(){return!0}get allowMultiple(){return!1}isValid(){return!0}}t.default=s},"./src/events/Notification.ts":function(e,t,i){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const n=r(i("./src/events/ATSEvent.ts"));class s extends n.default{get shouldDebounce(){return!1}get trigger(){return null}get source(){return null}get name(){return"notification_accepted"}get hasTypes(){return!1}get redirectOnFinish(){return!0}get isBlocking(){return!0}get allowMultiple(){return!1}isValid(){return!0}}t.default=s},"./src/events/PageLeft.ts":function(e,t,i){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const n=r(i("./src/events/ATSEvent.ts"));class s extends n.default{get shouldDebounce(){return!1}get trigger(){return null}get source(){return document}get name(){return"page_left"}get hasTypes(){return!1}get redirectOnFinish(){return!1}get isBlocking(){return!1}get allowMultiple(){return!1}isValid(){return"hidden"===document.visibilityState}}t.default=s},"./src/events/PageLoaded.ts":function(e,t,i){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const n=r(i("./src/events/ATSEvent.ts"));class s extends n.default{get shouldDebounce(){return!1}get trigger(){return"load"}get source(){return window}get name(){return"page_loaded"}get hasTypes(){return!1}get redirectOnFinish(){return!1}get isBlocking(){return!1}get allowMultiple(){return!1}isValid(){return!0}}t.default=s},"./src/events/PageRead.ts":function(e,t,i){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const n=r(i("./src/events/ATSEvent.ts"));class s extends n.default{constructor(){super(),this.minScrollPercentage=70,this.minStaySeconds=2e3,this.hasScrolled=!1,this.hasStayed=!1,this.customEvent=new Event(this.trigger),this.enable(),console.log("Page read enabled")}get shouldDebounce(){return!1}get trigger(){return"page_read"}get source(){return window}get name(){return"page_read"}get hasTypes(){return!1}get redirectOnFinish(){return!1}get isBlocking(){return!1}get allowMultiple(){return!1}isValid(){return!0}enable(){window.onscroll=()=>this.scrolled(),this.detectFocus(),this.detectVisibility(),this.scrolled(),this.timeout=setTimeout((()=>this.stayed()),this.minStaySeconds)}get visibilityProps(){if(void 0!==document.hidden)return["visibilitychange","visibilityState"];if(void 0!==document.mozHidden)return["mozvisibilitychange","mozVisibilityState"];if(void 0!==document.msHidden)return["msvisibilitychange","msVisibilityState"];if(void 0!==document.webkitHidden)return["webkitvisibilitychange","webkitVisibilityState"];throw new Error("Visibility not supported.")}detectFocus(){window.addEventListener("focus",this.focusGranted.bind(this)),window.addEventListener("blur",this.focusLost.bind(this))}detectVisibility(){try{const[e]=this.visibilityProps;document.addEventListener(e,this.visibilityChanged.bind(this))}catch(e){return}}stopDetectingVisibility(){try{const[e]=this.visibilityProps;document.removeEventListener(e,this.visibilityChanged.bind(this))}catch(e){return}}visibilityChanged(){const[e,t]=this.visibilityProps;this.toggleTimer("visible"===document[t])}focusGranted(){this.toggleTimer(!0)}focusLost(){this.toggleTimer(!1)}toggleTimer(e){this.hasStayed||(e?this.timeout=setTimeout((()=>this.stayed()),this.minStaySeconds):clearTimeout(this.timeout))}disable(){window.onscroll=null,this.stopDetectingVisibility(),window.removeEventListener("focus",this.focusGranted.bind(this)),window.removeEventListener("blur",this.focusLost.bind(this))}getScrollPercent(){return(document.documentElement.scrollTop+document.body.scrollTop)/(document.documentElement.scrollHeight-document.documentElement.clientHeight)*100}scrolled(){this.getScrollPercent()>this.minScrollPercentage&&(this.hasStayed&&this.dispatch(),this.hasScrolled=!0)}stayed(){this.hasScrolled&&this.dispatch(),this.hasStayed=!0}dispatch(){window.dispatchEvent(this.customEvent),this.disable()}}t.default=s},"./src/events/Submit.ts":function(e,t,i){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const n=r(i("./src/events/ATSEvent.ts"));class s extends n.default{get shouldDebounce(){return!1}get trigger(){return"submit"}get source(){return window}get name(){return"form_submitted"}get hasTypes(){return!0}get redirectOnFinish(){return!0}get isBlocking(){return!0}get allowMultiple(){return!1}isValid(e){return e.target instanceof HTMLFormElement&&this.basicValidation(e.target)}}t.default=s},"./src/events/Webcam.ts":function(e,t,i){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const n=r(i("./src/events/ATSEvent.ts"));class s extends n.default{get shouldDebounce(){return!1}get trigger(){return null}get source(){return null}get name(){return"webcam_accepted"}get hasTypes(){return!1}get redirectOnFinish(){return!0}get isBlocking(){return!0}get allowMultiple(){return!1}isValid(){return!0}}t.default=s},"./node_modules/ua-parser-js/src/ua-parser.js":function(e,t,i){var r;!function(n,s){"use strict";var o="function",a="undefined",u="object",l="string",c="major",d="model",g="name",h="type",b="vendor",p="version",m="architecture",f="console",w="mobile",v="tablet",_="smarttv",y="wearable",k="embedded",x="Amazon",E="Apple",M="ASUS",O="BlackBerry",T="Browser",S="Chrome",P="Firefox",j="Google",A="Huawei",D="LG",V="Microsoft",z="Motorola",B="Opera",I="Samsung",q="Sharp",C="Sony",L="Xiaomi",U="Zebra",F="Facebook",N="Chromium OS",$="Mac OS",R=function(e){for(var t={},i=0;i<e.length;i++)t[e[i].toUpperCase()]=e[i];return t},H=function(e,t){return typeof e===l&&-1!==G(t).indexOf(G(e))},G=function(e){return e.toLowerCase()},W=function(e,t){if(typeof e===l)return e=e.replace(/^\s\s*/,""),typeof t===a?e:e.substring(0,350)},Z=function(e,t){for(var i,r,n,a,l,c,d=0;d<t.length&&!l;){var g=t[d],h=t[d+1];for(i=r=0;i<g.length&&!l&&g[i];)if(l=g[i++].exec(e))for(n=0;n<h.length;n++)c=l[++r],typeof(a=h[n])===u&&a.length>0?2===a.length?typeof a[1]==o?this[a[0]]=a[1].call(this,c):this[a[0]]=a[1]:3===a.length?typeof a[1]!==o||a[1].exec&&a[1].test?this[a[0]]=c?c.replace(a[1],a[2]):s:this[a[0]]=c?a[1].call(this,c,a[2]):s:4===a.length&&(this[a[0]]=c?a[3].call(this,c.replace(a[1],a[2])):s):this[a]=c||s;d+=2}},K=function(e,t){for(var i in t)if(typeof t[i]===u&&t[i].length>0){for(var r=0;r<t[i].length;r++)if(H(t[i][r],e))return"?"===i?s:i}else if(H(t[i],e))return"?"===i?s:i;return e},X={ME:"4.90","NT 3.11":"NT3.51","NT 4.0":"NT4.0",2e3:"NT 5.0",XP:["NT 5.1","NT 5.2"],Vista:"NT 6.0",7:"NT 6.1",8:"NT 6.2",8.1:"NT 6.3",10:["NT 6.4","NT 10.0"],RT:"ARM"},J={browser:[[/\b(?:crmo|crios)\/([\w\.]+)/i],[p,[g,"Chrome"]],[/edg(?:e|ios|a)?\/([\w\.]+)/i],[p,[g,"Edge"]],[/(opera mini)\/([-\w\.]+)/i,/(opera [mobiletab]{3,6})\b.+version\/([-\w\.]+)/i,/(opera)(?:.+version\/|[\/ ]+)([\w\.]+)/i],[g,p],[/opios[\/ ]+([\w\.]+)/i],[p,[g,B+" Mini"]],[/\bopr\/([\w\.]+)/i],[p,[g,B]],[/(kindle)\/([\w\.]+)/i,/(lunascape|maxthon|netfront|jasmine|blazer)[\/ ]?([\w\.]*)/i,/(avant |iemobile|slim)(?:browser)?[\/ ]?([\w\.]*)/i,/(ba?idubrowser)[\/ ]?([\w\.]+)/i,/(?:ms|\()(ie) ([\w\.]+)/i,/(flock|rockmelt|midori|epiphany|silk|skyfire|bolt|iron|vivaldi|iridium|phantomjs|bowser|quark|qupzilla|falkon|rekonq|puffin|brave|whale(?!.+naver)|qqbrowserlite|qq|duckduckgo)\/([-\w\.]+)/i,/(heytap|ovi)browser\/([\d\.]+)/i,/(weibo)__([\d\.]+)/i],[g,p],[/(?:\buc? ?browser|(?:juc.+)ucweb)[\/ ]?([\w\.]+)/i],[p,[g,"UC"+T]],[/microm.+\bqbcore\/([\w\.]+)/i,/\bqbcore\/([\w\.]+).+microm/i],[p,[g,"WeChat(Win) Desktop"]],[/micromessenger\/([\w\.]+)/i],[p,[g,"WeChat"]],[/konqueror\/([\w\.]+)/i],[p,[g,"Konqueror"]],[/trident.+rv[: ]([\w\.]{1,9})\b.+like gecko/i],[p,[g,"IE"]],[/ya(?:search)?browser\/([\w\.]+)/i],[p,[g,"Yandex"]],[/(avast|avg)\/([\w\.]+)/i],[[g,/(.+)/,"$1 Secure "+T],p],[/\bfocus\/([\w\.]+)/i],[p,[g,P+" Focus"]],[/\bopt\/([\w\.]+)/i],[p,[g,B+" Touch"]],[/coc_coc\w+\/([\w\.]+)/i],[p,[g,"Coc Coc"]],[/dolfin\/([\w\.]+)/i],[p,[g,"Dolphin"]],[/coast\/([\w\.]+)/i],[p,[g,B+" Coast"]],[/miuibrowser\/([\w\.]+)/i],[p,[g,"MIUI "+T]],[/fxios\/([-\w\.]+)/i],[p,[g,P]],[/\bqihu|(qi?ho?o?|360)browser/i],[[g,"360 "+T]],[/(oculus|samsung|sailfish|huawei)browser\/([\w\.]+)/i],[[g,/(.+)/,"$1 "+T],p],[/(comodo_dragon)\/([\w\.]+)/i],[[g,/_/g," "],p],[/(electron)\/([\w\.]+) safari/i,/(tesla)(?: qtcarbrowser|\/(20\d\d\.[-\w\.]+))/i,/m?(qqbrowser|baiduboxapp|2345Explorer)[\/ ]?([\w\.]+)/i],[g,p],[/(metasr)[\/ ]?([\w\.]+)/i,/(lbbrowser)/i,/\[(linkedin)app\]/i],[g],[/((?:fban\/fbios|fb_iab\/fb4a)(?!.+fbav)|;fbav\/([\w\.]+);)/i],[[g,F],p],[/(kakao(?:talk|story))[\/ ]([\w\.]+)/i,/(naver)\(.*?(\d+\.[\w\.]+).*\)/i,/safari (line)\/([\w\.]+)/i,/\b(line)\/([\w\.]+)\/iab/i,/(chromium|instagram)[\/ ]([-\w\.]+)/i],[g,p],[/\bgsa\/([\w\.]+) .*safari\//i],[p,[g,"GSA"]],[/musical_ly(?:.+app_?version\/|_)([\w\.]+)/i],[p,[g,"TikTok"]],[/headlesschrome(?:\/([\w\.]+)| )/i],[p,[g,S+" Headless"]],[/ wv\).+(chrome)\/([\w\.]+)/i],[[g,S+" WebView"],p],[/droid.+ version\/([\w\.]+)\b.+(?:mobile safari|safari)/i],[p,[g,"Android "+T]],[/(chrome|omniweb|arora|[tizenoka]{5} ?browser)\/v?([\w\.]+)/i],[g,p],[/version\/([\w\.\,]+) .*mobile\/\w+ (safari)/i],[p,[g,"Mobile Safari"]],[/version\/([\w(\.|\,)]+) .*(mobile ?safari|safari)/i],[p,g],[/webkit.+?(mobile ?safari|safari)(\/[\w\.]+)/i],[g,[p,K,{"1.0":"/8",1.2:"/1",1.3:"/3","2.0":"/412","2.0.2":"/416","2.0.3":"/417","2.0.4":"/419","?":"/"}]],[/(webkit|khtml)\/([\w\.]+)/i],[g,p],[/(navigator|netscape\d?)\/([-\w\.]+)/i],[[g,"Netscape"],p],[/mobile vr; rv:([\w\.]+)\).+firefox/i],[p,[g,P+" Reality"]],[/ekiohf.+(flow)\/([\w\.]+)/i,/(swiftfox)/i,/(icedragon|iceweasel|camino|chimera|fennec|maemo browser|minimo|conkeror|klar)[\/ ]?([\w\.\+]+)/i,/(seamonkey|k-meleon|icecat|iceape|firebird|phoenix|palemoon|basilisk|waterfox)\/([-\w\.]+)$/i,/(firefox)\/([\w\.]+)/i,/(mozilla)\/([\w\.]+) .+rv\:.+gecko\/\d+/i,/(polaris|lynx|dillo|icab|doris|amaya|w3m|netsurf|sleipnir|obigo|mosaic|(?:go|ice|up)[\. ]?browser)[-\/ ]?v?([\w\.]+)/i,/(links) \(([\w\.]+)/i,/panasonic;(viera)/i],[g,p],[/(cobalt)\/([\w\.]+)/i],[g,[p,/master.|lts./,""]]],cpu:[[/(?:(amd|x(?:(?:86|64)[-_])?|wow|win)64)[;\)]/i],[[m,"amd64"]],[/(ia32(?=;))/i],[[m,G]],[/((?:i[346]|x)86)[;\)]/i],[[m,"ia32"]],[/\b(aarch64|arm(v?8e?l?|_?64))\b/i],[[m,"arm64"]],[/\b(arm(?:v[67])?ht?n?[fl]p?)\b/i],[[m,"armhf"]],[/windows (ce|mobile); ppc;/i],[[m,"arm"]],[/((?:ppc|powerpc)(?:64)?)(?: mac|;|\))/i],[[m,/ower/,"",G]],[/(sun4\w)[;\)]/i],[[m,"sparc"]],[/((?:avr32|ia64(?=;))|68k(?=\))|\barm(?=v(?:[1-7]|[5-7]1)l?|;|eabi)|(?=atmel )avr|(?:irix|mips|sparc)(?:64)?\b|pa-risc)/i],[[m,G]]],device:[[/\b(sch-i[89]0\d|shw-m380s|sm-[ptx]\w{2,4}|gt-[pn]\d{2,4}|sgh-t8[56]9|nexus 10)/i],[d,[b,I],[h,v]],[/\b((?:s[cgp]h|gt|sm)-\w+|sc[g-]?[\d]+a?|galaxy nexus)/i,/samsung[- ]([-\w]+)/i,/sec-(sgh\w+)/i],[d,[b,I],[h,w]],[/(?:\/|\()(ip(?:hone|od)[\w, ]*)(?:\/|;)/i],[d,[b,E],[h,w]],[/\((ipad);[-\w\),; ]+apple/i,/applecoremedia\/[\w\.]+ \((ipad)/i,/\b(ipad)\d\d?,\d\d?[;\]].+ios/i],[d,[b,E],[h,v]],[/(macintosh);/i],[d,[b,E]],[/\b(sh-?[altvz]?\d\d[a-ekm]?)/i],[d,[b,q],[h,w]],[/\b((?:ag[rs][23]?|bah2?|sht?|btv)-a?[lw]\d{2})\b(?!.+d\/s)/i],[d,[b,A],[h,v]],[/(?:huawei|honor)([-\w ]+)[;\)]/i,/\b(nexus 6p|\w{2,4}e?-[atu]?[ln][\dx][012359c][adn]?)\b(?!.+d\/s)/i],[d,[b,A],[h,w]],[/\b(poco[\w ]+)(?: bui|\))/i,/\b; (\w+) build\/hm\1/i,/\b(hm[-_ ]?note?[_ ]?(?:\d\w)?) bui/i,/\b(redmi[\-_ ]?(?:note|k)?[\w_ ]+)(?: bui|\))/i,/\b(mi[-_ ]?(?:a\d|one|one[_ ]plus|note lte|max|cc)?[_ ]?(?:\d?\w?)[_ ]?(?:plus|se|lite)?)(?: bui|\))/i],[[d,/_/g," "],[b,L],[h,w]],[/\b(mi[-_ ]?(?:pad)(?:[\w_ ]+))(?: bui|\))/i],[[d,/_/g," "],[b,L],[h,v]],[/; (\w+) bui.+ oppo/i,/\b(cph[12]\d{3}|p(?:af|c[al]|d\w|e[ar])[mt]\d0|x9007|a101op)\b/i],[d,[b,"OPPO"],[h,w]],[/vivo (\w+)(?: bui|\))/i,/\b(v[12]\d{3}\w?[at])(?: bui|;)/i],[d,[b,"Vivo"],[h,w]],[/\b(rmx[12]\d{3})(?: bui|;|\))/i],[d,[b,"Realme"],[h,w]],[/\b(milestone|droid(?:[2-4x]| (?:bionic|x2|pro|razr))?:?( 4g)?)\b[\w ]+build\//i,/\bmot(?:orola)?[- ](\w*)/i,/((?:moto[\w\(\) ]+|xt\d{3,4}|nexus 6)(?= bui|\)))/i],[d,[b,z],[h,w]],[/\b(mz60\d|xoom[2 ]{0,2}) build\//i],[d,[b,z],[h,v]],[/((?=lg)?[vl]k\-?\d{3}) bui| 3\.[-\w; ]{10}lg?-([06cv9]{3,4})/i],[d,[b,D],[h,v]],[/(lm(?:-?f100[nv]?|-[\w\.]+)(?= bui|\))|nexus [45])/i,/\blg[-e;\/ ]+((?!browser|netcast|android tv)\w+)/i,/\blg-?([\d\w]+) bui/i],[d,[b,D],[h,w]],[/(ideatab[-\w ]+)/i,/lenovo ?(s[56]000[-\w]+|tab(?:[\w ]+)|yt[-\d\w]{6}|tb[-\d\w]{6})/i],[d,[b,"Lenovo"],[h,v]],[/(?:maemo|nokia).*(n900|lumia \d+)/i,/nokia[-_ ]?([-\w\.]*)/i],[[d,/_/g," "],[b,"Nokia"],[h,w]],[/(pixel c)\b/i],[d,[b,j],[h,v]],[/droid.+; (pixel[\daxl ]{0,6})(?: bui|\))/i],[d,[b,j],[h,w]],[/droid.+ (a?\d[0-2]{2}so|[c-g]\d{4}|so[-gl]\w+|xq-a\w[4-7][12])(?= bui|\).+chrome\/(?![1-6]{0,1}\d\.))/i],[d,[b,C],[h,w]],[/sony tablet [ps]/i,/\b(?:sony)?sgp\w+(?: bui|\))/i],[[d,"Xperia Tablet"],[b,C],[h,v]],[/ (kb2005|in20[12]5|be20[12][59])\b/i,/(?:one)?(?:plus)? (a\d0\d\d)(?: b|\))/i],[d,[b,"OnePlus"],[h,w]],[/(alexa)webm/i,/(kf[a-z]{2}wi|aeo[c-r]{2})( bui|\))/i,/(kf[a-z]+)( bui|\)).+silk\//i],[d,[b,x],[h,v]],[/((?:sd|kf)[0349hijorstuw]+)( bui|\)).+silk\//i],[[d,/(.+)/g,"Fire Phone $1"],[b,x],[h,w]],[/(playbook);[-\w\),; ]+(rim)/i],[d,b,[h,v]],[/\b((?:bb[a-f]|st[hv])100-\d)/i,/\(bb10; (\w+)/i],[d,[b,O],[h,w]],[/(?:\b|asus_)(transfo[prime ]{4,10} \w+|eeepc|slider \w+|nexus 7|padfone|p00[cj])/i],[d,[b,M],[h,v]],[/ (z[bes]6[027][012][km][ls]|zenfone \d\w?)\b/i],[d,[b,M],[h,w]],[/(nexus 9)/i],[d,[b,"HTC"],[h,v]],[/(htc)[-;_ ]{1,2}([\w ]+(?=\)| bui)|\w+)/i,/(zte)[- ]([\w ]+?)(?: bui|\/|\))/i,/(alcatel|geeksphone|nexian|panasonic(?!(?:;|\.))|sony(?!-bra))[-_ ]?([-\w]*)/i],[b,[d,/_/g," "],[h,w]],[/droid.+; ([ab][1-7]-?[0178a]\d\d?)/i],[d,[b,"Acer"],[h,v]],[/droid.+; (m[1-5] note) bui/i,/\bmz-([-\w]{2,})/i],[d,[b,"Meizu"],[h,w]],[/(blackberry|benq|palm(?=\-)|sonyericsson|acer|asus|dell|meizu|motorola|polytron)[-_ ]?([-\w]*)/i,/(hp) ([\w ]+\w)/i,/(asus)-?(\w+)/i,/(microsoft); (lumia[\w ]+)/i,/(lenovo)[-_ ]?([-\w]+)/i,/(jolla)/i,/(oppo) ?([\w ]+) bui/i],[b,d,[h,w]],[/(kobo)\s(ereader|touch)/i,/(archos) (gamepad2?)/i,/(hp).+(touchpad(?!.+tablet)|tablet)/i,/(kindle)\/([\w\.]+)/i,/(nook)[\w ]+build\/(\w+)/i,/(dell) (strea[kpr\d ]*[\dko])/i,/(le[- ]+pan)[- ]+(\w{1,9}) bui/i,/(trinity)[- ]*(t\d{3}) bui/i,/(gigaset)[- ]+(q\w{1,9}) bui/i,/(vodafone) ([\w ]+)(?:\)| bui)/i],[b,d,[h,v]],[/(surface duo)/i],[d,[b,V],[h,v]],[/droid [\d\.]+; (fp\du?)(?: b|\))/i],[d,[b,"Fairphone"],[h,w]],[/(u304aa)/i],[d,[b,"AT&T"],[h,w]],[/\bsie-(\w*)/i],[d,[b,"Siemens"],[h,w]],[/\b(rct\w+) b/i],[d,[b,"RCA"],[h,v]],[/\b(venue[\d ]{2,7}) b/i],[d,[b,"Dell"],[h,v]],[/\b(q(?:mv|ta)\w+) b/i],[d,[b,"Verizon"],[h,v]],[/\b(?:barnes[& ]+noble |bn[rt])([\w\+ ]*) b/i],[d,[b,"Barnes & Noble"],[h,v]],[/\b(tm\d{3}\w+) b/i],[d,[b,"NuVision"],[h,v]],[/\b(k88) b/i],[d,[b,"ZTE"],[h,v]],[/\b(nx\d{3}j) b/i],[d,[b,"ZTE"],[h,w]],[/\b(gen\d{3}) b.+49h/i],[d,[b,"Swiss"],[h,w]],[/\b(zur\d{3}) b/i],[d,[b,"Swiss"],[h,v]],[/\b((zeki)?tb.*\b) b/i],[d,[b,"Zeki"],[h,v]],[/\b([yr]\d{2}) b/i,/\b(dragon[- ]+touch |dt)(\w{5}) b/i],[[b,"Dragon Touch"],d,[h,v]],[/\b(ns-?\w{0,9}) b/i],[d,[b,"Insignia"],[h,v]],[/\b((nxa|next)-?\w{0,9}) b/i],[d,[b,"NextBook"],[h,v]],[/\b(xtreme\_)?(v(1[045]|2[015]|[3469]0|7[05])) b/i],[[b,"Voice"],d,[h,w]],[/\b(lvtel\-)?(v1[12]) b/i],[[b,"LvTel"],d,[h,w]],[/\b(ph-1) /i],[d,[b,"Essential"],[h,w]],[/\b(v(100md|700na|7011|917g).*\b) b/i],[d,[b,"Envizen"],[h,v]],[/\b(trio[-\w\. ]+) b/i],[d,[b,"MachSpeed"],[h,v]],[/\btu_(1491) b/i],[d,[b,"Rotor"],[h,v]],[/(shield[\w ]+) b/i],[d,[b,"Nvidia"],[h,v]],[/(sprint) (\w+)/i],[b,d,[h,w]],[/(kin\.[onetw]{3})/i],[[d,/\./g," "],[b,V],[h,w]],[/droid.+; (cc6666?|et5[16]|mc[239][23]x?|vc8[03]x?)\)/i],[d,[b,U],[h,v]],[/droid.+; (ec30|ps20|tc[2-8]\d[kx])\)/i],[d,[b,U],[h,w]],[/smart-tv.+(samsung)/i],[b,[h,_]],[/hbbtv.+maple;(\d+)/i],[[d,/^/,"SmartTV"],[b,I],[h,_]],[/(nux; netcast.+smarttv|lg (netcast\.tv-201\d|android tv))/i],[[b,D],[h,_]],[/(apple) ?tv/i],[b,[d,E+" TV"],[h,_]],[/crkey/i],[[d,S+"cast"],[b,j],[h,_]],[/droid.+aft(\w)( bui|\))/i],[d,[b,x],[h,_]],[/\(dtv[\);].+(aquos)/i,/(aquos-tv[\w ]+)\)/i],[d,[b,q],[h,_]],[/(bravia[\w ]+)( bui|\))/i],[d,[b,C],[h,_]],[/(mitv-\w{5}) bui/i],[d,[b,L],[h,_]],[/Hbbtv.*(technisat) (.*);/i],[b,d,[h,_]],[/\b(roku)[\dx]*[\)\/]((?:dvp-)?[\d\.]*)/i,/hbbtv\/\d+\.\d+\.\d+ +\([\w\+ ]*; *([\w\d][^;]*);([^;]*)/i],[[b,W],[d,W],[h,_]],[/\b(android tv|smart[- ]?tv|opera tv|tv; rv:)\b/i],[[h,_]],[/(ouya)/i,/(nintendo) ([wids3utch]+)/i],[b,d,[h,f]],[/droid.+; (shield) bui/i],[d,[b,"Nvidia"],[h,f]],[/(playstation [345portablevi]+)/i],[d,[b,C],[h,f]],[/\b(xbox(?: one)?(?!; xbox))[\); ]/i],[d,[b,V],[h,f]],[/((pebble))app/i],[b,d,[h,y]],[/(watch)(?: ?os[,\/]|\d,\d\/)[\d\.]+/i],[d,[b,E],[h,y]],[/droid.+; (glass) \d/i],[d,[b,j],[h,y]],[/droid.+; (wt63?0{2,3})\)/i],[d,[b,U],[h,y]],[/(quest( 2| pro)?)/i],[d,[b,F],[h,y]],[/(tesla)(?: qtcarbrowser|\/[-\w\.]+)/i],[b,[h,k]],[/(aeobc)\b/i],[d,[b,x],[h,k]],[/droid .+?; ([^;]+?)(?: bui|\) applew).+? mobile safari/i],[d,[h,w]],[/droid .+?; ([^;]+?)(?: bui|\) applew).+?(?! mobile) safari/i],[d,[h,v]],[/\b((tablet|tab)[;\/]|focus\/\d(?!.+mobile))/i],[[h,v]],[/(phone|mobile(?:[;\/]| [ \w\/\.]*safari)|pda(?=.+windows ce))/i],[[h,w]],[/(android[-\w\. ]{0,9});.+buil/i],[d,[b,"Generic"]]],engine:[[/windows.+ edge\/([\w\.]+)/i],[p,[g,"EdgeHTML"]],[/webkit\/537\.36.+chrome\/(?!27)([\w\.]+)/i],[p,[g,"Blink"]],[/(presto)\/([\w\.]+)/i,/(webkit|trident|netfront|netsurf|amaya|lynx|w3m|goanna)\/([\w\.]+)/i,/ekioh(flow)\/([\w\.]+)/i,/(khtml|tasman|links)[\/ ]\(?([\w\.]+)/i,/(icab)[\/ ]([23]\.[\d\.]+)/i,/\b(libweb)/i],[g,p],[/rv\:([\w\.]{1,9})\b.+(gecko)/i],[p,g]],os:[[/microsoft (windows) (vista|xp)/i],[g,p],[/(windows) nt 6\.2; (arm)/i,/(windows (?:phone(?: os)?|mobile))[\/ ]?([\d\.\w ]*)/i,/(windows)[\/ ]?([ntce\d\. ]+\w)(?!.+xbox)/i],[g,[p,K,X]],[/(win(?=3|9|n)|win 9x )([nt\d\.]+)/i],[[g,"Windows"],[p,K,X]],[/ip[honead]{2,4}\b(?:.*os ([\w]+) like mac|; opera)/i,/ios;fbsv\/([\d\.]+)/i,/cfnetwork\/.+darwin/i],[[p,/_/g,"."],[g,"iOS"]],[/(mac os x) ?([\w\. ]*)/i,/(macintosh|mac_powerpc\b)(?!.+haiku)/i],[[g,$],[p,/_/g,"."]],[/droid ([\w\.]+)\b.+(android[- ]x86|harmonyos)/i],[p,g],[/(android|webos|qnx|bada|rim tablet os|maemo|meego|sailfish)[-\/ ]?([\w\.]*)/i,/(blackberry)\w*\/([\w\.]*)/i,/(tizen|kaios)[\/ ]([\w\.]+)/i,/\((series40);/i],[g,p],[/\(bb(10);/i],[p,[g,O]],[/(?:symbian ?os|symbos|s60(?=;)|series60)[-\/ ]?([\w\.]*)/i],[p,[g,"Symbian"]],[/mozilla\/[\d\.]+ \((?:mobile|tablet|tv|mobile; [\w ]+); rv:.+ gecko\/([\w\.]+)/i],[p,[g,P+" OS"]],[/web0s;.+rt(tv)/i,/\b(?:hp)?wos(?:browser)?\/([\w\.]+)/i],[p,[g,"webOS"]],[/watch(?: ?os[,\/]|\d,\d\/)([\d\.]+)/i],[p,[g,"watchOS"]],[/crkey\/([\d\.]+)/i],[p,[g,S+"cast"]],[/(cros) [\w]+(?:\)| ([\w\.]+)\b)/i],[[g,N],p],[/panasonic;(viera)/i,/(netrange)mmh/i,/(nettv)\/(\d+\.[\w\.]+)/i,/(nintendo|playstation) ([wids345portablevuch]+)/i,/(xbox); +xbox ([^\);]+)/i,/\b(joli|palm)\b ?(?:os)?\/?([\w\.]*)/i,/(mint)[\/\(\) ]?(\w*)/i,/(mageia|vectorlinux)[; ]/i,/([kxln]?ubuntu|debian|suse|opensuse|gentoo|arch(?= linux)|slackware|fedora|mandriva|centos|pclinuxos|red ?hat|zenwalk|linpus|raspbian|plan 9|minix|risc os|contiki|deepin|manjaro|elementary os|sabayon|linspire)(?: gnu\/linux)?(?: enterprise)?(?:[- ]linux)?(?:-gnu)?[-\/ ]?(?!chrom|package)([-\w\.]*)/i,/(hurd|linux) ?([\w\.]*)/i,/(gnu) ?([\w\.]*)/i,/\b([-frentopcghs]{0,5}bsd|dragonfly)[\/ ]?(?!amd|[ix346]{1,2}86)([\w\.]*)/i,/(haiku) (\w+)/i],[g,p],[/(sunos) ?([\w\.\d]*)/i],[[g,"Solaris"],p],[/((?:open)?solaris)[-\/ ]?([\w\.]*)/i,/(aix) ((\d)(?=\.|\)| )[\w\.])*/i,/\b(beos|os\/2|amigaos|morphos|openvms|fuchsia|hp-ux|serenityos)/i,/(unix) ?([\w\.]*)/i],[g,p]]},Q=function(e,t){if(typeof e===u&&(t=e,e=s),!(this instanceof Q))return new Q(e,t).getResult();var i=typeof n!==a&&n.navigator?n.navigator:s,r=e||(i&&i.userAgent?i.userAgent:""),f=i&&i.userAgentData?i.userAgentData:s,_=t?function(e,t){var i={};for(var r in e)t[r]&&t[r].length%2==0?i[r]=t[r].concat(e[r]):i[r]=e[r];return i}(J,t):J,y=i&&i.userAgent==r;return this.getBrowser=function(){var e,t={};return t[g]=s,t[p]=s,Z.call(t,r,_.browser),t[c]=typeof(e=t[p])===l?e.replace(/[^\d\.]/g,"").split(".")[0]:s,y&&i&&i.brave&&typeof i.brave.isBrave==o&&(t[g]="Brave"),t},this.getCPU=function(){var e={};return e[m]=s,Z.call(e,r,_.cpu),e},this.getDevice=function(){var e={};return e[b]=s,e[d]=s,e[h]=s,Z.call(e,r,_.device),y&&!e[h]&&f&&f.mobile&&(e[h]=w),y&&"Macintosh"==e[d]&&i&&typeof i.standalone!==a&&i.maxTouchPoints&&i.maxTouchPoints>2&&(e[d]="iPad",e[h]=v),e},this.getEngine=function(){var e={};return e[g]=s,e[p]=s,Z.call(e,r,_.engine),e},this.getOS=function(){var e={};return e[g]=s,e[p]=s,Z.call(e,r,_.os),y&&!e[g]&&f&&"Unknown"!=f.platform&&(e[g]=f.platform.replace(/chrome os/i,N).replace(/macos/i,$)),e},this.getResult=function(){return{ua:this.getUA(),browser:this.getBrowser(),engine:this.getEngine(),os:this.getOS(),device:this.getDevice(),cpu:this.getCPU()}},this.getUA=function(){return r},this.setUA=function(e){return r=typeof e===l&&e.length>350?W(e,350):e,this},this.setUA(r),this};Q.VERSION="1.0.35",Q.BROWSER=R([g,p,c]),Q.CPU=R([m]),Q.DEVICE=R([d,b,h,f,w,_,v,y,k]),Q.ENGINE=Q.OS=R([g,p]),typeof t!==a?(e.exports&&(t=e.exports=Q),t.UAParser=Q):i.amdO?(r=function(){return Q}.call(t,i,t,e))===s||(e.exports=r):typeof n!==a&&(n.UAParser=Q);var Y=typeof n!==a&&(n.jQuery||n.Zepto);if(Y&&!Y.ua){var ee=new Q;Y.ua=ee.getResult(),Y.ua.get=function(){return ee.getUA()},Y.ua.set=function(e){ee.setUA(e);var t=ee.getResult();for(var i in t)Y.ua[i]=t[i]}}}("object"==typeof window?window:this)}},t={};function i(r){var n=t[r];if(void 0!==n)return n.exports;var s=t[r]={exports:{}};return e[r].call(s.exports,s,s.exports,i),s.exports}i.amdO={};var r=i("./index.ts");ATSEvents=r})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,