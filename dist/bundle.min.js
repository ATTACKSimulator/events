/*! For license information please see bundle.min.js.LICENSE.txt */
var ATSEvents;(()=>{var e={"./index.ts":function(e,i,t){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(i,"__esModule",{value:!0});const s=t("./src/Manager.ts"),n=r(t("./src/remote.ts")),o={events:[],debug:!1,redirectUrl:"https://attacksimulator.com",source:"LP",url:"https://api-dev.attacksimulator.com"};e.exports=class{constructor(e){const i=Object.assign(Object.assign({},o),e);i.debug&&console.log(i);const t=new n.default(i.apiKey,i.url,i.debug);this.manager=new s.Manager(t,i.events,i.source,i.redirectUrl,i.debug)}listen(){this.manager.listen()}stop(){this.manager.stop()}trigger(e){this.manager.trigger(e)}}},"./src/BrowserInfo.ts":function(e,i,t){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(i,"__esModule",{value:!0}),i.findBrowserInfo=void 0;const s=r(t("./node_modules/ua-parser-js/src/ua-parser.js"));function n(){let e,i={};const t=navigator.userAgent;let r;return-1!==(e=t.indexOf("Opera"))?(i.name="Opera",i.version=t.substring(e+6),-1!==(e=t.indexOf("Version"))&&(i.version=t.substring(e+8))):-1!==(e=t.indexOf("OPR"))?(i.name="Opera",i.version=t.substring(e+5)):-1!==(e=t.indexOf("Edge"))?(i.name="Microsoft Edge",i.version=t.substring(e+5)):-1!==(e=t.indexOf("MSIE"))?(i.name="Microsoft Internet Explorer",i.version=t.substring(e+5)):-1!==(e=t.indexOf("Chrome"))?(i.name="Chrome",i.version=t.substring(e+7)):-1!==(e=t.indexOf("Safari"))?(i.name="Safari",i.version=t.substring(e+7),-1!==(e=t.indexOf("Version"))&&(i.version=t.substring(e+8))):-1!==(e=t.indexOf("Firefox"))?(i.name="Firefox",i.version=t.substring(e+8)):-1!==t.indexOf("Trident/")&&(i.name="Microsoft Internet Explorer",i.version=t.substring(t.indexOf("rv:")+3)),i.mobile=/Mobile|mini|Fennec|Android|iP(ad|od|hone)/.test(t),-1!=(r=i.version.indexOf(";"))&&(i.version=i.version.substring(0,r)),-1!=(r=i.version.indexOf(" "))&&(i.version=i.version.substring(0,r)),-1!=(r=i.version.indexOf(")"))&&(i.version=i.version.substring(0,r)),i.major_version=parseInt(""+i.version,10),isNaN(i.major_version)&&(i.version=""+parseFloat(navigator.appVersion),i.major_version=parseInt(navigator.appVersion,10)),i}function o(e){const{name:i,version:t}=e.getOS();return{name:i,version:t}}function a(e){const{model:i,type:t,vendor:r}=e.getDevice();return{model:i,type:t,vendor:r}}function c(e){const{architecture:i}=e.getCPU();return{architecture:i}}i.findBrowserInfo=function(){const e=new s.default;return{ua:window.navigator.userAgent,screen_size:{width:screen.width||0,height:screen.height||0},browser:n(),os:o(e),device:a(e),cpu:c(e)}}},"./src/CampaignInfo.ts":(e,i,t)=>{"use strict";Object.defineProperty(i,"__esModule",{value:!0}),i.findCampaignInfo=void 0;const r=t("./src/UrlParser.ts");function s(e,i){const t=e.split(".")[1].replace(/-/g,"+").replace(/_/g,"/"),r=JSON.parse(window.atob(t)).payload;return"attachment"===i?r.download_type="attachment":null!==i&&(r.download_type="file"),r}i.findCampaignInfo=function(){const e=new r.UrlParser(window.location.href),i=e.findParam("tk"),t=e.findParam("file_type");try{return[i,s(i,t)]}catch(e){return[i,{ats_company_id:""}]}}},"./src/Manager.ts":(e,i,t)=>{"use strict";Object.defineProperty(i,"__esModule",{value:!0}),i.Manager=void 0;const r=t("./src/BrowserInfo.ts"),s=t("./src/CampaignInfo.ts"),n=t("./src/events/AttachmentOpen.ts"),o=t("./src/events/Click.ts"),a=t("./src/events/Download.ts"),c=t("./src/events/FileOpen.ts"),d=t("./src/events/Input.ts"),l=t("./src/events/PageLoaded.ts"),u=t("./src/events/PageRead.ts"),b=t("./src/events/Submit.ts"),h=t("./src/Tools.ts");i.Manager=class{constructor(e,i,t,h,p=!1){this.supportedTypes=["email","password","tel"],this.supportedEvents={attachment_opened:n.AttachmentOpen,click:o.Click,download:a.Download,file_open:c.FileOpen,input:d.Input,page_load:l.PageLoaded,page_read:u.PageRead,submit:b.Submit},this.debug=!1,this.handlers=[],this.disabledEvents=[],this.remote=e,[this.token,this.campaignInfo]=(0,s.findCampaignInfo)(),this.browserInfo=(0,r.findBrowserInfo)(),i.length||(i=Object.keys(this.supportedEvents)),this.remoteEvents=i.map((e=>this.getEvent(e))),this.source=t,this.redirectUrl=h,this.debug=p,this.campaignInfo.download_type&&this.checkDownload()}checkDownload(){switch(this.campaignInfo.download_type){case"file":return this.trigger("file_opened");case"attachment":return this.trigger("attachment_opened")}}getEvent(e){return new this.supportedEvents[e]}listen(){let e=0;for(const i of this.remoteEvents){this.debug&&console.log(`Listening for event @${i.trigger} (${i.name})`);const t=i.targets;for(const r of t)r.addEventListener(i.trigger,this.handlers[e++]=e=>this.handle(i,e))}}stop(){let e=0;for(const i of this.remoteEvents){this.debug&&console.log(`Stopping listening for event @${i.trigger} (${i.name})`);const t=i.targets;for(const r of t)r.removeEventListener(i.trigger,this.handlers[e++])}}findType(e,i){if(!e.hasTypes||!i)return null;const t=i.currentTarget;return-1!==this.supportedTypes.indexOf(t.type)?t.type:t.dataset.type?t.dataset.type:null}packEvent(e,i){return{data:Object.assign(Object.assign({},this.browserInfo),{type:e}),source:this.source,timestamp:Math.floor(Date.now()/1e3),ats_header:this.token,event:i.name.toLowerCase(),sg_event_id:(0,h.createUUID)(),sg_message_id:this.campaignInfo.ats_instance_id}}trigger(e){const i=this.supportedEvents[e];if(!i)throw new Error(`Unsupported event ${e}. Please choose one of ${Object.keys(this.supportedEvents).join(", ")}`);this.handle(i)}handle(e,i){if(this.debug&&console.log(`Event @${e.trigger} (${e.name}) triggered...`),i&&(i.preventDefault(),i.stopPropagation(),i.stopImmediatePropagation()),!e.allowMultiple){if(this.disabledEvents.includes(e.name))return void(this.debug&&console.log(`Preventing duplicate event @${e.trigger} (${e.name}).`));this.disabledEvents.push(e.name)}const t=this.findType(e,i),r=this.packEvent(t,e);this.remote.post(r).then((e=>{this.debug&&console.log(e)})).catch((e=>{this.debug&&console.error(e)})).finally((()=>{e.redirectOnFinish&&(window.location.href=this.redirectUrl)}))}}},"./src/Tools.ts":(e,i)=>{"use strict";Object.defineProperty(i,"__esModule",{value:!0}),i.createUUID=void 0,i.createUUID=function(){const e=[],i="0123456789abcdef";for(let t=0;t<36;t++)e[t]=i.substr(Math.floor(16*Math.random()),1);return e[14]="4",e[19]=i.substr(3&e[19]|8,1),e[8]=e[13]=e[18]=e[23]="-",e.join("")}},"./src/UrlParser.ts":(e,i)=>{"use strict";Object.defineProperty(i,"__esModule",{value:!0}),i.UrlParser=void 0;i.UrlParser=class{constructor(e){this.url=e;const i=document.createElement("a");i.href=e,this.protocol=i.protocol,this.host=i.host,this.hostname=i.hostname,this.port=i.port,this.pathname=i.pathname,this.hash=i.hash,this.search=i.search.substr(1),this.parseParameters()}parseParameters(){this.parameters={};const e=this.search.split("&");for(const i of e){const[e,t]=i.split("=");this.parameters[e]=t}}findParam(e){return this.parameters[e]||null}}},"./src/events/AttachmentOpen.ts":(e,i)=>{"use strict";Object.defineProperty(i,"__esModule",{value:!0}),i.AttachmentOpen=void 0;i.AttachmentOpen=class{get redirectOnFinish(){return!1}get trigger(){return""}get name(){return"attachment_opened"}get hasTypes(){return!1}get targets(){return[]}checkEvent(){return!0}}},"./src/events/Click.ts":(e,i)=>{"use strict";Object.defineProperty(i,"__esModule",{value:!0}),i.Click=void 0;i.Click=class{get redirectOnFinish(){return!0}get trigger(){return"click"}get name(){return"click"}get hasTypes(){return!0}get targets(){return[...document.querySelectorAll("a:not([href$='.exe']),button:not([type=submit]),input[type=button]")].filter((e=>!e.hasAttribute("ignore")))}checkEvent(e){return e.which&&e.isTrusted&&e.screenX&&0!=e.screenX&&e.screenY&&0!=e.screenY}}},"./src/events/Download.ts":(e,i)=>{"use strict";Object.defineProperty(i,"__esModule",{value:!0}),i.Download=void 0;i.Download=class{get redirectOnFinish(){return!0}get trigger(){return"click"}get name(){return"download_file_event"}get hasTypes(){return!0}get targets(){return[...document.querySelectorAll("a[href$='.exe']")].filter((e=>!e.hasAttribute("ignore")))}checkEvent(e){return e.which&&e.isTrusted&&e.screenX&&0!=e.screenX&&e.screenY&&0!=e.screenY}}},"./src/events/FileOpen.ts":(e,i)=>{"use strict";Object.defineProperty(i,"__esModule",{value:!0}),i.FileOpen=void 0;i.FileOpen=class{get redirectOnFinish(){return!1}get trigger(){return""}get name(){return"file_opened"}get hasTypes(){return!1}get targets(){return[]}checkEvent(){return!0}}},"./src/events/Input.ts":(e,i)=>{"use strict";Object.defineProperty(i,"__esModule",{value:!0}),i.Input=void 0;i.Input=class{get redirectOnFinish(){return!1}get trigger(){return"input"}get name(){return"input_filled"}get hasTypes(){return!0}get targets(){return[...document.querySelectorAll("select,textarea,input")].filter((e=>!e.hasAttribute("ignore")))}checkEvent(e){return!!e.target.value.trim()}}},"./src/events/PageLoaded.ts":(e,i)=>{"use strict";Object.defineProperty(i,"__esModule",{value:!0}),i.PageLoaded=void 0;i.PageLoaded=class{get redirectOnFinish(){return!1}get trigger(){return"load"}get name(){return"page_loaded"}get hasTypes(){return!1}get targets(){return[window]}checkEvent(){return!0}}},"./src/events/PageRead.ts":(e,i)=>{"use strict";Object.defineProperty(i,"__esModule",{value:!0}),i.PageRead=void 0;i.PageRead=class{constructor(){this.minScrollPercentage=.1,this.minStaySeconds=18e4,this.hasScrolled=!1,this.hasStayed=!1,this.customEvent=new Event(this.trigger),this.enable()}enable(){window.onscroll=()=>this.scrolled(),this.detectFocus(),this.detectVisibility(),this.scrolled(),this.timeout=setTimeout((()=>this.stayed()),this.minStaySeconds)}get visibilityProps(){if(console.log("props"),void 0!==document.hidden)return["visibilitychange","visibilityState"];if(void 0!==document.mozHidden)return["mozvisibilitychange","mozVisibilityState"];if(void 0!==document.msHidden)return["msvisibilitychange","msVisibilityState"];if(void 0!==document.webkitHidden)return["webkitvisibilitychange","webkitVisibilityState"];throw new Error("Visibility not supported.")}detectFocus(){window.addEventListener("focus",this.focusGranted.bind(this)),window.addEventListener("blur",this.focusLost.bind(this))}detectVisibility(){try{const[e]=this.visibilityProps;document.addEventListener(e,this.visibilityChanged.bind(this))}catch(e){return}}stopDetectingVisibility(){try{const[e]=this.visibilityProps;document.removeEventListener(e,this.visibilityChanged.bind(this))}catch(e){return}}visibilityChanged(){const[e,i]=this.visibilityProps;this.toggleTimer("visible"===document[i])}focusGranted(){this.toggleTimer(!0)}focusLost(){this.toggleTimer(!1)}toggleTimer(e){this.hasStayed||(e?this.timeout=setTimeout((()=>this.stayed()),this.minStaySeconds):clearTimeout(this.timeout))}disable(){window.onscroll=null,this.stopDetectingVisibility(),window.removeEventListener("focus",this.focusGranted.bind(this)),window.removeEventListener("blur",this.focusLost.bind(this))}getScrollPercent(){const e=document.documentElement,i=document.body;return i.scrollHeight<e.scrollHeight?1:(e.scrollTop||i.scrollTop)/((e.scrollHeight||i.scrollHeight)-e.clientHeight)*100}scrolled(){this.getScrollPercent()>this.minScrollPercentage&&(this.hasStayed&&this.dispatch(),this.hasScrolled=!0)}stayed(){this.hasScrolled&&this.dispatch(),this.hasStayed=!0}dispatch(){window.dispatchEvent(this.customEvent),this.disable()}get redirectOnFinish(){return!1}get trigger(){return"page_read"}get name(){return"page_read"}get hasTypes(){return!1}get targets(){return[window]}checkEvent(){return!0}}},"./src/events/Submit.ts":(e,i)=>{"use strict";Object.defineProperty(i,"__esModule",{value:!0}),i.Submit=void 0;i.Submit=class{get redirectOnFinish(){return!0}get trigger(){return"submit"}get name(){return"form_submitted"}get hasTypes(){return!0}get targets(){return[...document.querySelectorAll("form")].filter((e=>!e.hasAttribute("ignore")))}checkEvent(e){return-1===e.target.className.indexOf("disabled")}}},"./src/remote.ts":(e,i)=>{"use strict";Object.defineProperty(i,"__esModule",{value:!0});i.default=class{constructor(e,i,t){this.api_key=e,this.url=i,this.debug=t}post(e){return this.debug&&(console.log(`Sending event to ${this.url} with data:`),console.table(e)),new Promise(((i,t)=>{const r=new XMLHttpRequest;r.open("POST",this.url,!0),r.setRequestHeader("Content-type","application/json"),r.setRequestHeader("api-key",this.api_key),r.onreadystatechange=function(){if(4===r.readyState&&200===r.status){const e=JSON.parse(r.responseText);i(e)}},r.onerror=function(e){t(e)},r.send(JSON.stringify(e))}))}}},"./node_modules/ua-parser-js/src/ua-parser.js":function(e,i,t){var r;!function(s,n){"use strict";var o="function",a="undefined",c="object",d="string",l="model",u="name",b="type",h="vendor",p="version",g="architecture",w="console",m="mobile",f="tablet",v="smarttv",y="wearable",x="embedded",k="Amazon",_="Apple",O="ASUS",S="BlackBerry",E="Firefox",P="Google",T="Huawei",j="LG",M="Microsoft",A="Motorola",C="Opera",I="Samsung",U="Sony",q="Xiaomi",N="Zebra",F="Facebook",z=function(e){for(var i={},t=0;t<e.length;t++)i[e[t].toUpperCase()]=e[t];return i},L=function(e,i){return typeof e===d&&-1!==D(i).indexOf(D(e))},D=function(e){return e.toLowerCase()},R=function(e,i){if(typeof e===d)return e=e.replace(/^\s\s*/,"").replace(/\s\s*$/,""),typeof i===a?e:e.substring(0,255)},V=function(e,i){for(var t,r,s,a,d,l,u=0;u<i.length&&!d;){var b=i[u],h=i[u+1];for(t=r=0;t<b.length&&!d;)if(d=b[t++].exec(e))for(s=0;s<h.length;s++)l=d[++r],typeof(a=h[s])===c&&a.length>0?2===a.length?typeof a[1]==o?this[a[0]]=a[1].call(this,l):this[a[0]]=a[1]:3===a.length?typeof a[1]!==o||a[1].exec&&a[1].test?this[a[0]]=l?l.replace(a[1],a[2]):n:this[a[0]]=l?a[1].call(this,l,a[2]):n:4===a.length&&(this[a[0]]=l?a[3].call(this,l.replace(a[1],a[2])):n):this[a]=l||n;u+=2}},B=function(e,i){for(var t in i)if(typeof i[t]===c&&i[t].length>0){for(var r=0;r<i[t].length;r++)if(L(i[t][r],e))return"?"===t?n:t}else if(L(i[t],e))return"?"===t?n:t;return e},$={ME:"4.90","NT 3.11":"NT3.51","NT 4.0":"NT4.0",2e3:"NT 5.0",XP:["NT 5.1","NT 5.2"],Vista:"NT 6.0",7:"NT 6.1",8:"NT 6.2",8.1:"NT 6.3",10:["NT 6.4","NT 10.0"],RT:"ARM"},H={browser:[[/\b(?:crmo|crios)\/([\w\.]+)/i],[p,[u,"Chrome"]],[/edg(?:e|ios|a)?\/([\w\.]+)/i],[p,[u,"Edge"]],[/(opera mini)\/([-\w\.]+)/i,/(opera [mobiletab]{3,6})\b.+version\/([-\w\.]+)/i,/(opera)(?:.+version\/|[\/ ]+)([\w\.]+)/i],[u,p],[/opios[\/ ]+([\w\.]+)/i],[p,[u,"Opera Mini"]],[/\bopr\/([\w\.]+)/i],[p,[u,C]],[/(kindle)\/([\w\.]+)/i,/(lunascape|maxthon|netfront|jasmine|blazer)[\/ ]?([\w\.]*)/i,/(avant |iemobile|slim)(?:browser)?[\/ ]?([\w\.]*)/i,/(ba?idubrowser)[\/ ]?([\w\.]+)/i,/(?:ms|\()(ie) ([\w\.]+)/i,/(flock|rockmelt|midori|epiphany|silk|skyfire|ovibrowser|bolt|iron|vivaldi|iridium|phantomjs|bowser|quark|qupzilla|falkon|rekonq|puffin|brave|whale|qqbrowserlite|qq)\/([-\w\.]+)/i,/(weibo)__([\d\.]+)/i],[u,p],[/(?:\buc? ?browser|(?:juc.+)ucweb)[\/ ]?([\w\.]+)/i],[p,[u,"UCBrowser"]],[/\bqbcore\/([\w\.]+)/i],[p,[u,"WeChat(Win) Desktop"]],[/micromessenger\/([\w\.]+)/i],[p,[u,"WeChat"]],[/konqueror\/([\w\.]+)/i],[p,[u,"Konqueror"]],[/trident.+rv[: ]([\w\.]{1,9})\b.+like gecko/i],[p,[u,"IE"]],[/yabrowser\/([\w\.]+)/i],[p,[u,"Yandex"]],[/(avast|avg)\/([\w\.]+)/i],[[u,/(.+)/,"$1 Secure Browser"],p],[/\bfocus\/([\w\.]+)/i],[p,[u,"Firefox Focus"]],[/\bopt\/([\w\.]+)/i],[p,[u,"Opera Touch"]],[/coc_coc\w+\/([\w\.]+)/i],[p,[u,"Coc Coc"]],[/dolfin\/([\w\.]+)/i],[p,[u,"Dolphin"]],[/coast\/([\w\.]+)/i],[p,[u,"Opera Coast"]],[/miuibrowser\/([\w\.]+)/i],[p,[u,"MIUI Browser"]],[/fxios\/([-\w\.]+)/i],[p,[u,E]],[/\bqihu|(qi?ho?o?|360)browser/i],[[u,"360 Browser"]],[/(oculus|samsung|sailfish)browser\/([\w\.]+)/i],[[u,/(.+)/,"$1 Browser"],p],[/(comodo_dragon)\/([\w\.]+)/i],[[u,/_/g," "],p],[/(electron)\/([\w\.]+) safari/i,/(tesla)(?: qtcarbrowser|\/(20\d\d\.[-\w\.]+))/i,/m?(qqbrowser|baiduboxapp|2345Explorer)[\/ ]?([\w\.]+)/i],[u,p],[/(metasr)[\/ ]?([\w\.]+)/i,/(lbbrowser)/i],[u],[/((?:fban\/fbios|fb_iab\/fb4a)(?!.+fbav)|;fbav\/([\w\.]+);)/i],[[u,F],p],[/safari (line)\/([\w\.]+)/i,/\b(line)\/([\w\.]+)\/iab/i,/(chromium|instagram)[\/ ]([-\w\.]+)/i],[u,p],[/\bgsa\/([\w\.]+) .*safari\//i],[p,[u,"GSA"]],[/headlesschrome(?:\/([\w\.]+)| )/i],[p,[u,"Chrome Headless"]],[/ wv\).+(chrome)\/([\w\.]+)/i],[[u,"Chrome WebView"],p],[/droid.+ version\/([\w\.]+)\b.+(?:mobile safari|safari)/i],[p,[u,"Android Browser"]],[/(chrome|omniweb|arora|[tizenoka]{5} ?browser)\/v?([\w\.]+)/i],[u,p],[/version\/([\w\.]+) .*mobile\/\w+ (safari)/i],[p,[u,"Mobile Safari"]],[/version\/([\w\.]+) .*(mobile ?safari|safari)/i],[p,u],[/webkit.+?(mobile ?safari|safari)(\/[\w\.]+)/i],[u,[p,B,{"1.0":"/8",1.2:"/1",1.3:"/3","2.0":"/412","2.0.2":"/416","2.0.3":"/417","2.0.4":"/419","?":"/"}]],[/(webkit|khtml)\/([\w\.]+)/i],[u,p],[/(navigator|netscape\d?)\/([-\w\.]+)/i],[[u,"Netscape"],p],[/mobile vr; rv:([\w\.]+)\).+firefox/i],[p,[u,"Firefox Reality"]],[/ekiohf.+(flow)\/([\w\.]+)/i,/(swiftfox)/i,/(icedragon|iceweasel|camino|chimera|fennec|maemo browser|minimo|conkeror|klar)[\/ ]?([\w\.\+]+)/i,/(seamonkey|k-meleon|icecat|iceape|firebird|phoenix|palemoon|basilisk|waterfox)\/([-\w\.]+)$/i,/(firefox)\/([\w\.]+)/i,/(mozilla)\/([\w\.]+) .+rv\:.+gecko\/\d+/i,/(polaris|lynx|dillo|icab|doris|amaya|w3m|netsurf|sleipnir|obigo|mosaic|(?:go|ice|up)[\. ]?browser)[-\/ ]?v?([\w\.]+)/i,/(links) \(([\w\.]+)/i],[u,p]],cpu:[[/(?:(amd|x(?:(?:86|64)[-_])?|wow|win)64)[;\)]/i],[[g,"amd64"]],[/(ia32(?=;))/i],[[g,D]],[/((?:i[346]|x)86)[;\)]/i],[[g,"ia32"]],[/\b(aarch64|arm(v?8e?l?|_?64))\b/i],[[g,"arm64"]],[/\b(arm(?:v[67])?ht?n?[fl]p?)\b/i],[[g,"armhf"]],[/windows (ce|mobile); ppc;/i],[[g,"arm"]],[/((?:ppc|powerpc)(?:64)?)(?: mac|;|\))/i],[[g,/ower/,"",D]],[/(sun4\w)[;\)]/i],[[g,"sparc"]],[/((?:avr32|ia64(?=;))|68k(?=\))|\barm(?=v(?:[1-7]|[5-7]1)l?|;|eabi)|(?=atmel )avr|(?:irix|mips|sparc)(?:64)?\b|pa-risc)/i],[[g,D]]],device:[[/\b(sch-i[89]0\d|shw-m380s|sm-[pt]\w{2,4}|gt-[pn]\d{2,4}|sgh-t8[56]9|nexus 10)/i],[l,[h,I],[b,f]],[/\b((?:s[cgp]h|gt|sm)-\w+|galaxy nexus)/i,/samsung[- ]([-\w]+)/i,/sec-(sgh\w+)/i],[l,[h,I],[b,m]],[/\((ip(?:hone|od)[\w ]*);/i],[l,[h,_],[b,m]],[/\((ipad);[-\w\),; ]+apple/i,/applecoremedia\/[\w\.]+ \((ipad)/i,/\b(ipad)\d\d?,\d\d?[;\]].+ios/i],[l,[h,_],[b,f]],[/\b((?:ag[rs][23]?|bah2?|sht?|btv)-a?[lw]\d{2})\b(?!.+d\/s)/i],[l,[h,T],[b,f]],[/(?:huawei|honor)([-\w ]+)[;\)]/i,/\b(nexus 6p|\w{2,4}-[atu]?[ln][01259x][012359][an]?)\b(?!.+d\/s)/i],[l,[h,T],[b,m]],[/\b(poco[\w ]+)(?: bui|\))/i,/\b; (\w+) build\/hm\1/i,/\b(hm[-_ ]?note?[_ ]?(?:\d\w)?) bui/i,/\b(redmi[\-_ ]?(?:note|k)?[\w_ ]+)(?: bui|\))/i,/\b(mi[-_ ]?(?:a\d|one|one[_ ]plus|note lte|max)?[_ ]?(?:\d?\w?)[_ ]?(?:plus|se|lite)?)(?: bui|\))/i],[[l,/_/g," "],[h,q],[b,m]],[/\b(mi[-_ ]?(?:pad)(?:[\w_ ]+))(?: bui|\))/i],[[l,/_/g," "],[h,q],[b,f]],[/; (\w+) bui.+ oppo/i,/\b(cph[12]\d{3}|p(?:af|c[al]|d\w|e[ar])[mt]\d0|x9007|a101op)\b/i],[l,[h,"OPPO"],[b,m]],[/vivo (\w+)(?: bui|\))/i,/\b(v[12]\d{3}\w?[at])(?: bui|;)/i],[l,[h,"Vivo"],[b,m]],[/\b(rmx[12]\d{3})(?: bui|;|\))/i],[l,[h,"Realme"],[b,m]],[/\b(milestone|droid(?:[2-4x]| (?:bionic|x2|pro|razr))?:?( 4g)?)\b[\w ]+build\//i,/\bmot(?:orola)?[- ](\w*)/i,/((?:moto[\w\(\) ]+|xt\d{3,4}|nexus 6)(?= bui|\)))/i],[l,[h,A],[b,m]],[/\b(mz60\d|xoom[2 ]{0,2}) build\//i],[l,[h,A],[b,f]],[/((?=lg)?[vl]k\-?\d{3}) bui| 3\.[-\w; ]{10}lg?-([06cv9]{3,4})/i],[l,[h,j],[b,f]],[/(lm(?:-?f100[nv]?|-[\w\.]+)(?= bui|\))|nexus [45])/i,/\blg[-e;\/ ]+((?!browser|netcast|android tv)\w+)/i,/\blg-?([\d\w]+) bui/i],[l,[h,j],[b,m]],[/(ideatab[-\w ]+)/i,/lenovo ?(s[56]000[-\w]+|tab(?:[\w ]+)|yt[-\d\w]{6}|tb[-\d\w]{6})/i],[l,[h,"Lenovo"],[b,f]],[/(?:maemo|nokia).*(n900|lumia \d+)/i,/nokia[-_ ]?([-\w\.]*)/i],[[l,/_/g," "],[h,"Nokia"],[b,m]],[/(pixel c)\b/i],[l,[h,P],[b,f]],[/droid.+; (pixel[\daxl ]{0,6})(?: bui|\))/i],[l,[h,P],[b,m]],[/droid.+ ([c-g]\d{4}|so[-gl]\w+|xq-a\w[4-7][12])(?= bui|\).+chrome\/(?![1-6]{0,1}\d\.))/i],[l,[h,U],[b,m]],[/sony tablet [ps]/i,/\b(?:sony)?sgp\w+(?: bui|\))/i],[[l,"Xperia Tablet"],[h,U],[b,f]],[/ (kb2005|in20[12]5|be20[12][59])\b/i,/(?:one)?(?:plus)? (a\d0\d\d)(?: b|\))/i],[l,[h,"OnePlus"],[b,m]],[/(alexa)webm/i,/(kf[a-z]{2}wi)( bui|\))/i,/(kf[a-z]+)( bui|\)).+silk\//i],[l,[h,k],[b,f]],[/((?:sd|kf)[0349hijorstuw]+)( bui|\)).+silk\//i],[[l,/(.+)/g,"Fire Phone $1"],[h,k],[b,m]],[/(playbook);[-\w\),; ]+(rim)/i],[l,h,[b,f]],[/\b((?:bb[a-f]|st[hv])100-\d)/i,/\(bb10; (\w+)/i],[l,[h,S],[b,m]],[/(?:\b|asus_)(transfo[prime ]{4,10} \w+|eeepc|slider \w+|nexus 7|padfone|p00[cj])/i],[l,[h,O],[b,f]],[/ (z[bes]6[027][012][km][ls]|zenfone \d\w?)\b/i],[l,[h,O],[b,m]],[/(nexus 9)/i],[l,[h,"HTC"],[b,f]],[/(htc)[-;_ ]{1,2}([\w ]+(?=\)| bui)|\w+)/i,/(zte)[- ]([\w ]+?)(?: bui|\/|\))/i,/(alcatel|geeksphone|nexian|panasonic|sony)[-_ ]?([-\w]*)/i],[h,[l,/_/g," "],[b,m]],[/droid.+; ([ab][1-7]-?[0178a]\d\d?)/i],[l,[h,"Acer"],[b,f]],[/droid.+; (m[1-5] note) bui/i,/\bmz-([-\w]{2,})/i],[l,[h,"Meizu"],[b,m]],[/\b(sh-?[altvz]?\d\d[a-ekm]?)/i],[l,[h,"Sharp"],[b,m]],[/(blackberry|benq|palm(?=\-)|sonyericsson|acer|asus|dell|meizu|motorola|polytron)[-_ ]?([-\w]*)/i,/(hp) ([\w ]+\w)/i,/(asus)-?(\w+)/i,/(microsoft); (lumia[\w ]+)/i,/(lenovo)[-_ ]?([-\w]+)/i,/(jolla)/i,/(oppo) ?([\w ]+) bui/i],[h,l,[b,m]],[/(archos) (gamepad2?)/i,/(hp).+(touchpad(?!.+tablet)|tablet)/i,/(kindle)\/([\w\.]+)/i,/(nook)[\w ]+build\/(\w+)/i,/(dell) (strea[kpr\d ]*[\dko])/i,/(le[- ]+pan)[- ]+(\w{1,9}) bui/i,/(trinity)[- ]*(t\d{3}) bui/i,/(gigaset)[- ]+(q\w{1,9}) bui/i,/(vodafone) ([\w ]+)(?:\)| bui)/i],[h,l,[b,f]],[/(surface duo)/i],[l,[h,M],[b,f]],[/droid [\d\.]+; (fp\du?)(?: b|\))/i],[l,[h,"Fairphone"],[b,m]],[/(u304aa)/i],[l,[h,"AT&T"],[b,m]],[/\bsie-(\w*)/i],[l,[h,"Siemens"],[b,m]],[/\b(rct\w+) b/i],[l,[h,"RCA"],[b,f]],[/\b(venue[\d ]{2,7}) b/i],[l,[h,"Dell"],[b,f]],[/\b(q(?:mv|ta)\w+) b/i],[l,[h,"Verizon"],[b,f]],[/\b(?:barnes[& ]+noble |bn[rt])([\w\+ ]*) b/i],[l,[h,"Barnes & Noble"],[b,f]],[/\b(tm\d{3}\w+) b/i],[l,[h,"NuVision"],[b,f]],[/\b(k88) b/i],[l,[h,"ZTE"],[b,f]],[/\b(nx\d{3}j) b/i],[l,[h,"ZTE"],[b,m]],[/\b(gen\d{3}) b.+49h/i],[l,[h,"Swiss"],[b,m]],[/\b(zur\d{3}) b/i],[l,[h,"Swiss"],[b,f]],[/\b((zeki)?tb.*\b) b/i],[l,[h,"Zeki"],[b,f]],[/\b([yr]\d{2}) b/i,/\b(dragon[- ]+touch |dt)(\w{5}) b/i],[[h,"Dragon Touch"],l,[b,f]],[/\b(ns-?\w{0,9}) b/i],[l,[h,"Insignia"],[b,f]],[/\b((nxa|next)-?\w{0,9}) b/i],[l,[h,"NextBook"],[b,f]],[/\b(xtreme\_)?(v(1[045]|2[015]|[3469]0|7[05])) b/i],[[h,"Voice"],l,[b,m]],[/\b(lvtel\-)?(v1[12]) b/i],[[h,"LvTel"],l,[b,m]],[/\b(ph-1) /i],[l,[h,"Essential"],[b,m]],[/\b(v(100md|700na|7011|917g).*\b) b/i],[l,[h,"Envizen"],[b,f]],[/\b(trio[-\w\. ]+) b/i],[l,[h,"MachSpeed"],[b,f]],[/\btu_(1491) b/i],[l,[h,"Rotor"],[b,f]],[/(shield[\w ]+) b/i],[l,[h,"Nvidia"],[b,f]],[/(sprint) (\w+)/i],[h,l,[b,m]],[/(kin\.[onetw]{3})/i],[[l,/\./g," "],[h,M],[b,m]],[/droid.+; (cc6666?|et5[16]|mc[239][23]x?|vc8[03]x?)\)/i],[l,[h,N],[b,f]],[/droid.+; (ec30|ps20|tc[2-8]\d[kx])\)/i],[l,[h,N],[b,m]],[/(ouya)/i,/(nintendo) ([wids3utch]+)/i],[h,l,[b,w]],[/droid.+; (shield) bui/i],[l,[h,"Nvidia"],[b,w]],[/(playstation [345portablevi]+)/i],[l,[h,U],[b,w]],[/\b(xbox(?: one)?(?!; xbox))[\); ]/i],[l,[h,M],[b,w]],[/smart-tv.+(samsung)/i],[h,[b,v]],[/hbbtv.+maple;(\d+)/i],[[l,/^/,"SmartTV"],[h,I],[b,v]],[/(nux; netcast.+smarttv|lg (netcast\.tv-201\d|android tv))/i],[[h,j],[b,v]],[/(apple) ?tv/i],[h,[l,"Apple TV"],[b,v]],[/crkey/i],[[l,"Chromecast"],[h,P],[b,v]],[/droid.+aft(\w)( bui|\))/i],[l,[h,k],[b,v]],[/\(dtv[\);].+(aquos)/i],[l,[h,"Sharp"],[b,v]],[/\b(roku)[\dx]*[\)\/]((?:dvp-)?[\d\.]*)/i,/hbbtv\/\d+\.\d+\.\d+ +\([\w ]*; *(\w[^;]*);([^;]*)/i],[[h,R],[l,R],[b,v]],[/\b(android tv|smart[- ]?tv|opera tv|tv; rv:)\b/i],[[b,v]],[/((pebble))app/i],[h,l,[b,y]],[/droid.+; (glass) \d/i],[l,[h,P],[b,y]],[/droid.+; (wt63?0{2,3})\)/i],[l,[h,N],[b,y]],[/(quest( 2)?)/i],[l,[h,F],[b,y]],[/(tesla)(?: qtcarbrowser|\/[-\w\.]+)/i],[h,[b,x]],[/droid .+?; ([^;]+?)(?: bui|\) applew).+? mobile safari/i],[l,[b,m]],[/droid .+?; ([^;]+?)(?: bui|\) applew).+?(?! mobile) safari/i],[l,[b,f]],[/\b((tablet|tab)[;\/]|focus\/\d(?!.+mobile))/i],[[b,f]],[/(phone|mobile(?:[;\/]| safari)|pda(?=.+windows ce))/i],[[b,m]],[/(android[-\w\. ]{0,9});.+buil/i],[l,[h,"Generic"]]],engine:[[/windows.+ edge\/([\w\.]+)/i],[p,[u,"EdgeHTML"]],[/webkit\/537\.36.+chrome\/(?!27)([\w\.]+)/i],[p,[u,"Blink"]],[/(presto)\/([\w\.]+)/i,/(webkit|trident|netfront|netsurf|amaya|lynx|w3m|goanna)\/([\w\.]+)/i,/ekioh(flow)\/([\w\.]+)/i,/(khtml|tasman|links)[\/ ]\(?([\w\.]+)/i,/(icab)[\/ ]([23]\.[\d\.]+)/i],[u,p],[/rv\:([\w\.]{1,9})\b.+(gecko)/i],[p,u]],os:[[/microsoft (windows) (vista|xp)/i],[u,p],[/(windows) nt 6\.2; (arm)/i,/(windows (?:phone(?: os)?|mobile))[\/ ]?([\d\.\w ]*)/i,/(windows)[\/ ]?([ntce\d\. ]+\w)(?!.+xbox)/i],[u,[p,B,$]],[/(win(?=3|9|n)|win 9x )([nt\d\.]+)/i],[[u,"Windows"],[p,B,$]],[/ip[honead]{2,4}\b(?:.*os ([\w]+) like mac|; opera)/i,/cfnetwork\/.+darwin/i],[[p,/_/g,"."],[u,"iOS"]],[/(mac os x) ?([\w\. ]*)/i,/(macintosh|mac_powerpc\b)(?!.+haiku)/i],[[u,"Mac OS"],[p,/_/g,"."]],[/droid ([\w\.]+)\b.+(android[- ]x86)/i],[p,u],[/(android|webos|qnx|bada|rim tablet os|maemo|meego|sailfish)[-\/ ]?([\w\.]*)/i,/(blackberry)\w*\/([\w\.]*)/i,/(tizen|kaios)[\/ ]([\w\.]+)/i,/\((series40);/i],[u,p],[/\(bb(10);/i],[p,[u,S]],[/(?:symbian ?os|symbos|s60(?=;)|series60)[-\/ ]?([\w\.]*)/i],[p,[u,"Symbian"]],[/mozilla\/[\d\.]+ \((?:mobile|tablet|tv|mobile; [\w ]+); rv:.+ gecko\/([\w\.]+)/i],[p,[u,"Firefox OS"]],[/web0s;.+rt(tv)/i,/\b(?:hp)?wos(?:browser)?\/([\w\.]+)/i],[p,[u,"webOS"]],[/crkey\/([\d\.]+)/i],[p,[u,"Chromecast"]],[/(cros) [\w]+ ([\w\.]+\w)/i],[[u,"Chromium OS"],p],[/(nintendo|playstation) ([wids345portablevuch]+)/i,/(xbox); +xbox ([^\);]+)/i,/\b(joli|palm)\b ?(?:os)?\/?([\w\.]*)/i,/(mint)[\/\(\) ]?(\w*)/i,/(mageia|vectorlinux)[; ]/i,/([kxln]?ubuntu|debian|suse|opensuse|gentoo|arch(?= linux)|slackware|fedora|mandriva|centos|pclinuxos|red ?hat|zenwalk|linpus|raspbian|plan 9|minix|risc os|contiki|deepin|manjaro|elementary os|sabayon|linspire)(?: gnu\/linux)?(?: enterprise)?(?:[- ]linux)?(?:-gnu)?[-\/ ]?(?!chrom|package)([-\w\.]*)/i,/(hurd|linux) ?([\w\.]*)/i,/(gnu) ?([\w\.]*)/i,/\b([-frentopcghs]{0,5}bsd|dragonfly)[\/ ]?(?!amd|[ix346]{1,2}86)([\w\.]*)/i,/(haiku) (\w+)/i],[u,p],[/(sunos) ?([\w\.\d]*)/i],[[u,"Solaris"],p],[/((?:open)?solaris)[-\/ ]?([\w\.]*)/i,/(aix) ((\d)(?=\.|\)| )[\w\.])*/i,/\b(beos|os\/2|amigaos|morphos|openvms|fuchsia|hp-ux)/i,/(unix) ?([\w\.]*)/i],[u,p]]},G=function(e,i){if(typeof e===c&&(i=e,e=n),!(this instanceof G))return new G(e,i).getResult();var t=e||(typeof s!==a&&s.navigator&&s.navigator.userAgent?s.navigator.userAgent:""),r=i?function(e,i){var t={};for(var r in e)i[r]&&i[r].length%2==0?t[r]=i[r].concat(e[r]):t[r]=e[r];return t}(H,i):H;return this.getBrowser=function(){var e,i={};return i.name=n,i.version=n,V.call(i,t,r.browser),i.major=typeof(e=i.version)===d?e.replace(/[^\d\.]/g,"").split(".")[0]:n,i},this.getCPU=function(){var e={};return e.architecture=n,V.call(e,t,r.cpu),e},this.getDevice=function(){var e={};return e.vendor=n,e.model=n,e.type=n,V.call(e,t,r.device),e},this.getEngine=function(){var e={};return e.name=n,e.version=n,V.call(e,t,r.engine),e},this.getOS=function(){var e={};return e.name=n,e.version=n,V.call(e,t,r.os),e},this.getResult=function(){return{ua:this.getUA(),browser:this.getBrowser(),engine:this.getEngine(),os:this.getOS(),device:this.getDevice(),cpu:this.getCPU()}},this.getUA=function(){return t},this.setUA=function(e){return t=typeof e===d&&e.length>255?R(e,255):e,this},this.setUA(t),this};G.VERSION="1.0.2",G.BROWSER=z([u,p,"major"]),G.CPU=z([g]),G.DEVICE=z([l,h,b,w,m,v,f,y,x]),G.ENGINE=G.OS=z([u,p]),typeof i!==a?(e.exports&&(i=e.exports=G),i.UAParser=G):t.amdO?(r=function(){return G}.call(i,t,i,e))===n||(e.exports=r):typeof s!==a&&(s.UAParser=G);var X=typeof s!==a&&(s.jQuery||s.Zepto);if(X&&!X.ua){var W=new G;X.ua=W.getResult(),X.ua.get=function(){return W.getUA()},X.ua.set=function(e){W.setUA(e);var i=W.getResult();for(var t in i)X.ua[t]=i[t]}}}("object"==typeof window?window:this)}},i={};function t(r){var s=i[r];if(void 0!==s)return s.exports;var n=i[r]={exports:{}};return e[r].call(n.exports,n,n.exports,t),n.exports}t.amdO={};var r=t("./index.ts");ATSEvents=r})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,